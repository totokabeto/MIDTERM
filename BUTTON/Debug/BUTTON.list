
BUTTON.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c10  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002d1c  08002d1c  00012d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d3c  08002d3c  00020040  2**0
                  CONTENTS
  4 .ARM          00000000  08002d3c  08002d3c  00020040  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d3c  08002d3c  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d3c  08002d3c  00012d3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d40  08002d40  00012d40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  08002d44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000009c  20000040  08002d84  00020040  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000dc  08002d84  000200dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 12 .debug_info   000094da  00000000  00000000  00020069  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b86  00000000  00000000  00029543  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a68  00000000  00000000  0002b0d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000938  00000000  00000000  0002bb38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016fcb  00000000  00000000  0002c470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c868  00000000  00000000  0004343b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081fae  00000000  00000000  0004fca3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d1c51  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002820  00000000  00000000  000d1ca4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000040 	.word	0x20000040
 8000128:	00000000 	.word	0x00000000
 800012c:	08002d04 	.word	0x08002d04

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000044 	.word	0x20000044
 8000148:	08002d04 	.word	0x08002d04

0800014c <fsm_ledBlinky_run>:
 *      Author: BOSCH - HCMUT
 */

#include "LedBlinky.h"

void fsm_ledBlinky_run (){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
switch (ledstatus){
 8000150:	4b1e      	ldr	r3, [pc, #120]	; (80001cc <fsm_ledBlinky_run+0x80>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b47      	cmp	r3, #71	; 0x47
 8000156:	d020      	beq.n	800019a <fsm_ledBlinky_run+0x4e>
 8000158:	2b47      	cmp	r3, #71	; 0x47
 800015a:	dc34      	bgt.n	80001c6 <fsm_ledBlinky_run+0x7a>
 800015c:	2b45      	cmp	r3, #69	; 0x45
 800015e:	d002      	beq.n	8000166 <fsm_ledBlinky_run+0x1a>
 8000160:	2b46      	cmp	r3, #70	; 0x46
 8000162:	d007      	beq.n	8000174 <fsm_ledBlinky_run+0x28>
ledstatus = LED_ON;
setTimer3(100);
}
break ;
}
}
 8000164:	e02f      	b.n	80001c6 <fsm_ledBlinky_run+0x7a>
ledstatus = LED_ON;
 8000166:	4b19      	ldr	r3, [pc, #100]	; (80001cc <fsm_ledBlinky_run+0x80>)
 8000168:	2246      	movs	r2, #70	; 0x46
 800016a:	601a      	str	r2, [r3, #0]
setTimer3(100);
 800016c:	2064      	movs	r0, #100	; 0x64
 800016e:	f001 f9ad 	bl	80014cc <setTimer3>
break;
 8000172:	e028      	b.n	80001c6 <fsm_ledBlinky_run+0x7a>
if (timer_flag3 == 1){
 8000174:	4b16      	ldr	r3, [pc, #88]	; (80001d0 <fsm_ledBlinky_run+0x84>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d121      	bne.n	80001c0 <fsm_ledBlinky_run+0x74>
timer_flag3 = 0;
 800017c:	4b14      	ldr	r3, [pc, #80]	; (80001d0 <fsm_ledBlinky_run+0x84>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000182:	2200      	movs	r2, #0
 8000184:	2120      	movs	r1, #32
 8000186:	4813      	ldr	r0, [pc, #76]	; (80001d4 <fsm_ledBlinky_run+0x88>)
 8000188:	f001 fdab 	bl	8001ce2 <HAL_GPIO_WritePin>
ledstatus = LED_OFF;
 800018c:	4b0f      	ldr	r3, [pc, #60]	; (80001cc <fsm_ledBlinky_run+0x80>)
 800018e:	2247      	movs	r2, #71	; 0x47
 8000190:	601a      	str	r2, [r3, #0]
setTimer3(100);
 8000192:	2064      	movs	r0, #100	; 0x64
 8000194:	f001 f99a 	bl	80014cc <setTimer3>
break;
 8000198:	e012      	b.n	80001c0 <fsm_ledBlinky_run+0x74>
if (timer_flag3 == 1){
 800019a:	4b0d      	ldr	r3, [pc, #52]	; (80001d0 <fsm_ledBlinky_run+0x84>)
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	2b01      	cmp	r3, #1
 80001a0:	d110      	bne.n	80001c4 <fsm_ledBlinky_run+0x78>
timer_flag3 =0;
 80001a2:	4b0b      	ldr	r3, [pc, #44]	; (80001d0 <fsm_ledBlinky_run+0x84>)
 80001a4:	2200      	movs	r2, #0
 80001a6:	601a      	str	r2, [r3, #0]
HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80001a8:	2201      	movs	r2, #1
 80001aa:	2120      	movs	r1, #32
 80001ac:	4809      	ldr	r0, [pc, #36]	; (80001d4 <fsm_ledBlinky_run+0x88>)
 80001ae:	f001 fd98 	bl	8001ce2 <HAL_GPIO_WritePin>
ledstatus = LED_ON;
 80001b2:	4b06      	ldr	r3, [pc, #24]	; (80001cc <fsm_ledBlinky_run+0x80>)
 80001b4:	2246      	movs	r2, #70	; 0x46
 80001b6:	601a      	str	r2, [r3, #0]
setTimer3(100);
 80001b8:	2064      	movs	r0, #100	; 0x64
 80001ba:	f001 f987 	bl	80014cc <setTimer3>
break ;
 80001be:	e001      	b.n	80001c4 <fsm_ledBlinky_run+0x78>
break;
 80001c0:	bf00      	nop
 80001c2:	e000      	b.n	80001c6 <fsm_ledBlinky_run+0x7a>
break ;
 80001c4:	bf00      	nop
}
 80001c6:	bf00      	nop
 80001c8:	bd80      	pop	{r7, pc}
 80001ca:	bf00      	nop
 80001cc:	20000074 	.word	0x20000074
 80001d0:	2000008c 	.word	0x2000008c
 80001d4:	40010800 	.word	0x40010800

080001d8 <subKeyProcess>:
int button1_flag = 0;
int button2_flag = 0;
int button3_flag = 0;
int button2_flag2 = 0;
int button3_flag3 =0;
void subKeyProcess(){
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
button1_flag = 1;
 80001dc:	4b03      	ldr	r3, [pc, #12]	; (80001ec <subKeyProcess+0x14>)
 80001de:	2201      	movs	r2, #1
 80001e0:	601a      	str	r2, [r3, #0]
}
 80001e2:	bf00      	nop
 80001e4:	46bd      	mov	sp, r7
 80001e6:	bc80      	pop	{r7}
 80001e8:	4770      	bx	lr
 80001ea:	bf00      	nop
 80001ec:	2000005c 	.word	0x2000005c

080001f0 <subKeyProcess2>:
void subKeyProcess2(){
 80001f0:	b480      	push	{r7}
 80001f2:	af00      	add	r7, sp, #0
button2_flag = 1;
 80001f4:	4b03      	ldr	r3, [pc, #12]	; (8000204 <subKeyProcess2+0x14>)
 80001f6:	2201      	movs	r2, #1
 80001f8:	601a      	str	r2, [r3, #0]
}
 80001fa:	bf00      	nop
 80001fc:	46bd      	mov	sp, r7
 80001fe:	bc80      	pop	{r7}
 8000200:	4770      	bx	lr
 8000202:	bf00      	nop
 8000204:	20000060 	.word	0x20000060

08000208 <subKeyProcess3>:
void subKeyProcess3(){
 8000208:	b480      	push	{r7}
 800020a:	af00      	add	r7, sp, #0
button3_flag = 1;
 800020c:	4b03      	ldr	r3, [pc, #12]	; (800021c <subKeyProcess3+0x14>)
 800020e:	2201      	movs	r2, #1
 8000210:	601a      	str	r2, [r3, #0]
}
 8000212:	bf00      	nop
 8000214:	46bd      	mov	sp, r7
 8000216:	bc80      	pop	{r7}
 8000218:	4770      	bx	lr
 800021a:	bf00      	nop
 800021c:	20000064 	.word	0x20000064

08000220 <getKeyInput>:
void getKeyInput(){
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
KeyReg2 = KeyReg1;
 8000224:	4b1f      	ldr	r3, [pc, #124]	; (80002a4 <getKeyInput+0x84>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	4a1f      	ldr	r2, [pc, #124]	; (80002a8 <getKeyInput+0x88>)
 800022a:	6013      	str	r3, [r2, #0]
KeyReg1 = KeyReg0;
 800022c:	4b1f      	ldr	r3, [pc, #124]	; (80002ac <getKeyInput+0x8c>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	4a1c      	ldr	r2, [pc, #112]	; (80002a4 <getKeyInput+0x84>)
 8000232:	6013      	str	r3, [r2, #0]
KeyReg0 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8000234:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000238:	481d      	ldr	r0, [pc, #116]	; (80002b0 <getKeyInput+0x90>)
 800023a:	f001 fd3b 	bl	8001cb4 <HAL_GPIO_ReadPin>
 800023e:	4603      	mov	r3, r0
 8000240:	461a      	mov	r2, r3
 8000242:	4b1a      	ldr	r3, [pc, #104]	; (80002ac <getKeyInput+0x8c>)
 8000244:	601a      	str	r2, [r3, #0]
if ((KeyReg1 == KeyReg0) && (KeyReg1 == KeyReg2)){
 8000246:	4b17      	ldr	r3, [pc, #92]	; (80002a4 <getKeyInput+0x84>)
 8000248:	681a      	ldr	r2, [r3, #0]
 800024a:	4b18      	ldr	r3, [pc, #96]	; (80002ac <getKeyInput+0x8c>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	429a      	cmp	r2, r3
 8000250:	d126      	bne.n	80002a0 <getKeyInput+0x80>
 8000252:	4b14      	ldr	r3, [pc, #80]	; (80002a4 <getKeyInput+0x84>)
 8000254:	681a      	ldr	r2, [r3, #0]
 8000256:	4b14      	ldr	r3, [pc, #80]	; (80002a8 <getKeyInput+0x88>)
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	429a      	cmp	r2, r3
 800025c:	d120      	bne.n	80002a0 <getKeyInput+0x80>
if (KeyReg2 != KeyReg3){
 800025e:	4b12      	ldr	r3, [pc, #72]	; (80002a8 <getKeyInput+0x88>)
 8000260:	681a      	ldr	r2, [r3, #0]
 8000262:	4b14      	ldr	r3, [pc, #80]	; (80002b4 <getKeyInput+0x94>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	429a      	cmp	r2, r3
 8000268:	d00e      	beq.n	8000288 <getKeyInput+0x68>
KeyReg3 = KeyReg2;
 800026a:	4b0f      	ldr	r3, [pc, #60]	; (80002a8 <getKeyInput+0x88>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	4a11      	ldr	r2, [pc, #68]	; (80002b4 <getKeyInput+0x94>)
 8000270:	6013      	str	r3, [r2, #0]

if (KeyReg3 == PRESSED_STATE){
 8000272:	4b10      	ldr	r3, [pc, #64]	; (80002b4 <getKeyInput+0x94>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	2b00      	cmp	r3, #0
 8000278:	d112      	bne.n	80002a0 <getKeyInput+0x80>

TimeOutForKeyPress = 300;
 800027a:	4b0f      	ldr	r3, [pc, #60]	; (80002b8 <getKeyInput+0x98>)
 800027c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000280:	601a      	str	r2, [r3, #0]
subKeyProcess();
 8000282:	f7ff ffa9 	bl	80001d8 <subKeyProcess>
if (TimeOutForKeyPress == 0){
KeyReg3 = NORMAL_STATE;
}
}
}
}
 8000286:	e00b      	b.n	80002a0 <getKeyInput+0x80>
TimeOutForKeyPress --;
 8000288:	4b0b      	ldr	r3, [pc, #44]	; (80002b8 <getKeyInput+0x98>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	3b01      	subs	r3, #1
 800028e:	4a0a      	ldr	r2, [pc, #40]	; (80002b8 <getKeyInput+0x98>)
 8000290:	6013      	str	r3, [r2, #0]
if (TimeOutForKeyPress == 0){
 8000292:	4b09      	ldr	r3, [pc, #36]	; (80002b8 <getKeyInput+0x98>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	2b00      	cmp	r3, #0
 8000298:	d102      	bne.n	80002a0 <getKeyInput+0x80>
KeyReg3 = NORMAL_STATE;
 800029a:	4b06      	ldr	r3, [pc, #24]	; (80002b4 <getKeyInput+0x94>)
 800029c:	2201      	movs	r2, #1
 800029e:	601a      	str	r2, [r3, #0]
}
 80002a0:	bf00      	nop
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	20000004 	.word	0x20000004
 80002a8:	20000008 	.word	0x20000008
 80002ac:	20000000 	.word	0x20000000
 80002b0:	40011000 	.word	0x40011000
 80002b4:	2000000c 	.word	0x2000000c
 80002b8:	20000030 	.word	0x20000030

080002bc <getKeyInput2>:
void getKeyInput2(){
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
Key2Reg2 = Key2Reg1;
 80002c0:	4b23      	ldr	r3, [pc, #140]	; (8000350 <getKeyInput2+0x94>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a23      	ldr	r2, [pc, #140]	; (8000354 <getKeyInput2+0x98>)
 80002c6:	6013      	str	r3, [r2, #0]
Key2Reg1 = Key2Reg0;
 80002c8:	4b23      	ldr	r3, [pc, #140]	; (8000358 <getKeyInput2+0x9c>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	4a20      	ldr	r2, [pc, #128]	; (8000350 <getKeyInput2+0x94>)
 80002ce:	6013      	str	r3, [r2, #0]
Key2Reg0 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14);
 80002d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002d4:	4821      	ldr	r0, [pc, #132]	; (800035c <getKeyInput2+0xa0>)
 80002d6:	f001 fced 	bl	8001cb4 <HAL_GPIO_ReadPin>
 80002da:	4603      	mov	r3, r0
 80002dc:	461a      	mov	r2, r3
 80002de:	4b1e      	ldr	r3, [pc, #120]	; (8000358 <getKeyInput2+0x9c>)
 80002e0:	601a      	str	r2, [r3, #0]
if ((Key2Reg1 == Key2Reg0) && (Key2Reg1 == Key2Reg2)){
 80002e2:	4b1b      	ldr	r3, [pc, #108]	; (8000350 <getKeyInput2+0x94>)
 80002e4:	681a      	ldr	r2, [r3, #0]
 80002e6:	4b1c      	ldr	r3, [pc, #112]	; (8000358 <getKeyInput2+0x9c>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d12d      	bne.n	800034a <getKeyInput2+0x8e>
 80002ee:	4b18      	ldr	r3, [pc, #96]	; (8000350 <getKeyInput2+0x94>)
 80002f0:	681a      	ldr	r2, [r3, #0]
 80002f2:	4b18      	ldr	r3, [pc, #96]	; (8000354 <getKeyInput2+0x98>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	429a      	cmp	r2, r3
 80002f8:	d127      	bne.n	800034a <getKeyInput2+0x8e>
if (Key2Reg2 != Key2Reg3){
 80002fa:	4b16      	ldr	r3, [pc, #88]	; (8000354 <getKeyInput2+0x98>)
 80002fc:	681a      	ldr	r2, [r3, #0]
 80002fe:	4b18      	ldr	r3, [pc, #96]	; (8000360 <getKeyInput2+0xa4>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	429a      	cmp	r2, r3
 8000304:	d00e      	beq.n	8000324 <getKeyInput2+0x68>
Key2Reg3 = Key2Reg2;
 8000306:	4b13      	ldr	r3, [pc, #76]	; (8000354 <getKeyInput2+0x98>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	4a15      	ldr	r2, [pc, #84]	; (8000360 <getKeyInput2+0xa4>)
 800030c:	6013      	str	r3, [r2, #0]

if (Key2Reg3 == PRESSED_STATE){
 800030e:	4b14      	ldr	r3, [pc, #80]	; (8000360 <getKeyInput2+0xa4>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	2b00      	cmp	r3, #0
 8000314:	d119      	bne.n	800034a <getKeyInput2+0x8e>
TimeOutForKeyPress = 300;
 8000316:	4b13      	ldr	r3, [pc, #76]	; (8000364 <getKeyInput2+0xa8>)
 8000318:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800031c:	601a      	str	r2, [r3, #0]
subKeyProcess2();
 800031e:	f7ff ff67 	bl	80001f0 <subKeyProcess2>
}

}
}
}
}
 8000322:	e012      	b.n	800034a <getKeyInput2+0x8e>
TimeOutForKeyPress --;
 8000324:	4b0f      	ldr	r3, [pc, #60]	; (8000364 <getKeyInput2+0xa8>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	3b01      	subs	r3, #1
 800032a:	4a0e      	ldr	r2, [pc, #56]	; (8000364 <getKeyInput2+0xa8>)
 800032c:	6013      	str	r3, [r2, #0]
if (TimeOutForKeyPress == 0){
 800032e:	4b0d      	ldr	r3, [pc, #52]	; (8000364 <getKeyInput2+0xa8>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	2b00      	cmp	r3, #0
 8000334:	d109      	bne.n	800034a <getKeyInput2+0x8e>
if (Key2Reg3 == PRESSED_STATE){
 8000336:	4b0a      	ldr	r3, [pc, #40]	; (8000360 <getKeyInput2+0xa4>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	2b00      	cmp	r3, #0
 800033c:	d105      	bne.n	800034a <getKeyInput2+0x8e>
button2_flag2 =1;
 800033e:	4b0a      	ldr	r3, [pc, #40]	; (8000368 <getKeyInput2+0xac>)
 8000340:	2201      	movs	r2, #1
 8000342:	601a      	str	r2, [r3, #0]
TimeOutForKeyPress = 100;
 8000344:	4b07      	ldr	r3, [pc, #28]	; (8000364 <getKeyInput2+0xa8>)
 8000346:	2264      	movs	r2, #100	; 0x64
 8000348:	601a      	str	r2, [r3, #0]
}
 800034a:	bf00      	nop
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	20000014 	.word	0x20000014
 8000354:	20000018 	.word	0x20000018
 8000358:	20000010 	.word	0x20000010
 800035c:	40011000 	.word	0x40011000
 8000360:	2000001c 	.word	0x2000001c
 8000364:	20000030 	.word	0x20000030
 8000368:	20000068 	.word	0x20000068

0800036c <getKeyInput3>:
void getKeyInput3(){
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
Key3Reg2 = Key3Reg1;
 8000370:	4b23      	ldr	r3, [pc, #140]	; (8000400 <getKeyInput3+0x94>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	4a23      	ldr	r2, [pc, #140]	; (8000404 <getKeyInput3+0x98>)
 8000376:	6013      	str	r3, [r2, #0]
Key3Reg1 = Key3Reg0;
 8000378:	4b23      	ldr	r3, [pc, #140]	; (8000408 <getKeyInput3+0x9c>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4a20      	ldr	r2, [pc, #128]	; (8000400 <getKeyInput3+0x94>)
 800037e:	6013      	str	r3, [r2, #0]
Key3Reg0 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15);
 8000380:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000384:	4821      	ldr	r0, [pc, #132]	; (800040c <getKeyInput3+0xa0>)
 8000386:	f001 fc95 	bl	8001cb4 <HAL_GPIO_ReadPin>
 800038a:	4603      	mov	r3, r0
 800038c:	461a      	mov	r2, r3
 800038e:	4b1e      	ldr	r3, [pc, #120]	; (8000408 <getKeyInput3+0x9c>)
 8000390:	601a      	str	r2, [r3, #0]
if ((Key3Reg1 == Key3Reg0) && (Key3Reg1 == Key3Reg2)){
 8000392:	4b1b      	ldr	r3, [pc, #108]	; (8000400 <getKeyInput3+0x94>)
 8000394:	681a      	ldr	r2, [r3, #0]
 8000396:	4b1c      	ldr	r3, [pc, #112]	; (8000408 <getKeyInput3+0x9c>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	429a      	cmp	r2, r3
 800039c:	d12d      	bne.n	80003fa <getKeyInput3+0x8e>
 800039e:	4b18      	ldr	r3, [pc, #96]	; (8000400 <getKeyInput3+0x94>)
 80003a0:	681a      	ldr	r2, [r3, #0]
 80003a2:	4b18      	ldr	r3, [pc, #96]	; (8000404 <getKeyInput3+0x98>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	429a      	cmp	r2, r3
 80003a8:	d127      	bne.n	80003fa <getKeyInput3+0x8e>
if (Key3Reg2 != Key3Reg3){
 80003aa:	4b16      	ldr	r3, [pc, #88]	; (8000404 <getKeyInput3+0x98>)
 80003ac:	681a      	ldr	r2, [r3, #0]
 80003ae:	4b18      	ldr	r3, [pc, #96]	; (8000410 <getKeyInput3+0xa4>)
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	429a      	cmp	r2, r3
 80003b4:	d00e      	beq.n	80003d4 <getKeyInput3+0x68>
Key3Reg3 = Key3Reg2;
 80003b6:	4b13      	ldr	r3, [pc, #76]	; (8000404 <getKeyInput3+0x98>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	4a15      	ldr	r2, [pc, #84]	; (8000410 <getKeyInput3+0xa4>)
 80003bc:	6013      	str	r3, [r2, #0]

if (Key3Reg3 == PRESSED_STATE){
 80003be:	4b14      	ldr	r3, [pc, #80]	; (8000410 <getKeyInput3+0xa4>)
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d119      	bne.n	80003fa <getKeyInput3+0x8e>
TimeOutForKeyPress = 300;
 80003c6:	4b13      	ldr	r3, [pc, #76]	; (8000414 <getKeyInput3+0xa8>)
 80003c8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80003cc:	601a      	str	r2, [r3, #0]
subKeyProcess3();
 80003ce:	f7ff ff1b 	bl	8000208 <subKeyProcess3>
}

}
}
}
}
 80003d2:	e012      	b.n	80003fa <getKeyInput3+0x8e>
TimeOutForKeyPress --;
 80003d4:	4b0f      	ldr	r3, [pc, #60]	; (8000414 <getKeyInput3+0xa8>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	3b01      	subs	r3, #1
 80003da:	4a0e      	ldr	r2, [pc, #56]	; (8000414 <getKeyInput3+0xa8>)
 80003dc:	6013      	str	r3, [r2, #0]
if (TimeOutForKeyPress == 0){
 80003de:	4b0d      	ldr	r3, [pc, #52]	; (8000414 <getKeyInput3+0xa8>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d109      	bne.n	80003fa <getKeyInput3+0x8e>
if (Key3Reg3 == PRESSED_STATE){
 80003e6:	4b0a      	ldr	r3, [pc, #40]	; (8000410 <getKeyInput3+0xa4>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d105      	bne.n	80003fa <getKeyInput3+0x8e>
button3_flag3 =1;
 80003ee:	4b0a      	ldr	r3, [pc, #40]	; (8000418 <getKeyInput3+0xac>)
 80003f0:	2201      	movs	r2, #1
 80003f2:	601a      	str	r2, [r3, #0]
TimeOutForKeyPress = 100;
 80003f4:	4b07      	ldr	r3, [pc, #28]	; (8000414 <getKeyInput3+0xa8>)
 80003f6:	2264      	movs	r2, #100	; 0x64
 80003f8:	601a      	str	r2, [r3, #0]
}
 80003fa:	bf00      	nop
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	20000024 	.word	0x20000024
 8000404:	20000028 	.word	0x20000028
 8000408:	20000020 	.word	0x20000020
 800040c:	40011000 	.word	0x40011000
 8000410:	2000002c 	.word	0x2000002c
 8000414:	20000030 	.word	0x20000030
 8000418:	2000006c 	.word	0x2000006c

0800041c <display7seg>:
 *  Created on: Nov 5, 2022
 *      Author: BOSCH - HCMUT
 */
#include "display7seg.h"
#include "main.h"
void display7seg (int num){
 800041c:	b580      	push	{r7, lr}
 800041e:	b082      	sub	sp, #8
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	2b09      	cmp	r3, #9
 8000428:	f200 8180 	bhi.w	800072c <display7seg+0x310>
 800042c:	a201      	add	r2, pc, #4	; (adr r2, 8000434 <display7seg+0x18>)
 800042e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000432:	bf00      	nop
 8000434:	0800045d 	.word	0x0800045d
 8000438:	080004a5 	.word	0x080004a5
 800043c:	080004ed 	.word	0x080004ed
 8000440:	08000535 	.word	0x08000535
 8000444:	0800057d 	.word	0x0800057d
 8000448:	080005c5 	.word	0x080005c5
 800044c:	0800060d 	.word	0x0800060d
 8000450:	08000655 	.word	0x08000655
 8000454:	0800069d 	.word	0x0800069d
 8000458:	080006e5 	.word	0x080006e5
switch (num){
case 0 : {
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_1 , GPIO_PIN_RESET );
 800045c:	2200      	movs	r2, #0
 800045e:	2102      	movs	r1, #2
 8000460:	48b5      	ldr	r0, [pc, #724]	; (8000738 <display7seg+0x31c>)
 8000462:	f001 fc3e 	bl	8001ce2 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_2 , GPIO_PIN_RESET );
 8000466:	2200      	movs	r2, #0
 8000468:	2104      	movs	r1, #4
 800046a:	48b3      	ldr	r0, [pc, #716]	; (8000738 <display7seg+0x31c>)
 800046c:	f001 fc39 	bl	8001ce2 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_3 , GPIO_PIN_RESET );
 8000470:	2200      	movs	r2, #0
 8000472:	2108      	movs	r1, #8
 8000474:	48b0      	ldr	r0, [pc, #704]	; (8000738 <display7seg+0x31c>)
 8000476:	f001 fc34 	bl	8001ce2 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_4 , GPIO_PIN_RESET );
 800047a:	2200      	movs	r2, #0
 800047c:	2110      	movs	r1, #16
 800047e:	48ae      	ldr	r0, [pc, #696]	; (8000738 <display7seg+0x31c>)
 8000480:	f001 fc2f 	bl	8001ce2 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_5 , GPIO_PIN_RESET );
 8000484:	2200      	movs	r2, #0
 8000486:	2120      	movs	r1, #32
 8000488:	48ab      	ldr	r0, [pc, #684]	; (8000738 <display7seg+0x31c>)
 800048a:	f001 fc2a 	bl	8001ce2 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_6 , GPIO_PIN_RESET );
 800048e:	2200      	movs	r2, #0
 8000490:	2140      	movs	r1, #64	; 0x40
 8000492:	48a9      	ldr	r0, [pc, #676]	; (8000738 <display7seg+0x31c>)
 8000494:	f001 fc25 	bl	8001ce2 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_7 , GPIO_PIN_SET );
 8000498:	2201      	movs	r2, #1
 800049a:	2180      	movs	r1, #128	; 0x80
 800049c:	48a6      	ldr	r0, [pc, #664]	; (8000738 <display7seg+0x31c>)
 800049e:	f001 fc20 	bl	8001ce2 <HAL_GPIO_WritePin>

break;
 80004a2:	e144      	b.n	800072e <display7seg+0x312>
}
case 1 :{
HAL_GPIO_WritePin (GPIOB, GPIO_PIN_1 , GPIO_PIN_SET );
 80004a4:	2201      	movs	r2, #1
 80004a6:	2102      	movs	r1, #2
 80004a8:	48a3      	ldr	r0, [pc, #652]	; (8000738 <display7seg+0x31c>)
 80004aa:	f001 fc1a 	bl	8001ce2 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_2 , GPIO_PIN_RESET );
 80004ae:	2200      	movs	r2, #0
 80004b0:	2104      	movs	r1, #4
 80004b2:	48a1      	ldr	r0, [pc, #644]	; (8000738 <display7seg+0x31c>)
 80004b4:	f001 fc15 	bl	8001ce2 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_3 , GPIO_PIN_RESET );
 80004b8:	2200      	movs	r2, #0
 80004ba:	2108      	movs	r1, #8
 80004bc:	489e      	ldr	r0, [pc, #632]	; (8000738 <display7seg+0x31c>)
 80004be:	f001 fc10 	bl	8001ce2 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_4 , GPIO_PIN_SET );
 80004c2:	2201      	movs	r2, #1
 80004c4:	2110      	movs	r1, #16
 80004c6:	489c      	ldr	r0, [pc, #624]	; (8000738 <display7seg+0x31c>)
 80004c8:	f001 fc0b 	bl	8001ce2 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_5 , GPIO_PIN_SET );
 80004cc:	2201      	movs	r2, #1
 80004ce:	2120      	movs	r1, #32
 80004d0:	4899      	ldr	r0, [pc, #612]	; (8000738 <display7seg+0x31c>)
 80004d2:	f001 fc06 	bl	8001ce2 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_6 , GPIO_PIN_SET );
 80004d6:	2201      	movs	r2, #1
 80004d8:	2140      	movs	r1, #64	; 0x40
 80004da:	4897      	ldr	r0, [pc, #604]	; (8000738 <display7seg+0x31c>)
 80004dc:	f001 fc01 	bl	8001ce2 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_7 , GPIO_PIN_SET );
 80004e0:	2201      	movs	r2, #1
 80004e2:	2180      	movs	r1, #128	; 0x80
 80004e4:	4894      	ldr	r0, [pc, #592]	; (8000738 <display7seg+0x31c>)
 80004e6:	f001 fbfc 	bl	8001ce2 <HAL_GPIO_WritePin>

break;
 80004ea:	e120      	b.n	800072e <display7seg+0x312>
}
case 2  :{
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_1 , GPIO_PIN_RESET );
 80004ec:	2200      	movs	r2, #0
 80004ee:	2102      	movs	r1, #2
 80004f0:	4891      	ldr	r0, [pc, #580]	; (8000738 <display7seg+0x31c>)
 80004f2:	f001 fbf6 	bl	8001ce2 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_2 , GPIO_PIN_RESET );
 80004f6:	2200      	movs	r2, #0
 80004f8:	2104      	movs	r1, #4
 80004fa:	488f      	ldr	r0, [pc, #572]	; (8000738 <display7seg+0x31c>)
 80004fc:	f001 fbf1 	bl	8001ce2 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_3 , GPIO_PIN_SET );
 8000500:	2201      	movs	r2, #1
 8000502:	2108      	movs	r1, #8
 8000504:	488c      	ldr	r0, [pc, #560]	; (8000738 <display7seg+0x31c>)
 8000506:	f001 fbec 	bl	8001ce2 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_4 , GPIO_PIN_RESET );
 800050a:	2200      	movs	r2, #0
 800050c:	2110      	movs	r1, #16
 800050e:	488a      	ldr	r0, [pc, #552]	; (8000738 <display7seg+0x31c>)
 8000510:	f001 fbe7 	bl	8001ce2 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_5 , GPIO_PIN_RESET );
 8000514:	2200      	movs	r2, #0
 8000516:	2120      	movs	r1, #32
 8000518:	4887      	ldr	r0, [pc, #540]	; (8000738 <display7seg+0x31c>)
 800051a:	f001 fbe2 	bl	8001ce2 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_6 , GPIO_PIN_SET );
 800051e:	2201      	movs	r2, #1
 8000520:	2140      	movs	r1, #64	; 0x40
 8000522:	4885      	ldr	r0, [pc, #532]	; (8000738 <display7seg+0x31c>)
 8000524:	f001 fbdd 	bl	8001ce2 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_7 , GPIO_PIN_RESET );
 8000528:	2200      	movs	r2, #0
 800052a:	2180      	movs	r1, #128	; 0x80
 800052c:	4882      	ldr	r0, [pc, #520]	; (8000738 <display7seg+0x31c>)
 800052e:	f001 fbd8 	bl	8001ce2 <HAL_GPIO_WritePin>

break;}
 8000532:	e0fc      	b.n	800072e <display7seg+0x312>
case 3 :{
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_1 , GPIO_PIN_RESET );
 8000534:	2200      	movs	r2, #0
 8000536:	2102      	movs	r1, #2
 8000538:	487f      	ldr	r0, [pc, #508]	; (8000738 <display7seg+0x31c>)
 800053a:	f001 fbd2 	bl	8001ce2 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_2 , GPIO_PIN_RESET );
 800053e:	2200      	movs	r2, #0
 8000540:	2104      	movs	r1, #4
 8000542:	487d      	ldr	r0, [pc, #500]	; (8000738 <display7seg+0x31c>)
 8000544:	f001 fbcd 	bl	8001ce2 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_3 , GPIO_PIN_RESET );
 8000548:	2200      	movs	r2, #0
 800054a:	2108      	movs	r1, #8
 800054c:	487a      	ldr	r0, [pc, #488]	; (8000738 <display7seg+0x31c>)
 800054e:	f001 fbc8 	bl	8001ce2 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_4 , GPIO_PIN_RESET );
 8000552:	2200      	movs	r2, #0
 8000554:	2110      	movs	r1, #16
 8000556:	4878      	ldr	r0, [pc, #480]	; (8000738 <display7seg+0x31c>)
 8000558:	f001 fbc3 	bl	8001ce2 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_5 , GPIO_PIN_SET );
 800055c:	2201      	movs	r2, #1
 800055e:	2120      	movs	r1, #32
 8000560:	4875      	ldr	r0, [pc, #468]	; (8000738 <display7seg+0x31c>)
 8000562:	f001 fbbe 	bl	8001ce2 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_6 , GPIO_PIN_SET );
 8000566:	2201      	movs	r2, #1
 8000568:	2140      	movs	r1, #64	; 0x40
 800056a:	4873      	ldr	r0, [pc, #460]	; (8000738 <display7seg+0x31c>)
 800056c:	f001 fbb9 	bl	8001ce2 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_7 , GPIO_PIN_RESET );
 8000570:	2200      	movs	r2, #0
 8000572:	2180      	movs	r1, #128	; 0x80
 8000574:	4870      	ldr	r0, [pc, #448]	; (8000738 <display7seg+0x31c>)
 8000576:	f001 fbb4 	bl	8001ce2 <HAL_GPIO_WritePin>

break;}
 800057a:	e0d8      	b.n	800072e <display7seg+0x312>
case 4  :{
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_1 , GPIO_PIN_SET );
 800057c:	2201      	movs	r2, #1
 800057e:	2102      	movs	r1, #2
 8000580:	486d      	ldr	r0, [pc, #436]	; (8000738 <display7seg+0x31c>)
 8000582:	f001 fbae 	bl	8001ce2 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_2 , GPIO_PIN_RESET );
 8000586:	2200      	movs	r2, #0
 8000588:	2104      	movs	r1, #4
 800058a:	486b      	ldr	r0, [pc, #428]	; (8000738 <display7seg+0x31c>)
 800058c:	f001 fba9 	bl	8001ce2 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_3 , GPIO_PIN_RESET );
 8000590:	2200      	movs	r2, #0
 8000592:	2108      	movs	r1, #8
 8000594:	4868      	ldr	r0, [pc, #416]	; (8000738 <display7seg+0x31c>)
 8000596:	f001 fba4 	bl	8001ce2 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_4 , GPIO_PIN_SET );
 800059a:	2201      	movs	r2, #1
 800059c:	2110      	movs	r1, #16
 800059e:	4866      	ldr	r0, [pc, #408]	; (8000738 <display7seg+0x31c>)
 80005a0:	f001 fb9f 	bl	8001ce2 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_5 , GPIO_PIN_SET );
 80005a4:	2201      	movs	r2, #1
 80005a6:	2120      	movs	r1, #32
 80005a8:	4863      	ldr	r0, [pc, #396]	; (8000738 <display7seg+0x31c>)
 80005aa:	f001 fb9a 	bl	8001ce2 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_6 , GPIO_PIN_RESET );
 80005ae:	2200      	movs	r2, #0
 80005b0:	2140      	movs	r1, #64	; 0x40
 80005b2:	4861      	ldr	r0, [pc, #388]	; (8000738 <display7seg+0x31c>)
 80005b4:	f001 fb95 	bl	8001ce2 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_7 , GPIO_PIN_RESET );
 80005b8:	2200      	movs	r2, #0
 80005ba:	2180      	movs	r1, #128	; 0x80
 80005bc:	485e      	ldr	r0, [pc, #376]	; (8000738 <display7seg+0x31c>)
 80005be:	f001 fb90 	bl	8001ce2 <HAL_GPIO_WritePin>

break;}
 80005c2:	e0b4      	b.n	800072e <display7seg+0x312>
case 5  :{
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_1 , GPIO_PIN_RESET );
 80005c4:	2200      	movs	r2, #0
 80005c6:	2102      	movs	r1, #2
 80005c8:	485b      	ldr	r0, [pc, #364]	; (8000738 <display7seg+0x31c>)
 80005ca:	f001 fb8a 	bl	8001ce2 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_2 , GPIO_PIN_SET );
 80005ce:	2201      	movs	r2, #1
 80005d0:	2104      	movs	r1, #4
 80005d2:	4859      	ldr	r0, [pc, #356]	; (8000738 <display7seg+0x31c>)
 80005d4:	f001 fb85 	bl	8001ce2 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_3 , GPIO_PIN_RESET );
 80005d8:	2200      	movs	r2, #0
 80005da:	2108      	movs	r1, #8
 80005dc:	4856      	ldr	r0, [pc, #344]	; (8000738 <display7seg+0x31c>)
 80005de:	f001 fb80 	bl	8001ce2 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_4 , GPIO_PIN_RESET );
 80005e2:	2200      	movs	r2, #0
 80005e4:	2110      	movs	r1, #16
 80005e6:	4854      	ldr	r0, [pc, #336]	; (8000738 <display7seg+0x31c>)
 80005e8:	f001 fb7b 	bl	8001ce2 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_5 , GPIO_PIN_SET );
 80005ec:	2201      	movs	r2, #1
 80005ee:	2120      	movs	r1, #32
 80005f0:	4851      	ldr	r0, [pc, #324]	; (8000738 <display7seg+0x31c>)
 80005f2:	f001 fb76 	bl	8001ce2 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_6 , GPIO_PIN_RESET );
 80005f6:	2200      	movs	r2, #0
 80005f8:	2140      	movs	r1, #64	; 0x40
 80005fa:	484f      	ldr	r0, [pc, #316]	; (8000738 <display7seg+0x31c>)
 80005fc:	f001 fb71 	bl	8001ce2 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_7 , GPIO_PIN_RESET );
 8000600:	2200      	movs	r2, #0
 8000602:	2180      	movs	r1, #128	; 0x80
 8000604:	484c      	ldr	r0, [pc, #304]	; (8000738 <display7seg+0x31c>)
 8000606:	f001 fb6c 	bl	8001ce2 <HAL_GPIO_WritePin>


break;}
 800060a:	e090      	b.n	800072e <display7seg+0x312>
case 6  :{
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_1 , GPIO_PIN_RESET );
 800060c:	2200      	movs	r2, #0
 800060e:	2102      	movs	r1, #2
 8000610:	4849      	ldr	r0, [pc, #292]	; (8000738 <display7seg+0x31c>)
 8000612:	f001 fb66 	bl	8001ce2 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_2 , GPIO_PIN_SET );
 8000616:	2201      	movs	r2, #1
 8000618:	2104      	movs	r1, #4
 800061a:	4847      	ldr	r0, [pc, #284]	; (8000738 <display7seg+0x31c>)
 800061c:	f001 fb61 	bl	8001ce2 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_3 , GPIO_PIN_RESET );
 8000620:	2200      	movs	r2, #0
 8000622:	2108      	movs	r1, #8
 8000624:	4844      	ldr	r0, [pc, #272]	; (8000738 <display7seg+0x31c>)
 8000626:	f001 fb5c 	bl	8001ce2 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_4 , GPIO_PIN_RESET );
 800062a:	2200      	movs	r2, #0
 800062c:	2110      	movs	r1, #16
 800062e:	4842      	ldr	r0, [pc, #264]	; (8000738 <display7seg+0x31c>)
 8000630:	f001 fb57 	bl	8001ce2 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_5 , GPIO_PIN_RESET );
 8000634:	2200      	movs	r2, #0
 8000636:	2120      	movs	r1, #32
 8000638:	483f      	ldr	r0, [pc, #252]	; (8000738 <display7seg+0x31c>)
 800063a:	f001 fb52 	bl	8001ce2 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_6 , GPIO_PIN_RESET );
 800063e:	2200      	movs	r2, #0
 8000640:	2140      	movs	r1, #64	; 0x40
 8000642:	483d      	ldr	r0, [pc, #244]	; (8000738 <display7seg+0x31c>)
 8000644:	f001 fb4d 	bl	8001ce2 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_7 , GPIO_PIN_RESET );
 8000648:	2200      	movs	r2, #0
 800064a:	2180      	movs	r1, #128	; 0x80
 800064c:	483a      	ldr	r0, [pc, #232]	; (8000738 <display7seg+0x31c>)
 800064e:	f001 fb48 	bl	8001ce2 <HAL_GPIO_WritePin>

break;}
 8000652:	e06c      	b.n	800072e <display7seg+0x312>
case 7  :{
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_1 , GPIO_PIN_RESET );
 8000654:	2200      	movs	r2, #0
 8000656:	2102      	movs	r1, #2
 8000658:	4837      	ldr	r0, [pc, #220]	; (8000738 <display7seg+0x31c>)
 800065a:	f001 fb42 	bl	8001ce2 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_2 , GPIO_PIN_RESET );
 800065e:	2200      	movs	r2, #0
 8000660:	2104      	movs	r1, #4
 8000662:	4835      	ldr	r0, [pc, #212]	; (8000738 <display7seg+0x31c>)
 8000664:	f001 fb3d 	bl	8001ce2 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_3 , GPIO_PIN_RESET );
 8000668:	2200      	movs	r2, #0
 800066a:	2108      	movs	r1, #8
 800066c:	4832      	ldr	r0, [pc, #200]	; (8000738 <display7seg+0x31c>)
 800066e:	f001 fb38 	bl	8001ce2 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_4 , GPIO_PIN_SET );
 8000672:	2201      	movs	r2, #1
 8000674:	2110      	movs	r1, #16
 8000676:	4830      	ldr	r0, [pc, #192]	; (8000738 <display7seg+0x31c>)
 8000678:	f001 fb33 	bl	8001ce2 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_5 , GPIO_PIN_SET );
 800067c:	2201      	movs	r2, #1
 800067e:	2120      	movs	r1, #32
 8000680:	482d      	ldr	r0, [pc, #180]	; (8000738 <display7seg+0x31c>)
 8000682:	f001 fb2e 	bl	8001ce2 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_6 , GPIO_PIN_SET );
 8000686:	2201      	movs	r2, #1
 8000688:	2140      	movs	r1, #64	; 0x40
 800068a:	482b      	ldr	r0, [pc, #172]	; (8000738 <display7seg+0x31c>)
 800068c:	f001 fb29 	bl	8001ce2 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_7 , GPIO_PIN_SET );
 8000690:	2201      	movs	r2, #1
 8000692:	2180      	movs	r1, #128	; 0x80
 8000694:	4828      	ldr	r0, [pc, #160]	; (8000738 <display7seg+0x31c>)
 8000696:	f001 fb24 	bl	8001ce2 <HAL_GPIO_WritePin>

break;}
 800069a:	e048      	b.n	800072e <display7seg+0x312>
case 8  :{
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_1 , GPIO_PIN_RESET );
 800069c:	2200      	movs	r2, #0
 800069e:	2102      	movs	r1, #2
 80006a0:	4825      	ldr	r0, [pc, #148]	; (8000738 <display7seg+0x31c>)
 80006a2:	f001 fb1e 	bl	8001ce2 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_2 , GPIO_PIN_RESET );
 80006a6:	2200      	movs	r2, #0
 80006a8:	2104      	movs	r1, #4
 80006aa:	4823      	ldr	r0, [pc, #140]	; (8000738 <display7seg+0x31c>)
 80006ac:	f001 fb19 	bl	8001ce2 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_3 , GPIO_PIN_RESET );
 80006b0:	2200      	movs	r2, #0
 80006b2:	2108      	movs	r1, #8
 80006b4:	4820      	ldr	r0, [pc, #128]	; (8000738 <display7seg+0x31c>)
 80006b6:	f001 fb14 	bl	8001ce2 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_4 , GPIO_PIN_RESET );
 80006ba:	2200      	movs	r2, #0
 80006bc:	2110      	movs	r1, #16
 80006be:	481e      	ldr	r0, [pc, #120]	; (8000738 <display7seg+0x31c>)
 80006c0:	f001 fb0f 	bl	8001ce2 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_5 , GPIO_PIN_RESET );
 80006c4:	2200      	movs	r2, #0
 80006c6:	2120      	movs	r1, #32
 80006c8:	481b      	ldr	r0, [pc, #108]	; (8000738 <display7seg+0x31c>)
 80006ca:	f001 fb0a 	bl	8001ce2 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_6 , GPIO_PIN_RESET );
 80006ce:	2200      	movs	r2, #0
 80006d0:	2140      	movs	r1, #64	; 0x40
 80006d2:	4819      	ldr	r0, [pc, #100]	; (8000738 <display7seg+0x31c>)
 80006d4:	f001 fb05 	bl	8001ce2 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_7 , GPIO_PIN_RESET );
 80006d8:	2200      	movs	r2, #0
 80006da:	2180      	movs	r1, #128	; 0x80
 80006dc:	4816      	ldr	r0, [pc, #88]	; (8000738 <display7seg+0x31c>)
 80006de:	f001 fb00 	bl	8001ce2 <HAL_GPIO_WritePin>

break;}
 80006e2:	e024      	b.n	800072e <display7seg+0x312>
case 9 :{
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_1 , GPIO_PIN_RESET );
 80006e4:	2200      	movs	r2, #0
 80006e6:	2102      	movs	r1, #2
 80006e8:	4813      	ldr	r0, [pc, #76]	; (8000738 <display7seg+0x31c>)
 80006ea:	f001 fafa 	bl	8001ce2 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_2 , GPIO_PIN_RESET );
 80006ee:	2200      	movs	r2, #0
 80006f0:	2104      	movs	r1, #4
 80006f2:	4811      	ldr	r0, [pc, #68]	; (8000738 <display7seg+0x31c>)
 80006f4:	f001 faf5 	bl	8001ce2 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_3 , GPIO_PIN_RESET );
 80006f8:	2200      	movs	r2, #0
 80006fa:	2108      	movs	r1, #8
 80006fc:	480e      	ldr	r0, [pc, #56]	; (8000738 <display7seg+0x31c>)
 80006fe:	f001 faf0 	bl	8001ce2 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_4 , GPIO_PIN_SET );
 8000702:	2201      	movs	r2, #1
 8000704:	2110      	movs	r1, #16
 8000706:	480c      	ldr	r0, [pc, #48]	; (8000738 <display7seg+0x31c>)
 8000708:	f001 faeb 	bl	8001ce2 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_5 , GPIO_PIN_SET );
 800070c:	2201      	movs	r2, #1
 800070e:	2120      	movs	r1, #32
 8000710:	4809      	ldr	r0, [pc, #36]	; (8000738 <display7seg+0x31c>)
 8000712:	f001 fae6 	bl	8001ce2 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_6 , GPIO_PIN_RESET );
 8000716:	2200      	movs	r2, #0
 8000718:	2140      	movs	r1, #64	; 0x40
 800071a:	4807      	ldr	r0, [pc, #28]	; (8000738 <display7seg+0x31c>)
 800071c:	f001 fae1 	bl	8001ce2 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_7 , GPIO_PIN_RESET );
 8000720:	2200      	movs	r2, #0
 8000722:	2180      	movs	r1, #128	; 0x80
 8000724:	4804      	ldr	r0, [pc, #16]	; (8000738 <display7seg+0x31c>)
 8000726:	f001 fadc 	bl	8001ce2 <HAL_GPIO_WritePin>


break;}
 800072a:	e000      	b.n	800072e <display7seg+0x312>
default :{break;}
 800072c:	bf00      	nop

}
}
 800072e:	bf00      	nop
 8000730:	3708      	adds	r7, #8
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	40010c00 	.word	0x40010c00

0800073c <fsm_automatic_run>:
#include "fsm_automatic.h"
#include "global.h"
#include "button.h"
#include "main.h"
#include "display7seg.h"
void fsm_automatic_run(){
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
switch(status){
 8000740:	4bb1      	ldr	r3, [pc, #708]	; (8000a08 <fsm_automatic_run+0x2cc>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	3b01      	subs	r3, #1
 8000746:	2b3a      	cmp	r3, #58	; 0x3a
 8000748:	f200 819c 	bhi.w	8000a84 <fsm_automatic_run+0x348>
 800074c:	a201      	add	r2, pc, #4	; (adr r2, 8000754 <fsm_automatic_run+0x18>)
 800074e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000752:	bf00      	nop
 8000754:	08000841 	.word	0x08000841
 8000758:	08000a85 	.word	0x08000a85
 800075c:	08000a85 	.word	0x08000a85
 8000760:	08000a85 	.word	0x08000a85
 8000764:	08000a85 	.word	0x08000a85
 8000768:	08000a85 	.word	0x08000a85
 800076c:	08000a85 	.word	0x08000a85
 8000770:	08000a85 	.word	0x08000a85
 8000774:	08000a85 	.word	0x08000a85
 8000778:	08000a85 	.word	0x08000a85
 800077c:	08000a85 	.word	0x08000a85
 8000780:	08000a85 	.word	0x08000a85
 8000784:	08000a85 	.word	0x08000a85
 8000788:	08000a85 	.word	0x08000a85
 800078c:	08000a85 	.word	0x08000a85
 8000790:	08000a85 	.word	0x08000a85
 8000794:	08000a85 	.word	0x08000a85
 8000798:	08000a85 	.word	0x08000a85
 800079c:	08000a85 	.word	0x08000a85
 80007a0:	08000a85 	.word	0x08000a85
 80007a4:	08000a85 	.word	0x08000a85
 80007a8:	08000a85 	.word	0x08000a85
 80007ac:	08000a85 	.word	0x08000a85
 80007b0:	08000a85 	.word	0x08000a85
 80007b4:	08000a85 	.word	0x08000a85
 80007b8:	08000a85 	.word	0x08000a85
 80007bc:	08000a85 	.word	0x08000a85
 80007c0:	08000a85 	.word	0x08000a85
 80007c4:	08000a85 	.word	0x08000a85
 80007c8:	08000a85 	.word	0x08000a85
 80007cc:	08000a85 	.word	0x08000a85
 80007d0:	08000a85 	.word	0x08000a85
 80007d4:	08000a85 	.word	0x08000a85
 80007d8:	08000a85 	.word	0x08000a85
 80007dc:	08000a85 	.word	0x08000a85
 80007e0:	08000a85 	.word	0x08000a85
 80007e4:	08000a85 	.word	0x08000a85
 80007e8:	08000a85 	.word	0x08000a85
 80007ec:	08000a85 	.word	0x08000a85
 80007f0:	08000a85 	.word	0x08000a85
 80007f4:	08000a85 	.word	0x08000a85
 80007f8:	08000a85 	.word	0x08000a85
 80007fc:	08000a85 	.word	0x08000a85
 8000800:	08000a85 	.word	0x08000a85
 8000804:	08000a85 	.word	0x08000a85
 8000808:	08000a85 	.word	0x08000a85
 800080c:	08000a85 	.word	0x08000a85
 8000810:	08000a85 	.word	0x08000a85
 8000814:	08000a85 	.word	0x08000a85
 8000818:	0800085d 	.word	0x0800085d
 800081c:	08000889 	.word	0x08000889
 8000820:	080008c1 	.word	0x080008c1
 8000824:	080008f5 	.word	0x080008f5
 8000828:	0800092d 	.word	0x0800092d
 800082c:	08000965 	.word	0x08000965
 8000830:	0800099d 	.word	0x0800099d
 8000834:	080009d3 	.word	0x080009d3
 8000838:	08000a19 	.word	0x08000a19
 800083c:	08000a4f 	.word	0x08000a4f
case INIT :
display7seg(0);
 8000840:	2000      	movs	r0, #0
 8000842:	f7ff fdeb 	bl	800041c <display7seg>
status = MAN_INC0;
 8000846:	4b70      	ldr	r3, [pc, #448]	; (8000a08 <fsm_automatic_run+0x2cc>)
 8000848:	220c      	movs	r2, #12
 800084a:	601a      	str	r2, [r3, #0]
ledstatus = LED_ON;
 800084c:	4b6f      	ldr	r3, [pc, #444]	; (8000a0c <fsm_automatic_run+0x2d0>)
 800084e:	2246      	movs	r2, #70	; 0x46
 8000850:	601a      	str	r2, [r3, #0]
setTimer2(1000);
 8000852:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000856:	f000 fe25 	bl	80014a4 <setTimer2>
break;
 800085a:	e126      	b.n	8000aaa <fsm_automatic_run+0x36e>
case AUTO_0:
if (button2_flag == 1){
 800085c:	4b6c      	ldr	r3, [pc, #432]	; (8000a10 <fsm_automatic_run+0x2d4>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	2b01      	cmp	r3, #1
 8000862:	d105      	bne.n	8000870 <fsm_automatic_run+0x134>
button2_flag = 0;
 8000864:	4b6a      	ldr	r3, [pc, #424]	; (8000a10 <fsm_automatic_run+0x2d4>)
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
status = MAN_INC0;
 800086a:	4b67      	ldr	r3, [pc, #412]	; (8000a08 <fsm_automatic_run+0x2cc>)
 800086c:	220c      	movs	r2, #12
 800086e:	601a      	str	r2, [r3, #0]
}
if (timer_flag2 ==1 ){
 8000870:	4b68      	ldr	r3, [pc, #416]	; (8000a14 <fsm_automatic_run+0x2d8>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	2b01      	cmp	r3, #1
 8000876:	f040 8107 	bne.w	8000a88 <fsm_automatic_run+0x34c>
timer_flag2 =0;
 800087a:	4b66      	ldr	r3, [pc, #408]	; (8000a14 <fsm_automatic_run+0x2d8>)
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
display7seg(0);
 8000880:	2000      	movs	r0, #0
 8000882:	f7ff fdcb 	bl	800041c <display7seg>
}
break;
 8000886:	e0ff      	b.n	8000a88 <fsm_automatic_run+0x34c>
case AUTO_1:
//TOD0
if (button2_flag == 1){
 8000888:	4b61      	ldr	r3, [pc, #388]	; (8000a10 <fsm_automatic_run+0x2d4>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	2b01      	cmp	r3, #1
 800088e:	d105      	bne.n	800089c <fsm_automatic_run+0x160>
button2_flag = 0;
 8000890:	4b5f      	ldr	r3, [pc, #380]	; (8000a10 <fsm_automatic_run+0x2d4>)
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
status = MAN_INC1;
 8000896:	4b5c      	ldr	r3, [pc, #368]	; (8000a08 <fsm_automatic_run+0x2cc>)
 8000898:	220d      	movs	r2, #13
 800089a:	601a      	str	r2, [r3, #0]
}
if (timer_flag2 == 1){
 800089c:	4b5d      	ldr	r3, [pc, #372]	; (8000a14 <fsm_automatic_run+0x2d8>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	2b01      	cmp	r3, #1
 80008a2:	f040 80f3 	bne.w	8000a8c <fsm_automatic_run+0x350>
timer_flag2 =0;
 80008a6:	4b5b      	ldr	r3, [pc, #364]	; (8000a14 <fsm_automatic_run+0x2d8>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
display7seg(1);
 80008ac:	2001      	movs	r0, #1
 80008ae:	f7ff fdb5 	bl	800041c <display7seg>
status = AUTO_0;
 80008b2:	4b55      	ldr	r3, [pc, #340]	; (8000a08 <fsm_automatic_run+0x2cc>)
 80008b4:	2232      	movs	r2, #50	; 0x32
 80008b6:	601a      	str	r2, [r3, #0]
setTimer2(100);
 80008b8:	2064      	movs	r0, #100	; 0x64
 80008ba:	f000 fdf3 	bl	80014a4 <setTimer2>
}
break;
 80008be:	e0e5      	b.n	8000a8c <fsm_automatic_run+0x350>
case AUTO_2:
if (button2_flag == 1){
 80008c0:	4b53      	ldr	r3, [pc, #332]	; (8000a10 <fsm_automatic_run+0x2d4>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	2b01      	cmp	r3, #1
 80008c6:	d105      	bne.n	80008d4 <fsm_automatic_run+0x198>
button2_flag = 0;
 80008c8:	4b51      	ldr	r3, [pc, #324]	; (8000a10 <fsm_automatic_run+0x2d4>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
status = MAN_INC2;
 80008ce:	4b4e      	ldr	r3, [pc, #312]	; (8000a08 <fsm_automatic_run+0x2cc>)
 80008d0:	220e      	movs	r2, #14
 80008d2:	601a      	str	r2, [r3, #0]
}
if (timer_flag2 == 1){
 80008d4:	4b4f      	ldr	r3, [pc, #316]	; (8000a14 <fsm_automatic_run+0x2d8>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	2b01      	cmp	r3, #1
 80008da:	d10b      	bne.n	80008f4 <fsm_automatic_run+0x1b8>
timer_flag2 =0;
 80008dc:	4b4d      	ldr	r3, [pc, #308]	; (8000a14 <fsm_automatic_run+0x2d8>)
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]
display7seg(2);
 80008e2:	2002      	movs	r0, #2
 80008e4:	f7ff fd9a 	bl	800041c <display7seg>
status = AUTO_1;
 80008e8:	4b47      	ldr	r3, [pc, #284]	; (8000a08 <fsm_automatic_run+0x2cc>)
 80008ea:	2233      	movs	r2, #51	; 0x33
 80008ec:	601a      	str	r2, [r3, #0]
setTimer2(100);
 80008ee:	2064      	movs	r0, #100	; 0x64
 80008f0:	f000 fdd8 	bl	80014a4 <setTimer2>
}
case AUTO_3:
if (button2_flag == 1){
 80008f4:	4b46      	ldr	r3, [pc, #280]	; (8000a10 <fsm_automatic_run+0x2d4>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	2b01      	cmp	r3, #1
 80008fa:	d105      	bne.n	8000908 <fsm_automatic_run+0x1cc>
button2_flag = 0;
 80008fc:	4b44      	ldr	r3, [pc, #272]	; (8000a10 <fsm_automatic_run+0x2d4>)
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
status = MAN_INC3;
 8000902:	4b41      	ldr	r3, [pc, #260]	; (8000a08 <fsm_automatic_run+0x2cc>)
 8000904:	220f      	movs	r2, #15
 8000906:	601a      	str	r2, [r3, #0]
}
if (timer_flag2 == 1){
 8000908:	4b42      	ldr	r3, [pc, #264]	; (8000a14 <fsm_automatic_run+0x2d8>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	2b01      	cmp	r3, #1
 800090e:	f040 80bf 	bne.w	8000a90 <fsm_automatic_run+0x354>
timer_flag2 =0;
 8000912:	4b40      	ldr	r3, [pc, #256]	; (8000a14 <fsm_automatic_run+0x2d8>)
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
display7seg(3);
 8000918:	2003      	movs	r0, #3
 800091a:	f7ff fd7f 	bl	800041c <display7seg>
status = AUTO_2;
 800091e:	4b3a      	ldr	r3, [pc, #232]	; (8000a08 <fsm_automatic_run+0x2cc>)
 8000920:	2234      	movs	r2, #52	; 0x34
 8000922:	601a      	str	r2, [r3, #0]
setTimer2(100);
 8000924:	2064      	movs	r0, #100	; 0x64
 8000926:	f000 fdbd 	bl	80014a4 <setTimer2>
}
break;
 800092a:	e0b1      	b.n	8000a90 <fsm_automatic_run+0x354>
case AUTO_4:
if (button2_flag == 1){
 800092c:	4b38      	ldr	r3, [pc, #224]	; (8000a10 <fsm_automatic_run+0x2d4>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	2b01      	cmp	r3, #1
 8000932:	d105      	bne.n	8000940 <fsm_automatic_run+0x204>
button2_flag = 0;
 8000934:	4b36      	ldr	r3, [pc, #216]	; (8000a10 <fsm_automatic_run+0x2d4>)
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
status = MAN_INC4;
 800093a:	4b33      	ldr	r3, [pc, #204]	; (8000a08 <fsm_automatic_run+0x2cc>)
 800093c:	2210      	movs	r2, #16
 800093e:	601a      	str	r2, [r3, #0]
}
if (timer_flag2 == 1){
 8000940:	4b34      	ldr	r3, [pc, #208]	; (8000a14 <fsm_automatic_run+0x2d8>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	2b01      	cmp	r3, #1
 8000946:	f040 80a5 	bne.w	8000a94 <fsm_automatic_run+0x358>
timer_flag2 =0;
 800094a:	4b32      	ldr	r3, [pc, #200]	; (8000a14 <fsm_automatic_run+0x2d8>)
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
display7seg(4);
 8000950:	2004      	movs	r0, #4
 8000952:	f7ff fd63 	bl	800041c <display7seg>
status = AUTO_3;
 8000956:	4b2c      	ldr	r3, [pc, #176]	; (8000a08 <fsm_automatic_run+0x2cc>)
 8000958:	2235      	movs	r2, #53	; 0x35
 800095a:	601a      	str	r2, [r3, #0]
setTimer2(100);
 800095c:	2064      	movs	r0, #100	; 0x64
 800095e:	f000 fda1 	bl	80014a4 <setTimer2>
}
break;
 8000962:	e097      	b.n	8000a94 <fsm_automatic_run+0x358>
case AUTO_5:
if (button2_flag == 1){
 8000964:	4b2a      	ldr	r3, [pc, #168]	; (8000a10 <fsm_automatic_run+0x2d4>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	2b01      	cmp	r3, #1
 800096a:	d105      	bne.n	8000978 <fsm_automatic_run+0x23c>
button2_flag = 0;
 800096c:	4b28      	ldr	r3, [pc, #160]	; (8000a10 <fsm_automatic_run+0x2d4>)
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
status = MAN_INC5;
 8000972:	4b25      	ldr	r3, [pc, #148]	; (8000a08 <fsm_automatic_run+0x2cc>)
 8000974:	2211      	movs	r2, #17
 8000976:	601a      	str	r2, [r3, #0]
}
if (timer_flag2 == 1){
 8000978:	4b26      	ldr	r3, [pc, #152]	; (8000a14 <fsm_automatic_run+0x2d8>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	2b01      	cmp	r3, #1
 800097e:	f040 808b 	bne.w	8000a98 <fsm_automatic_run+0x35c>
timer_flag2 =0;
 8000982:	4b24      	ldr	r3, [pc, #144]	; (8000a14 <fsm_automatic_run+0x2d8>)
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
display7seg(5);
 8000988:	2005      	movs	r0, #5
 800098a:	f7ff fd47 	bl	800041c <display7seg>
status = AUTO_4;
 800098e:	4b1e      	ldr	r3, [pc, #120]	; (8000a08 <fsm_automatic_run+0x2cc>)
 8000990:	2236      	movs	r2, #54	; 0x36
 8000992:	601a      	str	r2, [r3, #0]
setTimer2(100);
 8000994:	2064      	movs	r0, #100	; 0x64
 8000996:	f000 fd85 	bl	80014a4 <setTimer2>
}
break;
 800099a:	e07d      	b.n	8000a98 <fsm_automatic_run+0x35c>
case AUTO_6:
if (button2_flag == 1){
 800099c:	4b1c      	ldr	r3, [pc, #112]	; (8000a10 <fsm_automatic_run+0x2d4>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	2b01      	cmp	r3, #1
 80009a2:	d105      	bne.n	80009b0 <fsm_automatic_run+0x274>
button2_flag = 0;
 80009a4:	4b1a      	ldr	r3, [pc, #104]	; (8000a10 <fsm_automatic_run+0x2d4>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
status = MAN_INC6;
 80009aa:	4b17      	ldr	r3, [pc, #92]	; (8000a08 <fsm_automatic_run+0x2cc>)
 80009ac:	2212      	movs	r2, #18
 80009ae:	601a      	str	r2, [r3, #0]
}
if (timer_flag2 == 1){
 80009b0:	4b18      	ldr	r3, [pc, #96]	; (8000a14 <fsm_automatic_run+0x2d8>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	d171      	bne.n	8000a9c <fsm_automatic_run+0x360>
timer_flag2 =0;
 80009b8:	4b16      	ldr	r3, [pc, #88]	; (8000a14 <fsm_automatic_run+0x2d8>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
display7seg(6);
 80009be:	2006      	movs	r0, #6
 80009c0:	f7ff fd2c 	bl	800041c <display7seg>
status = AUTO_5;
 80009c4:	4b10      	ldr	r3, [pc, #64]	; (8000a08 <fsm_automatic_run+0x2cc>)
 80009c6:	2237      	movs	r2, #55	; 0x37
 80009c8:	601a      	str	r2, [r3, #0]
setTimer2(100);
 80009ca:	2064      	movs	r0, #100	; 0x64
 80009cc:	f000 fd6a 	bl	80014a4 <setTimer2>
}
break;
 80009d0:	e064      	b.n	8000a9c <fsm_automatic_run+0x360>
case AUTO_7:
if (timer_flag2 == 1){
 80009d2:	4b10      	ldr	r3, [pc, #64]	; (8000a14 <fsm_automatic_run+0x2d8>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	2b01      	cmp	r3, #1
 80009d8:	d10b      	bne.n	80009f2 <fsm_automatic_run+0x2b6>
timer_flag2 =0;
 80009da:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <fsm_automatic_run+0x2d8>)
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
display7seg(7);
 80009e0:	2007      	movs	r0, #7
 80009e2:	f7ff fd1b 	bl	800041c <display7seg>
status = AUTO_6;
 80009e6:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <fsm_automatic_run+0x2cc>)
 80009e8:	2238      	movs	r2, #56	; 0x38
 80009ea:	601a      	str	r2, [r3, #0]
setTimer2(100);
 80009ec:	2064      	movs	r0, #100	; 0x64
 80009ee:	f000 fd59 	bl	80014a4 <setTimer2>
}
if (button2_flag == 1){
 80009f2:	4b07      	ldr	r3, [pc, #28]	; (8000a10 <fsm_automatic_run+0x2d4>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	2b01      	cmp	r3, #1
 80009f8:	d152      	bne.n	8000aa0 <fsm_automatic_run+0x364>
button2_flag = 0;
 80009fa:	4b05      	ldr	r3, [pc, #20]	; (8000a10 <fsm_automatic_run+0x2d4>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
status = MAN_INC7;
 8000a00:	4b01      	ldr	r3, [pc, #4]	; (8000a08 <fsm_automatic_run+0x2cc>)
 8000a02:	2213      	movs	r2, #19
 8000a04:	601a      	str	r2, [r3, #0]
}
break;
 8000a06:	e04b      	b.n	8000aa0 <fsm_automatic_run+0x364>
 8000a08:	20000070 	.word	0x20000070
 8000a0c:	20000074 	.word	0x20000074
 8000a10:	20000060 	.word	0x20000060
 8000a14:	20000088 	.word	0x20000088
case AUTO_8:
if (button2_flag == 1){
 8000a18:	4b25      	ldr	r3, [pc, #148]	; (8000ab0 <fsm_automatic_run+0x374>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	2b01      	cmp	r3, #1
 8000a1e:	d105      	bne.n	8000a2c <fsm_automatic_run+0x2f0>
button2_flag = 0;
 8000a20:	4b23      	ldr	r3, [pc, #140]	; (8000ab0 <fsm_automatic_run+0x374>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
status = MAN_INC8;
 8000a26:	4b23      	ldr	r3, [pc, #140]	; (8000ab4 <fsm_automatic_run+0x378>)
 8000a28:	2214      	movs	r2, #20
 8000a2a:	601a      	str	r2, [r3, #0]
}
if (timer_flag2 == 1){
 8000a2c:	4b22      	ldr	r3, [pc, #136]	; (8000ab8 <fsm_automatic_run+0x37c>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	2b01      	cmp	r3, #1
 8000a32:	d137      	bne.n	8000aa4 <fsm_automatic_run+0x368>
timer_flag2 =0;
 8000a34:	4b20      	ldr	r3, [pc, #128]	; (8000ab8 <fsm_automatic_run+0x37c>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	601a      	str	r2, [r3, #0]
display7seg(8);
 8000a3a:	2008      	movs	r0, #8
 8000a3c:	f7ff fcee 	bl	800041c <display7seg>
status = AUTO_7;
 8000a40:	4b1c      	ldr	r3, [pc, #112]	; (8000ab4 <fsm_automatic_run+0x378>)
 8000a42:	2239      	movs	r2, #57	; 0x39
 8000a44:	601a      	str	r2, [r3, #0]
setTimer2(100);
 8000a46:	2064      	movs	r0, #100	; 0x64
 8000a48:	f000 fd2c 	bl	80014a4 <setTimer2>


}
break;
 8000a4c:	e02a      	b.n	8000aa4 <fsm_automatic_run+0x368>

case AUTO_9:
if (button2_flag == 1){
 8000a4e:	4b18      	ldr	r3, [pc, #96]	; (8000ab0 <fsm_automatic_run+0x374>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	d105      	bne.n	8000a62 <fsm_automatic_run+0x326>
button2_flag = 0;
 8000a56:	4b16      	ldr	r3, [pc, #88]	; (8000ab0 <fsm_automatic_run+0x374>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
status = MAN_INC9;
 8000a5c:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <fsm_automatic_run+0x378>)
 8000a5e:	2215      	movs	r2, #21
 8000a60:	601a      	str	r2, [r3, #0]
}
if (timer_flag2 == 1){
 8000a62:	4b15      	ldr	r3, [pc, #84]	; (8000ab8 <fsm_automatic_run+0x37c>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	2b01      	cmp	r3, #1
 8000a68:	d11e      	bne.n	8000aa8 <fsm_automatic_run+0x36c>
timer_flag2 = 0 ;
 8000a6a:	4b13      	ldr	r3, [pc, #76]	; (8000ab8 <fsm_automatic_run+0x37c>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
display7seg(9);
 8000a70:	2009      	movs	r0, #9
 8000a72:	f7ff fcd3 	bl	800041c <display7seg>
status = AUTO_8;
 8000a76:	4b0f      	ldr	r3, [pc, #60]	; (8000ab4 <fsm_automatic_run+0x378>)
 8000a78:	223a      	movs	r2, #58	; 0x3a
 8000a7a:	601a      	str	r2, [r3, #0]
setTimer2(100);
 8000a7c:	2064      	movs	r0, #100	; 0x64
 8000a7e:	f000 fd11 	bl	80014a4 <setTimer2>

}
break;
 8000a82:	e011      	b.n	8000aa8 <fsm_automatic_run+0x36c>
default:
break;
 8000a84:	bf00      	nop
 8000a86:	e010      	b.n	8000aaa <fsm_automatic_run+0x36e>
break;
 8000a88:	bf00      	nop
 8000a8a:	e00e      	b.n	8000aaa <fsm_automatic_run+0x36e>
break;
 8000a8c:	bf00      	nop
 8000a8e:	e00c      	b.n	8000aaa <fsm_automatic_run+0x36e>
break;
 8000a90:	bf00      	nop
 8000a92:	e00a      	b.n	8000aaa <fsm_automatic_run+0x36e>
break;
 8000a94:	bf00      	nop
 8000a96:	e008      	b.n	8000aaa <fsm_automatic_run+0x36e>
break;
 8000a98:	bf00      	nop
 8000a9a:	e006      	b.n	8000aaa <fsm_automatic_run+0x36e>
break;
 8000a9c:	bf00      	nop
 8000a9e:	e004      	b.n	8000aaa <fsm_automatic_run+0x36e>
break;
 8000aa0:	bf00      	nop
 8000aa2:	e002      	b.n	8000aaa <fsm_automatic_run+0x36e>
break;
 8000aa4:	bf00      	nop
 8000aa6:	e000      	b.n	8000aaa <fsm_automatic_run+0x36e>
break;
 8000aa8:	bf00      	nop
}
}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	20000060 	.word	0x20000060
 8000ab4:	20000070 	.word	0x20000070
 8000ab8:	20000088 	.word	0x20000088

08000abc <fsm_longpress_run>:
#include "fsm_automatic.h"
#include "button.h"
#include "display7seg.h"
#include "fsm_longpress.h"

void fsm_longpress_run(){
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
switch (status){
 8000ac0:	4b97      	ldr	r3, [pc, #604]	; (8000d20 <fsm_longpress_run+0x264>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	3b1e      	subs	r3, #30
 8000ac6:	2b09      	cmp	r3, #9
 8000ac8:	f200 8112 	bhi.w	8000cf0 <fsm_longpress_run+0x234>
 8000acc:	a201      	add	r2, pc, #4	; (adr r2, 8000ad4 <fsm_longpress_run+0x18>)
 8000ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ad2:	bf00      	nop
 8000ad4:	08000afd 	.word	0x08000afd
 8000ad8:	08000b31 	.word	0x08000b31
 8000adc:	08000b65 	.word	0x08000b65
 8000ae0:	08000b99 	.word	0x08000b99
 8000ae4:	08000bcd 	.word	0x08000bcd
 8000ae8:	08000c01 	.word	0x08000c01
 8000aec:	08000c31 	.word	0x08000c31
 8000af0:	08000c61 	.word	0x08000c61
 8000af4:	08000c91 	.word	0x08000c91
 8000af8:	08000cc1 	.word	0x08000cc1
case LONG_0 :
if (timer_flag1 ==1 ){
 8000afc:	4b89      	ldr	r3, [pc, #548]	; (8000d24 <fsm_longpress_run+0x268>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	f040 80f7 	bne.w	8000cf4 <fsm_longpress_run+0x238>
timer_flag1 = 0;
 8000b06:	4b87      	ldr	r3, [pc, #540]	; (8000d24 <fsm_longpress_run+0x268>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
if (button2_flag2 == 1){
 8000b0c:	4b86      	ldr	r3, [pc, #536]	; (8000d28 <fsm_longpress_run+0x26c>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	2b01      	cmp	r3, #1
 8000b12:	f040 80ef 	bne.w	8000cf4 <fsm_longpress_run+0x238>
display7seg(0);
 8000b16:	2000      	movs	r0, #0
 8000b18:	f7ff fc80 	bl	800041c <display7seg>
button2_flag2 =0;
 8000b1c:	4b82      	ldr	r3, [pc, #520]	; (8000d28 <fsm_longpress_run+0x26c>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
status = LONG_1;
 8000b22:	4b7f      	ldr	r3, [pc, #508]	; (8000d20 <fsm_longpress_run+0x264>)
 8000b24:	221f      	movs	r2, #31
 8000b26:	601a      	str	r2, [r3, #0]
setTimer1(100);}
 8000b28:	2064      	movs	r0, #100	; 0x64
 8000b2a:	f000 fca7 	bl	800147c <setTimer1>
}

break;
 8000b2e:	e0e1      	b.n	8000cf4 <fsm_longpress_run+0x238>
case LONG_1:
if (timer_flag1 ==1 ){
 8000b30:	4b7c      	ldr	r3, [pc, #496]	; (8000d24 <fsm_longpress_run+0x268>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	f040 80df 	bne.w	8000cf8 <fsm_longpress_run+0x23c>
timer_flag1 = 0;
 8000b3a:	4b7a      	ldr	r3, [pc, #488]	; (8000d24 <fsm_longpress_run+0x268>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]

if (button2_flag2 == 1){
 8000b40:	4b79      	ldr	r3, [pc, #484]	; (8000d28 <fsm_longpress_run+0x26c>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	2b01      	cmp	r3, #1
 8000b46:	f040 80d7 	bne.w	8000cf8 <fsm_longpress_run+0x23c>
display7seg(1);
 8000b4a:	2001      	movs	r0, #1
 8000b4c:	f7ff fc66 	bl	800041c <display7seg>
button2_flag2 =0;
 8000b50:	4b75      	ldr	r3, [pc, #468]	; (8000d28 <fsm_longpress_run+0x26c>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
status = LONG_2;
 8000b56:	4b72      	ldr	r3, [pc, #456]	; (8000d20 <fsm_longpress_run+0x264>)
 8000b58:	2220      	movs	r2, #32
 8000b5a:	601a      	str	r2, [r3, #0]
setTimer1(100);}
 8000b5c:	2064      	movs	r0, #100	; 0x64
 8000b5e:	f000 fc8d 	bl	800147c <setTimer1>
}
break;
 8000b62:	e0c9      	b.n	8000cf8 <fsm_longpress_run+0x23c>
case LONG_2:
if (timer_flag1 ==1 ){
 8000b64:	4b6f      	ldr	r3, [pc, #444]	; (8000d24 <fsm_longpress_run+0x268>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	f040 80c7 	bne.w	8000cfc <fsm_longpress_run+0x240>
timer_flag1 = 0;
 8000b6e:	4b6d      	ldr	r3, [pc, #436]	; (8000d24 <fsm_longpress_run+0x268>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]

if (button2_flag2 == 1){
 8000b74:	4b6c      	ldr	r3, [pc, #432]	; (8000d28 <fsm_longpress_run+0x26c>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	2b01      	cmp	r3, #1
 8000b7a:	f040 80bf 	bne.w	8000cfc <fsm_longpress_run+0x240>
display7seg(2);
 8000b7e:	2002      	movs	r0, #2
 8000b80:	f7ff fc4c 	bl	800041c <display7seg>
button2_flag2 =0;
 8000b84:	4b68      	ldr	r3, [pc, #416]	; (8000d28 <fsm_longpress_run+0x26c>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
status = LONG_3;
 8000b8a:	4b65      	ldr	r3, [pc, #404]	; (8000d20 <fsm_longpress_run+0x264>)
 8000b8c:	2221      	movs	r2, #33	; 0x21
 8000b8e:	601a      	str	r2, [r3, #0]
setTimer1(100);}}
 8000b90:	2064      	movs	r0, #100	; 0x64
 8000b92:	f000 fc73 	bl	800147c <setTimer1>
break;
 8000b96:	e0b1      	b.n	8000cfc <fsm_longpress_run+0x240>
case LONG_3:
if (timer_flag1 ==1 ){
 8000b98:	4b62      	ldr	r3, [pc, #392]	; (8000d24 <fsm_longpress_run+0x268>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	f040 80af 	bne.w	8000d00 <fsm_longpress_run+0x244>
timer_flag1 = 0;
 8000ba2:	4b60      	ldr	r3, [pc, #384]	; (8000d24 <fsm_longpress_run+0x268>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]

if (button2_flag2 == 1){
 8000ba8:	4b5f      	ldr	r3, [pc, #380]	; (8000d28 <fsm_longpress_run+0x26c>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	f040 80a7 	bne.w	8000d00 <fsm_longpress_run+0x244>
display7seg(3);
 8000bb2:	2003      	movs	r0, #3
 8000bb4:	f7ff fc32 	bl	800041c <display7seg>
button2_flag2 =0;
 8000bb8:	4b5b      	ldr	r3, [pc, #364]	; (8000d28 <fsm_longpress_run+0x26c>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
status = LONG_4;
 8000bbe:	4b58      	ldr	r3, [pc, #352]	; (8000d20 <fsm_longpress_run+0x264>)
 8000bc0:	2222      	movs	r2, #34	; 0x22
 8000bc2:	601a      	str	r2, [r3, #0]
setTimer1(100);}}
 8000bc4:	2064      	movs	r0, #100	; 0x64
 8000bc6:	f000 fc59 	bl	800147c <setTimer1>
break;
 8000bca:	e099      	b.n	8000d00 <fsm_longpress_run+0x244>
case LONG_4:
if (timer_flag1 ==1 ){
 8000bcc:	4b55      	ldr	r3, [pc, #340]	; (8000d24 <fsm_longpress_run+0x268>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	2b01      	cmp	r3, #1
 8000bd2:	f040 8097 	bne.w	8000d04 <fsm_longpress_run+0x248>
timer_flag1 = 0;
 8000bd6:	4b53      	ldr	r3, [pc, #332]	; (8000d24 <fsm_longpress_run+0x268>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]

if (button2_flag2 == 1){
 8000bdc:	4b52      	ldr	r3, [pc, #328]	; (8000d28 <fsm_longpress_run+0x26c>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	f040 808f 	bne.w	8000d04 <fsm_longpress_run+0x248>
display7seg(4);
 8000be6:	2004      	movs	r0, #4
 8000be8:	f7ff fc18 	bl	800041c <display7seg>
button2_flag2 =0;
 8000bec:	4b4e      	ldr	r3, [pc, #312]	; (8000d28 <fsm_longpress_run+0x26c>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
status = LONG_5;
 8000bf2:	4b4b      	ldr	r3, [pc, #300]	; (8000d20 <fsm_longpress_run+0x264>)
 8000bf4:	2223      	movs	r2, #35	; 0x23
 8000bf6:	601a      	str	r2, [r3, #0]
setTimer1(100);}}
 8000bf8:	2064      	movs	r0, #100	; 0x64
 8000bfa:	f000 fc3f 	bl	800147c <setTimer1>
break;
 8000bfe:	e081      	b.n	8000d04 <fsm_longpress_run+0x248>
case LONG_5:
if (timer_flag1 ==1 ){
 8000c00:	4b48      	ldr	r3, [pc, #288]	; (8000d24 <fsm_longpress_run+0x268>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	2b01      	cmp	r3, #1
 8000c06:	d17f      	bne.n	8000d08 <fsm_longpress_run+0x24c>
timer_flag1 = 0;
 8000c08:	4b46      	ldr	r3, [pc, #280]	; (8000d24 <fsm_longpress_run+0x268>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]

if (button2_flag2 == 1){
 8000c0e:	4b46      	ldr	r3, [pc, #280]	; (8000d28 <fsm_longpress_run+0x26c>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	2b01      	cmp	r3, #1
 8000c14:	d178      	bne.n	8000d08 <fsm_longpress_run+0x24c>
display7seg(5);
 8000c16:	2005      	movs	r0, #5
 8000c18:	f7ff fc00 	bl	800041c <display7seg>
button2_flag2 =0;
 8000c1c:	4b42      	ldr	r3, [pc, #264]	; (8000d28 <fsm_longpress_run+0x26c>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]
status = LONG_6;
 8000c22:	4b3f      	ldr	r3, [pc, #252]	; (8000d20 <fsm_longpress_run+0x264>)
 8000c24:	2224      	movs	r2, #36	; 0x24
 8000c26:	601a      	str	r2, [r3, #0]
setTimer1(100);}}
 8000c28:	2064      	movs	r0, #100	; 0x64
 8000c2a:	f000 fc27 	bl	800147c <setTimer1>
break;
 8000c2e:	e06b      	b.n	8000d08 <fsm_longpress_run+0x24c>
case LONG_6:
if (timer_flag1 ==1 ){
 8000c30:	4b3c      	ldr	r3, [pc, #240]	; (8000d24 <fsm_longpress_run+0x268>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d169      	bne.n	8000d0c <fsm_longpress_run+0x250>
timer_flag1 = 0;
 8000c38:	4b3a      	ldr	r3, [pc, #232]	; (8000d24 <fsm_longpress_run+0x268>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]

if (button2_flag2 == 1){
 8000c3e:	4b3a      	ldr	r3, [pc, #232]	; (8000d28 <fsm_longpress_run+0x26c>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	2b01      	cmp	r3, #1
 8000c44:	d162      	bne.n	8000d0c <fsm_longpress_run+0x250>
display7seg(6);
 8000c46:	2006      	movs	r0, #6
 8000c48:	f7ff fbe8 	bl	800041c <display7seg>
button2_flag2 =0;
 8000c4c:	4b36      	ldr	r3, [pc, #216]	; (8000d28 <fsm_longpress_run+0x26c>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
status = LONG_7;
 8000c52:	4b33      	ldr	r3, [pc, #204]	; (8000d20 <fsm_longpress_run+0x264>)
 8000c54:	2225      	movs	r2, #37	; 0x25
 8000c56:	601a      	str	r2, [r3, #0]
setTimer1(100);}}
 8000c58:	2064      	movs	r0, #100	; 0x64
 8000c5a:	f000 fc0f 	bl	800147c <setTimer1>
break;
 8000c5e:	e055      	b.n	8000d0c <fsm_longpress_run+0x250>
case LONG_7:
if (timer_flag1 ==1 ){
 8000c60:	4b30      	ldr	r3, [pc, #192]	; (8000d24 <fsm_longpress_run+0x268>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	d153      	bne.n	8000d10 <fsm_longpress_run+0x254>
timer_flag1 = 0;
 8000c68:	4b2e      	ldr	r3, [pc, #184]	; (8000d24 <fsm_longpress_run+0x268>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]

if (button2_flag2 == 1){
 8000c6e:	4b2e      	ldr	r3, [pc, #184]	; (8000d28 <fsm_longpress_run+0x26c>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d14c      	bne.n	8000d10 <fsm_longpress_run+0x254>
display7seg(7);
 8000c76:	2007      	movs	r0, #7
 8000c78:	f7ff fbd0 	bl	800041c <display7seg>
button2_flag2 =0;
 8000c7c:	4b2a      	ldr	r3, [pc, #168]	; (8000d28 <fsm_longpress_run+0x26c>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
status = LONG_8;
 8000c82:	4b27      	ldr	r3, [pc, #156]	; (8000d20 <fsm_longpress_run+0x264>)
 8000c84:	2226      	movs	r2, #38	; 0x26
 8000c86:	601a      	str	r2, [r3, #0]
setTimer1(100);}}
 8000c88:	2064      	movs	r0, #100	; 0x64
 8000c8a:	f000 fbf7 	bl	800147c <setTimer1>
break;
 8000c8e:	e03f      	b.n	8000d10 <fsm_longpress_run+0x254>
case LONG_8:
if (timer_flag1 ==1 ){
 8000c90:	4b24      	ldr	r3, [pc, #144]	; (8000d24 <fsm_longpress_run+0x268>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	d13d      	bne.n	8000d14 <fsm_longpress_run+0x258>
timer_flag1 = 0;
 8000c98:	4b22      	ldr	r3, [pc, #136]	; (8000d24 <fsm_longpress_run+0x268>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]

if (button2_flag2 == 1){
 8000c9e:	4b22      	ldr	r3, [pc, #136]	; (8000d28 <fsm_longpress_run+0x26c>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d136      	bne.n	8000d14 <fsm_longpress_run+0x258>
display7seg(8);
 8000ca6:	2008      	movs	r0, #8
 8000ca8:	f7ff fbb8 	bl	800041c <display7seg>
button2_flag2 =0;
 8000cac:	4b1e      	ldr	r3, [pc, #120]	; (8000d28 <fsm_longpress_run+0x26c>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	601a      	str	r2, [r3, #0]
status = LONG_9;
 8000cb2:	4b1b      	ldr	r3, [pc, #108]	; (8000d20 <fsm_longpress_run+0x264>)
 8000cb4:	2227      	movs	r2, #39	; 0x27
 8000cb6:	601a      	str	r2, [r3, #0]
setTimer1(100);}}
 8000cb8:	2064      	movs	r0, #100	; 0x64
 8000cba:	f000 fbdf 	bl	800147c <setTimer1>
break;
 8000cbe:	e029      	b.n	8000d14 <fsm_longpress_run+0x258>
case LONG_9:
if (timer_flag1 ==1 ){
 8000cc0:	4b18      	ldr	r3, [pc, #96]	; (8000d24 <fsm_longpress_run+0x268>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d127      	bne.n	8000d18 <fsm_longpress_run+0x25c>
timer_flag1 = 0;
 8000cc8:	4b16      	ldr	r3, [pc, #88]	; (8000d24 <fsm_longpress_run+0x268>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]

if (button2_flag2 == 1){
 8000cce:	4b16      	ldr	r3, [pc, #88]	; (8000d28 <fsm_longpress_run+0x26c>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	d120      	bne.n	8000d18 <fsm_longpress_run+0x25c>
display7seg(9);
 8000cd6:	2009      	movs	r0, #9
 8000cd8:	f7ff fba0 	bl	800041c <display7seg>
button2_flag2 =0;
 8000cdc:	4b12      	ldr	r3, [pc, #72]	; (8000d28 <fsm_longpress_run+0x26c>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
status = LONG_0;
 8000ce2:	4b0f      	ldr	r3, [pc, #60]	; (8000d20 <fsm_longpress_run+0x264>)
 8000ce4:	221e      	movs	r2, #30
 8000ce6:	601a      	str	r2, [r3, #0]
setTimer1(100);}}
 8000ce8:	2064      	movs	r0, #100	; 0x64
 8000cea:	f000 fbc7 	bl	800147c <setTimer1>
break;
 8000cee:	e013      	b.n	8000d18 <fsm_longpress_run+0x25c>
default :
break;
 8000cf0:	bf00      	nop
 8000cf2:	e012      	b.n	8000d1a <fsm_longpress_run+0x25e>
break;
 8000cf4:	bf00      	nop
 8000cf6:	e010      	b.n	8000d1a <fsm_longpress_run+0x25e>
break;
 8000cf8:	bf00      	nop
 8000cfa:	e00e      	b.n	8000d1a <fsm_longpress_run+0x25e>
break;
 8000cfc:	bf00      	nop
 8000cfe:	e00c      	b.n	8000d1a <fsm_longpress_run+0x25e>
break;
 8000d00:	bf00      	nop
 8000d02:	e00a      	b.n	8000d1a <fsm_longpress_run+0x25e>
break;
 8000d04:	bf00      	nop
 8000d06:	e008      	b.n	8000d1a <fsm_longpress_run+0x25e>
break;
 8000d08:	bf00      	nop
 8000d0a:	e006      	b.n	8000d1a <fsm_longpress_run+0x25e>
break;
 8000d0c:	bf00      	nop
 8000d0e:	e004      	b.n	8000d1a <fsm_longpress_run+0x25e>
break;
 8000d10:	bf00      	nop
 8000d12:	e002      	b.n	8000d1a <fsm_longpress_run+0x25e>
break;
 8000d14:	bf00      	nop
 8000d16:	e000      	b.n	8000d1a <fsm_longpress_run+0x25e>
break;
 8000d18:	bf00      	nop
}
}
 8000d1a:	bf00      	nop
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	20000070 	.word	0x20000070
 8000d24:	20000084 	.word	0x20000084
 8000d28:	20000068 	.word	0x20000068

08000d2c <fsm_manual_run>:
*      Author: Admin
*/
#include "fsm_automatic.h"
#include "button.h"
#include "display7seg.h"
void fsm_manual_run(){
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
switch (status){
 8000d30:	4b94      	ldr	r3, [pc, #592]	; (8000f84 <fsm_manual_run+0x258>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	3b0c      	subs	r3, #12
 8000d36:	2b09      	cmp	r3, #9
 8000d38:	f200 824e 	bhi.w	80011d8 <fsm_manual_run+0x4ac>
 8000d3c:	a201      	add	r2, pc, #4	; (adr r2, 8000d44 <fsm_manual_run+0x18>)
 8000d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d42:	bf00      	nop
 8000d44:	08000d6d 	.word	0x08000d6d
 8000d48:	08000dcd 	.word	0x08000dcd
 8000d4c:	08000e3b 	.word	0x08000e3b
 8000d50:	08000ea9 	.word	0x08000ea9
 8000d54:	08000f17 	.word	0x08000f17
 8000d58:	08000f9d 	.word	0x08000f9d
 8000d5c:	0800100b 	.word	0x0800100b
 8000d60:	08001079 	.word	0x08001079
 8000d64:	080010e7 	.word	0x080010e7
 8000d68:	08001153 	.word	0x08001153
case MAN_INC0 :
display7seg(0);
 8000d6c:	2000      	movs	r0, #0
 8000d6e:	f7ff fb55 	bl	800041c <display7seg>
if (button2_flag == 1){
 8000d72:	4b85      	ldr	r3, [pc, #532]	; (8000f88 <fsm_manual_run+0x25c>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d105      	bne.n	8000d86 <fsm_manual_run+0x5a>
button2_flag =0;
 8000d7a:	4b83      	ldr	r3, [pc, #524]	; (8000f88 <fsm_manual_run+0x25c>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
status = MAN_INC1;
 8000d80:	4b80      	ldr	r3, [pc, #512]	; (8000f84 <fsm_manual_run+0x258>)
 8000d82:	220d      	movs	r2, #13
 8000d84:	601a      	str	r2, [r3, #0]
}
if (button2_flag2 == 1){
 8000d86:	4b81      	ldr	r3, [pc, #516]	; (8000f8c <fsm_manual_run+0x260>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d108      	bne.n	8000da0 <fsm_manual_run+0x74>
button2_flag2 =0;
 8000d8e:	4b7f      	ldr	r3, [pc, #508]	; (8000f8c <fsm_manual_run+0x260>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
status = LONG_1;
 8000d94:	4b7b      	ldr	r3, [pc, #492]	; (8000f84 <fsm_manual_run+0x258>)
 8000d96:	221f      	movs	r2, #31
 8000d98:	601a      	str	r2, [r3, #0]
setTimer1(100);
 8000d9a:	2064      	movs	r0, #100	; 0x64
 8000d9c:	f000 fb6e 	bl	800147c <setTimer1>
}
if (button3_flag == 1){
 8000da0:	4b7b      	ldr	r3, [pc, #492]	; (8000f90 <fsm_manual_run+0x264>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	d105      	bne.n	8000db4 <fsm_manual_run+0x88>
	button3_flag =0;
 8000da8:	4b79      	ldr	r3, [pc, #484]	; (8000f90 <fsm_manual_run+0x264>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]
	status = MAN_INC9;
 8000dae:	4b75      	ldr	r3, [pc, #468]	; (8000f84 <fsm_manual_run+0x258>)
 8000db0:	2215      	movs	r2, #21
 8000db2:	601a      	str	r2, [r3, #0]
}
if (timer_flag2 == 1){
 8000db4:	4b77      	ldr	r3, [pc, #476]	; (8000f94 <fsm_manual_run+0x268>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	f040 820f 	bne.w	80011dc <fsm_manual_run+0x4b0>
timer_flag2 = 0;
 8000dbe:	4b75      	ldr	r3, [pc, #468]	; (8000f94 <fsm_manual_run+0x268>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
status = AUTO_0;
 8000dc4:	4b6f      	ldr	r3, [pc, #444]	; (8000f84 <fsm_manual_run+0x258>)
 8000dc6:	2232      	movs	r2, #50	; 0x32
 8000dc8:	601a      	str	r2, [r3, #0]
}
break;
 8000dca:	e207      	b.n	80011dc <fsm_manual_run+0x4b0>
case MAN_INC1:
display7seg(1);
 8000dcc:	2001      	movs	r0, #1
 8000dce:	f7ff fb25 	bl	800041c <display7seg>
if (button1_flag ==1 ){
 8000dd2:	4b71      	ldr	r3, [pc, #452]	; (8000f98 <fsm_manual_run+0x26c>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d105      	bne.n	8000de6 <fsm_manual_run+0xba>
button1_flag = 0;
 8000dda:	4b6f      	ldr	r3, [pc, #444]	; (8000f98 <fsm_manual_run+0x26c>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
status = INIT;
 8000de0:	4b68      	ldr	r3, [pc, #416]	; (8000f84 <fsm_manual_run+0x258>)
 8000de2:	2201      	movs	r2, #1
 8000de4:	601a      	str	r2, [r3, #0]
}
if (button2_flag == 1){
 8000de6:	4b68      	ldr	r3, [pc, #416]	; (8000f88 <fsm_manual_run+0x25c>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d105      	bne.n	8000dfa <fsm_manual_run+0xce>
button2_flag =0;
 8000dee:	4b66      	ldr	r3, [pc, #408]	; (8000f88 <fsm_manual_run+0x25c>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
status = MAN_INC2;
 8000df4:	4b63      	ldr	r3, [pc, #396]	; (8000f84 <fsm_manual_run+0x258>)
 8000df6:	220e      	movs	r2, #14
 8000df8:	601a      	str	r2, [r3, #0]
}
if (button2_flag2 == 1){
 8000dfa:	4b64      	ldr	r3, [pc, #400]	; (8000f8c <fsm_manual_run+0x260>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d105      	bne.n	8000e0e <fsm_manual_run+0xe2>
button2_flag2 = 0;
 8000e02:	4b62      	ldr	r3, [pc, #392]	; (8000f8c <fsm_manual_run+0x260>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
status = LONG_2;
 8000e08:	4b5e      	ldr	r3, [pc, #376]	; (8000f84 <fsm_manual_run+0x258>)
 8000e0a:	2220      	movs	r2, #32
 8000e0c:	601a      	str	r2, [r3, #0]
}
if (button3_flag == 1){
 8000e0e:	4b60      	ldr	r3, [pc, #384]	; (8000f90 <fsm_manual_run+0x264>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	d105      	bne.n	8000e22 <fsm_manual_run+0xf6>
	button3_flag =0;
 8000e16:	4b5e      	ldr	r3, [pc, #376]	; (8000f90 <fsm_manual_run+0x264>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
	status = INIT;}
 8000e1c:	4b59      	ldr	r3, [pc, #356]	; (8000f84 <fsm_manual_run+0x258>)
 8000e1e:	2201      	movs	r2, #1
 8000e20:	601a      	str	r2, [r3, #0]
if (timer_flag2 == 1){
 8000e22:	4b5c      	ldr	r3, [pc, #368]	; (8000f94 <fsm_manual_run+0x268>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	f040 81da 	bne.w	80011e0 <fsm_manual_run+0x4b4>
timer_flag2 = 0;
 8000e2c:	4b59      	ldr	r3, [pc, #356]	; (8000f94 <fsm_manual_run+0x268>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]
status = AUTO_1;
 8000e32:	4b54      	ldr	r3, [pc, #336]	; (8000f84 <fsm_manual_run+0x258>)
 8000e34:	2233      	movs	r2, #51	; 0x33
 8000e36:	601a      	str	r2, [r3, #0]
}
break;
 8000e38:	e1d2      	b.n	80011e0 <fsm_manual_run+0x4b4>
case MAN_INC2:
display7seg(2);
 8000e3a:	2002      	movs	r0, #2
 8000e3c:	f7ff faee 	bl	800041c <display7seg>
if (button1_flag ==1 ){
 8000e40:	4b55      	ldr	r3, [pc, #340]	; (8000f98 <fsm_manual_run+0x26c>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d105      	bne.n	8000e54 <fsm_manual_run+0x128>
button1_flag = 0;
 8000e48:	4b53      	ldr	r3, [pc, #332]	; (8000f98 <fsm_manual_run+0x26c>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
status = INIT;
 8000e4e:	4b4d      	ldr	r3, [pc, #308]	; (8000f84 <fsm_manual_run+0x258>)
 8000e50:	2201      	movs	r2, #1
 8000e52:	601a      	str	r2, [r3, #0]
}

if (button2_flag == 1){
 8000e54:	4b4c      	ldr	r3, [pc, #304]	; (8000f88 <fsm_manual_run+0x25c>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d105      	bne.n	8000e68 <fsm_manual_run+0x13c>
button2_flag =0;
 8000e5c:	4b4a      	ldr	r3, [pc, #296]	; (8000f88 <fsm_manual_run+0x25c>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
status = MAN_INC3;
 8000e62:	4b48      	ldr	r3, [pc, #288]	; (8000f84 <fsm_manual_run+0x258>)
 8000e64:	220f      	movs	r2, #15
 8000e66:	601a      	str	r2, [r3, #0]
}
if (button2_flag2 == 1){
 8000e68:	4b48      	ldr	r3, [pc, #288]	; (8000f8c <fsm_manual_run+0x260>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d105      	bne.n	8000e7c <fsm_manual_run+0x150>
button2_flag2 = 0;
 8000e70:	4b46      	ldr	r3, [pc, #280]	; (8000f8c <fsm_manual_run+0x260>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
status = LONG_3;
 8000e76:	4b43      	ldr	r3, [pc, #268]	; (8000f84 <fsm_manual_run+0x258>)
 8000e78:	2221      	movs	r2, #33	; 0x21
 8000e7a:	601a      	str	r2, [r3, #0]
}
if (button3_flag == 1){
 8000e7c:	4b44      	ldr	r3, [pc, #272]	; (8000f90 <fsm_manual_run+0x264>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d105      	bne.n	8000e90 <fsm_manual_run+0x164>
	button3_flag =0;
 8000e84:	4b42      	ldr	r3, [pc, #264]	; (8000f90 <fsm_manual_run+0x264>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
	status = MAN_INC1;}
 8000e8a:	4b3e      	ldr	r3, [pc, #248]	; (8000f84 <fsm_manual_run+0x258>)
 8000e8c:	220d      	movs	r2, #13
 8000e8e:	601a      	str	r2, [r3, #0]
if (timer_flag2 == 1){
 8000e90:	4b40      	ldr	r3, [pc, #256]	; (8000f94 <fsm_manual_run+0x268>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	f040 81a5 	bne.w	80011e4 <fsm_manual_run+0x4b8>
timer_flag2 = 0;
 8000e9a:	4b3e      	ldr	r3, [pc, #248]	; (8000f94 <fsm_manual_run+0x268>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
status = AUTO_2;
 8000ea0:	4b38      	ldr	r3, [pc, #224]	; (8000f84 <fsm_manual_run+0x258>)
 8000ea2:	2234      	movs	r2, #52	; 0x34
 8000ea4:	601a      	str	r2, [r3, #0]
}
break;
 8000ea6:	e19d      	b.n	80011e4 <fsm_manual_run+0x4b8>

case MAN_INC3:
display7seg(3);
 8000ea8:	2003      	movs	r0, #3
 8000eaa:	f7ff fab7 	bl	800041c <display7seg>
if (button1_flag ==1 ){
 8000eae:	4b3a      	ldr	r3, [pc, #232]	; (8000f98 <fsm_manual_run+0x26c>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d105      	bne.n	8000ec2 <fsm_manual_run+0x196>
button1_flag = 0;
 8000eb6:	4b38      	ldr	r3, [pc, #224]	; (8000f98 <fsm_manual_run+0x26c>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
status = INIT;
 8000ebc:	4b31      	ldr	r3, [pc, #196]	; (8000f84 <fsm_manual_run+0x258>)
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	601a      	str	r2, [r3, #0]

}
if (button2_flag == 1){
 8000ec2:	4b31      	ldr	r3, [pc, #196]	; (8000f88 <fsm_manual_run+0x25c>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d105      	bne.n	8000ed6 <fsm_manual_run+0x1aa>
button2_flag =0;
 8000eca:	4b2f      	ldr	r3, [pc, #188]	; (8000f88 <fsm_manual_run+0x25c>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
status = MAN_INC4;
 8000ed0:	4b2c      	ldr	r3, [pc, #176]	; (8000f84 <fsm_manual_run+0x258>)
 8000ed2:	2210      	movs	r2, #16
 8000ed4:	601a      	str	r2, [r3, #0]
}
if (button2_flag2 == 1){
 8000ed6:	4b2d      	ldr	r3, [pc, #180]	; (8000f8c <fsm_manual_run+0x260>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d105      	bne.n	8000eea <fsm_manual_run+0x1be>
button2_flag2 =0;
 8000ede:	4b2b      	ldr	r3, [pc, #172]	; (8000f8c <fsm_manual_run+0x260>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
status = LONG_3;
 8000ee4:	4b27      	ldr	r3, [pc, #156]	; (8000f84 <fsm_manual_run+0x258>)
 8000ee6:	2221      	movs	r2, #33	; 0x21
 8000ee8:	601a      	str	r2, [r3, #0]
}
if (button3_flag == 1){
 8000eea:	4b29      	ldr	r3, [pc, #164]	; (8000f90 <fsm_manual_run+0x264>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d105      	bne.n	8000efe <fsm_manual_run+0x1d2>
	button3_flag =0;
 8000ef2:	4b27      	ldr	r3, [pc, #156]	; (8000f90 <fsm_manual_run+0x264>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
	status = MAN_INC2;}
 8000ef8:	4b22      	ldr	r3, [pc, #136]	; (8000f84 <fsm_manual_run+0x258>)
 8000efa:	220e      	movs	r2, #14
 8000efc:	601a      	str	r2, [r3, #0]
if (timer_flag2 == 1){
 8000efe:	4b25      	ldr	r3, [pc, #148]	; (8000f94 <fsm_manual_run+0x268>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	f040 8170 	bne.w	80011e8 <fsm_manual_run+0x4bc>
timer_flag2 = 0;
 8000f08:	4b22      	ldr	r3, [pc, #136]	; (8000f94 <fsm_manual_run+0x268>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]
status = AUTO_3;
 8000f0e:	4b1d      	ldr	r3, [pc, #116]	; (8000f84 <fsm_manual_run+0x258>)
 8000f10:	2235      	movs	r2, #53	; 0x35
 8000f12:	601a      	str	r2, [r3, #0]
}
break;
 8000f14:	e168      	b.n	80011e8 <fsm_manual_run+0x4bc>
case MAN_INC4:
display7seg(4);
 8000f16:	2004      	movs	r0, #4
 8000f18:	f7ff fa80 	bl	800041c <display7seg>
if (button1_flag ==1 ){
 8000f1c:	4b1e      	ldr	r3, [pc, #120]	; (8000f98 <fsm_manual_run+0x26c>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d105      	bne.n	8000f30 <fsm_manual_run+0x204>
button1_flag = 0;
 8000f24:	4b1c      	ldr	r3, [pc, #112]	; (8000f98 <fsm_manual_run+0x26c>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	601a      	str	r2, [r3, #0]
status = INIT;
 8000f2a:	4b16      	ldr	r3, [pc, #88]	; (8000f84 <fsm_manual_run+0x258>)
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	601a      	str	r2, [r3, #0]

}
if (button2_flag == 1){
 8000f30:	4b15      	ldr	r3, [pc, #84]	; (8000f88 <fsm_manual_run+0x25c>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d105      	bne.n	8000f44 <fsm_manual_run+0x218>
button2_flag =0;
 8000f38:	4b13      	ldr	r3, [pc, #76]	; (8000f88 <fsm_manual_run+0x25c>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
status = MAN_INC5;
 8000f3e:	4b11      	ldr	r3, [pc, #68]	; (8000f84 <fsm_manual_run+0x258>)
 8000f40:	2211      	movs	r2, #17
 8000f42:	601a      	str	r2, [r3, #0]
}
if (button2_flag2 == 1){
 8000f44:	4b11      	ldr	r3, [pc, #68]	; (8000f8c <fsm_manual_run+0x260>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d105      	bne.n	8000f58 <fsm_manual_run+0x22c>
button2_flag2 =0;
 8000f4c:	4b0f      	ldr	r3, [pc, #60]	; (8000f8c <fsm_manual_run+0x260>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
status = LONG_4;
 8000f52:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <fsm_manual_run+0x258>)
 8000f54:	2222      	movs	r2, #34	; 0x22
 8000f56:	601a      	str	r2, [r3, #0]
}
if (button3_flag == 1){
 8000f58:	4b0d      	ldr	r3, [pc, #52]	; (8000f90 <fsm_manual_run+0x264>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d105      	bne.n	8000f6c <fsm_manual_run+0x240>
	button3_flag =0;
 8000f60:	4b0b      	ldr	r3, [pc, #44]	; (8000f90 <fsm_manual_run+0x264>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
	status = MAN_INC3;}
 8000f66:	4b07      	ldr	r3, [pc, #28]	; (8000f84 <fsm_manual_run+0x258>)
 8000f68:	220f      	movs	r2, #15
 8000f6a:	601a      	str	r2, [r3, #0]
if (timer_flag2 == 1){
 8000f6c:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <fsm_manual_run+0x268>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	f040 813b 	bne.w	80011ec <fsm_manual_run+0x4c0>
timer_flag2 = 0;
 8000f76:	4b07      	ldr	r3, [pc, #28]	; (8000f94 <fsm_manual_run+0x268>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
status = AUTO_4;
 8000f7c:	4b01      	ldr	r3, [pc, #4]	; (8000f84 <fsm_manual_run+0x258>)
 8000f7e:	2236      	movs	r2, #54	; 0x36
 8000f80:	601a      	str	r2, [r3, #0]
}
break;
 8000f82:	e133      	b.n	80011ec <fsm_manual_run+0x4c0>
 8000f84:	20000070 	.word	0x20000070
 8000f88:	20000060 	.word	0x20000060
 8000f8c:	20000068 	.word	0x20000068
 8000f90:	20000064 	.word	0x20000064
 8000f94:	20000088 	.word	0x20000088
 8000f98:	2000005c 	.word	0x2000005c
case MAN_INC5:
if (button1_flag ==1 ){
 8000f9c:	4b9a      	ldr	r3, [pc, #616]	; (8001208 <fsm_manual_run+0x4dc>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d105      	bne.n	8000fb0 <fsm_manual_run+0x284>
button1_flag = 0;
 8000fa4:	4b98      	ldr	r3, [pc, #608]	; (8001208 <fsm_manual_run+0x4dc>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
status = INIT;
 8000faa:	4b98      	ldr	r3, [pc, #608]	; (800120c <fsm_manual_run+0x4e0>)
 8000fac:	2201      	movs	r2, #1
 8000fae:	601a      	str	r2, [r3, #0]
}
display7seg(5);
 8000fb0:	2005      	movs	r0, #5
 8000fb2:	f7ff fa33 	bl	800041c <display7seg>
if (button2_flag == 1){
 8000fb6:	4b96      	ldr	r3, [pc, #600]	; (8001210 <fsm_manual_run+0x4e4>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d105      	bne.n	8000fca <fsm_manual_run+0x29e>
button2_flag =0;
 8000fbe:	4b94      	ldr	r3, [pc, #592]	; (8001210 <fsm_manual_run+0x4e4>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
status = MAN_INC6;
 8000fc4:	4b91      	ldr	r3, [pc, #580]	; (800120c <fsm_manual_run+0x4e0>)
 8000fc6:	2212      	movs	r2, #18
 8000fc8:	601a      	str	r2, [r3, #0]
}
if (button2_flag2 == 1){
 8000fca:	4b92      	ldr	r3, [pc, #584]	; (8001214 <fsm_manual_run+0x4e8>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d105      	bne.n	8000fde <fsm_manual_run+0x2b2>
button2_flag2 = 0;
 8000fd2:	4b90      	ldr	r3, [pc, #576]	; (8001214 <fsm_manual_run+0x4e8>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
status = LONG_5;
 8000fd8:	4b8c      	ldr	r3, [pc, #560]	; (800120c <fsm_manual_run+0x4e0>)
 8000fda:	2223      	movs	r2, #35	; 0x23
 8000fdc:	601a      	str	r2, [r3, #0]
}
if (button3_flag == 1){
 8000fde:	4b8e      	ldr	r3, [pc, #568]	; (8001218 <fsm_manual_run+0x4ec>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d105      	bne.n	8000ff2 <fsm_manual_run+0x2c6>
	button3_flag =0;
 8000fe6:	4b8c      	ldr	r3, [pc, #560]	; (8001218 <fsm_manual_run+0x4ec>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
	status = MAN_INC4;}
 8000fec:	4b87      	ldr	r3, [pc, #540]	; (800120c <fsm_manual_run+0x4e0>)
 8000fee:	2210      	movs	r2, #16
 8000ff0:	601a      	str	r2, [r3, #0]
if (timer_flag2 == 1){
 8000ff2:	4b8a      	ldr	r3, [pc, #552]	; (800121c <fsm_manual_run+0x4f0>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	f040 80fa 	bne.w	80011f0 <fsm_manual_run+0x4c4>
timer_flag2 = 0;
 8000ffc:	4b87      	ldr	r3, [pc, #540]	; (800121c <fsm_manual_run+0x4f0>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
status = AUTO_5;
 8001002:	4b82      	ldr	r3, [pc, #520]	; (800120c <fsm_manual_run+0x4e0>)
 8001004:	2237      	movs	r2, #55	; 0x37
 8001006:	601a      	str	r2, [r3, #0]
}
break;
 8001008:	e0f2      	b.n	80011f0 <fsm_manual_run+0x4c4>
case MAN_INC6:
if (button1_flag ==1 ){
 800100a:	4b7f      	ldr	r3, [pc, #508]	; (8001208 <fsm_manual_run+0x4dc>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	2b01      	cmp	r3, #1
 8001010:	d105      	bne.n	800101e <fsm_manual_run+0x2f2>
button1_flag = 0;
 8001012:	4b7d      	ldr	r3, [pc, #500]	; (8001208 <fsm_manual_run+0x4dc>)
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
status = INIT;
 8001018:	4b7c      	ldr	r3, [pc, #496]	; (800120c <fsm_manual_run+0x4e0>)
 800101a:	2201      	movs	r2, #1
 800101c:	601a      	str	r2, [r3, #0]
}
display7seg(6);
 800101e:	2006      	movs	r0, #6
 8001020:	f7ff f9fc 	bl	800041c <display7seg>
if (button2_flag == 1){
 8001024:	4b7a      	ldr	r3, [pc, #488]	; (8001210 <fsm_manual_run+0x4e4>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2b01      	cmp	r3, #1
 800102a:	d105      	bne.n	8001038 <fsm_manual_run+0x30c>
button2_flag =0;
 800102c:	4b78      	ldr	r3, [pc, #480]	; (8001210 <fsm_manual_run+0x4e4>)
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
status = MAN_INC7;
 8001032:	4b76      	ldr	r3, [pc, #472]	; (800120c <fsm_manual_run+0x4e0>)
 8001034:	2213      	movs	r2, #19
 8001036:	601a      	str	r2, [r3, #0]
}
if (button2_flag2 == 1){
 8001038:	4b76      	ldr	r3, [pc, #472]	; (8001214 <fsm_manual_run+0x4e8>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2b01      	cmp	r3, #1
 800103e:	d105      	bne.n	800104c <fsm_manual_run+0x320>
button2_flag2 = 0;
 8001040:	4b74      	ldr	r3, [pc, #464]	; (8001214 <fsm_manual_run+0x4e8>)
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
status = LONG_6;
 8001046:	4b71      	ldr	r3, [pc, #452]	; (800120c <fsm_manual_run+0x4e0>)
 8001048:	2224      	movs	r2, #36	; 0x24
 800104a:	601a      	str	r2, [r3, #0]
}
if (button3_flag == 1){
 800104c:	4b72      	ldr	r3, [pc, #456]	; (8001218 <fsm_manual_run+0x4ec>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2b01      	cmp	r3, #1
 8001052:	d105      	bne.n	8001060 <fsm_manual_run+0x334>
	button3_flag =0;
 8001054:	4b70      	ldr	r3, [pc, #448]	; (8001218 <fsm_manual_run+0x4ec>)
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
	status = MAN_INC5;}
 800105a:	4b6c      	ldr	r3, [pc, #432]	; (800120c <fsm_manual_run+0x4e0>)
 800105c:	2211      	movs	r2, #17
 800105e:	601a      	str	r2, [r3, #0]
if (timer_flag2 == 1){
 8001060:	4b6e      	ldr	r3, [pc, #440]	; (800121c <fsm_manual_run+0x4f0>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2b01      	cmp	r3, #1
 8001066:	f040 80c5 	bne.w	80011f4 <fsm_manual_run+0x4c8>
timer_flag2 = 0;
 800106a:	4b6c      	ldr	r3, [pc, #432]	; (800121c <fsm_manual_run+0x4f0>)
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
status = AUTO_6;
 8001070:	4b66      	ldr	r3, [pc, #408]	; (800120c <fsm_manual_run+0x4e0>)
 8001072:	2238      	movs	r2, #56	; 0x38
 8001074:	601a      	str	r2, [r3, #0]
}
break;
 8001076:	e0bd      	b.n	80011f4 <fsm_manual_run+0x4c8>
case MAN_INC7:
display7seg(7);
 8001078:	2007      	movs	r0, #7
 800107a:	f7ff f9cf 	bl	800041c <display7seg>
if (button1_flag ==1 ){
 800107e:	4b62      	ldr	r3, [pc, #392]	; (8001208 <fsm_manual_run+0x4dc>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	2b01      	cmp	r3, #1
 8001084:	d105      	bne.n	8001092 <fsm_manual_run+0x366>
button1_flag = 0;
 8001086:	4b60      	ldr	r3, [pc, #384]	; (8001208 <fsm_manual_run+0x4dc>)
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
status = INIT;
 800108c:	4b5f      	ldr	r3, [pc, #380]	; (800120c <fsm_manual_run+0x4e0>)
 800108e:	2201      	movs	r2, #1
 8001090:	601a      	str	r2, [r3, #0]
}
if (button2_flag == 1){
 8001092:	4b5f      	ldr	r3, [pc, #380]	; (8001210 <fsm_manual_run+0x4e4>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	2b01      	cmp	r3, #1
 8001098:	d105      	bne.n	80010a6 <fsm_manual_run+0x37a>
button2_flag =0;
 800109a:	4b5d      	ldr	r3, [pc, #372]	; (8001210 <fsm_manual_run+0x4e4>)
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
status = MAN_INC8;
 80010a0:	4b5a      	ldr	r3, [pc, #360]	; (800120c <fsm_manual_run+0x4e0>)
 80010a2:	2214      	movs	r2, #20
 80010a4:	601a      	str	r2, [r3, #0]
}
if (button2_flag2 == 1){
 80010a6:	4b5b      	ldr	r3, [pc, #364]	; (8001214 <fsm_manual_run+0x4e8>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d105      	bne.n	80010ba <fsm_manual_run+0x38e>
button2_flag2 = 0;
 80010ae:	4b59      	ldr	r3, [pc, #356]	; (8001214 <fsm_manual_run+0x4e8>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
status = LONG_7;
 80010b4:	4b55      	ldr	r3, [pc, #340]	; (800120c <fsm_manual_run+0x4e0>)
 80010b6:	2225      	movs	r2, #37	; 0x25
 80010b8:	601a      	str	r2, [r3, #0]
}
if (button3_flag == 1){
 80010ba:	4b57      	ldr	r3, [pc, #348]	; (8001218 <fsm_manual_run+0x4ec>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d105      	bne.n	80010ce <fsm_manual_run+0x3a2>
	button3_flag =0;
 80010c2:	4b55      	ldr	r3, [pc, #340]	; (8001218 <fsm_manual_run+0x4ec>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
	status = MAN_INC6;}
 80010c8:	4b50      	ldr	r3, [pc, #320]	; (800120c <fsm_manual_run+0x4e0>)
 80010ca:	2212      	movs	r2, #18
 80010cc:	601a      	str	r2, [r3, #0]
if (timer_flag2 == 1){
 80010ce:	4b53      	ldr	r3, [pc, #332]	; (800121c <fsm_manual_run+0x4f0>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	f040 8090 	bne.w	80011f8 <fsm_manual_run+0x4cc>
timer_flag2 = 0;
 80010d8:	4b50      	ldr	r3, [pc, #320]	; (800121c <fsm_manual_run+0x4f0>)
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
status = AUTO_7;
 80010de:	4b4b      	ldr	r3, [pc, #300]	; (800120c <fsm_manual_run+0x4e0>)
 80010e0:	2239      	movs	r2, #57	; 0x39
 80010e2:	601a      	str	r2, [r3, #0]
}
break;
 80010e4:	e088      	b.n	80011f8 <fsm_manual_run+0x4cc>
case MAN_INC8:
if (button1_flag ==1 ){
 80010e6:	4b48      	ldr	r3, [pc, #288]	; (8001208 <fsm_manual_run+0x4dc>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d105      	bne.n	80010fa <fsm_manual_run+0x3ce>
button1_flag = 0;
 80010ee:	4b46      	ldr	r3, [pc, #280]	; (8001208 <fsm_manual_run+0x4dc>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
status = INIT;
 80010f4:	4b45      	ldr	r3, [pc, #276]	; (800120c <fsm_manual_run+0x4e0>)
 80010f6:	2201      	movs	r2, #1
 80010f8:	601a      	str	r2, [r3, #0]

}
display7seg(8);
 80010fa:	2008      	movs	r0, #8
 80010fc:	f7ff f98e 	bl	800041c <display7seg>
if (button2_flag == 1){
 8001100:	4b43      	ldr	r3, [pc, #268]	; (8001210 <fsm_manual_run+0x4e4>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2b01      	cmp	r3, #1
 8001106:	d105      	bne.n	8001114 <fsm_manual_run+0x3e8>
button2_flag =0;
 8001108:	4b41      	ldr	r3, [pc, #260]	; (8001210 <fsm_manual_run+0x4e4>)
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
status = MAN_INC9;
 800110e:	4b3f      	ldr	r3, [pc, #252]	; (800120c <fsm_manual_run+0x4e0>)
 8001110:	2215      	movs	r2, #21
 8001112:	601a      	str	r2, [r3, #0]
}
if (button2_flag2 == 1){
 8001114:	4b3f      	ldr	r3, [pc, #252]	; (8001214 <fsm_manual_run+0x4e8>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2b01      	cmp	r3, #1
 800111a:	d105      	bne.n	8001128 <fsm_manual_run+0x3fc>
button2_flag2 =0;
 800111c:	4b3d      	ldr	r3, [pc, #244]	; (8001214 <fsm_manual_run+0x4e8>)
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
status = LONG_8;
 8001122:	4b3a      	ldr	r3, [pc, #232]	; (800120c <fsm_manual_run+0x4e0>)
 8001124:	2226      	movs	r2, #38	; 0x26
 8001126:	601a      	str	r2, [r3, #0]
}
if (button3_flag == 1){
 8001128:	4b3b      	ldr	r3, [pc, #236]	; (8001218 <fsm_manual_run+0x4ec>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2b01      	cmp	r3, #1
 800112e:	d105      	bne.n	800113c <fsm_manual_run+0x410>
	button3_flag =0;
 8001130:	4b39      	ldr	r3, [pc, #228]	; (8001218 <fsm_manual_run+0x4ec>)
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
	status = MAN_INC7;}
 8001136:	4b35      	ldr	r3, [pc, #212]	; (800120c <fsm_manual_run+0x4e0>)
 8001138:	2213      	movs	r2, #19
 800113a:	601a      	str	r2, [r3, #0]
if (timer_flag2 == 1){
 800113c:	4b37      	ldr	r3, [pc, #220]	; (800121c <fsm_manual_run+0x4f0>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2b01      	cmp	r3, #1
 8001142:	d15b      	bne.n	80011fc <fsm_manual_run+0x4d0>
timer_flag2 = 0;
 8001144:	4b35      	ldr	r3, [pc, #212]	; (800121c <fsm_manual_run+0x4f0>)
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
status = AUTO_8;
 800114a:	4b30      	ldr	r3, [pc, #192]	; (800120c <fsm_manual_run+0x4e0>)
 800114c:	223a      	movs	r2, #58	; 0x3a
 800114e:	601a      	str	r2, [r3, #0]
}
break;
 8001150:	e054      	b.n	80011fc <fsm_manual_run+0x4d0>
case MAN_INC9:
	display7seg(9);
 8001152:	2009      	movs	r0, #9
 8001154:	f7ff f962 	bl	800041c <display7seg>
if (button1_flag ==1 ){
 8001158:	4b2b      	ldr	r3, [pc, #172]	; (8001208 <fsm_manual_run+0x4dc>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2b01      	cmp	r3, #1
 800115e:	d105      	bne.n	800116c <fsm_manual_run+0x440>
button1_flag = 0;
 8001160:	4b29      	ldr	r3, [pc, #164]	; (8001208 <fsm_manual_run+0x4dc>)
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
status = INIT;
 8001166:	4b29      	ldr	r3, [pc, #164]	; (800120c <fsm_manual_run+0x4e0>)
 8001168:	2201      	movs	r2, #1
 800116a:	601a      	str	r2, [r3, #0]
}
if (button2_flag == 1){
 800116c:	4b28      	ldr	r3, [pc, #160]	; (8001210 <fsm_manual_run+0x4e4>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2b01      	cmp	r3, #1
 8001172:	d105      	bne.n	8001180 <fsm_manual_run+0x454>
button2_flag = 0;
 8001174:	4b26      	ldr	r3, [pc, #152]	; (8001210 <fsm_manual_run+0x4e4>)
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
status = INIT;
 800117a:	4b24      	ldr	r3, [pc, #144]	; (800120c <fsm_manual_run+0x4e0>)
 800117c:	2201      	movs	r2, #1
 800117e:	601a      	str	r2, [r3, #0]
}
if (button2_flag2 == 1){
 8001180:	4b24      	ldr	r3, [pc, #144]	; (8001214 <fsm_manual_run+0x4e8>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2b01      	cmp	r3, #1
 8001186:	d105      	bne.n	8001194 <fsm_manual_run+0x468>
button2_flag2 = 0;
 8001188:	4b22      	ldr	r3, [pc, #136]	; (8001214 <fsm_manual_run+0x4e8>)
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
status = LONG_9;
 800118e:	4b1f      	ldr	r3, [pc, #124]	; (800120c <fsm_manual_run+0x4e0>)
 8001190:	2227      	movs	r2, #39	; 0x27
 8001192:	601a      	str	r2, [r3, #0]
}
if (timer_flag2 == 1){
 8001194:	4b21      	ldr	r3, [pc, #132]	; (800121c <fsm_manual_run+0x4f0>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2b01      	cmp	r3, #1
 800119a:	d108      	bne.n	80011ae <fsm_manual_run+0x482>
timer_flag2 = 0;
 800119c:	4b1f      	ldr	r3, [pc, #124]	; (800121c <fsm_manual_run+0x4f0>)
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
status = AUTO_9;
 80011a2:	4b1a      	ldr	r3, [pc, #104]	; (800120c <fsm_manual_run+0x4e0>)
 80011a4:	223b      	movs	r2, #59	; 0x3b
 80011a6:	601a      	str	r2, [r3, #0]
setTimer2(100);
 80011a8:	2064      	movs	r0, #100	; 0x64
 80011aa:	f000 f97b 	bl	80014a4 <setTimer2>
}
if (button3_flag == 1){
 80011ae:	4b1a      	ldr	r3, [pc, #104]	; (8001218 <fsm_manual_run+0x4ec>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d105      	bne.n	80011c2 <fsm_manual_run+0x496>
	button3_flag =0;
 80011b6:	4b18      	ldr	r3, [pc, #96]	; (8001218 <fsm_manual_run+0x4ec>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
	status = MAN_INC8;}
 80011bc:	4b13      	ldr	r3, [pc, #76]	; (800120c <fsm_manual_run+0x4e0>)
 80011be:	2214      	movs	r2, #20
 80011c0:	601a      	str	r2, [r3, #0]
if (timer_flag2 == 1){
 80011c2:	4b16      	ldr	r3, [pc, #88]	; (800121c <fsm_manual_run+0x4f0>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d11a      	bne.n	8001200 <fsm_manual_run+0x4d4>
timer_flag2 = 0;
 80011ca:	4b14      	ldr	r3, [pc, #80]	; (800121c <fsm_manual_run+0x4f0>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
status = AUTO_9;
 80011d0:	4b0e      	ldr	r3, [pc, #56]	; (800120c <fsm_manual_run+0x4e0>)
 80011d2:	223b      	movs	r2, #59	; 0x3b
 80011d4:	601a      	str	r2, [r3, #0]
}
break;
 80011d6:	e013      	b.n	8001200 <fsm_manual_run+0x4d4>
default :
break;
 80011d8:	bf00      	nop
 80011da:	e012      	b.n	8001202 <fsm_manual_run+0x4d6>
break;
 80011dc:	bf00      	nop
 80011de:	e010      	b.n	8001202 <fsm_manual_run+0x4d6>
break;
 80011e0:	bf00      	nop
 80011e2:	e00e      	b.n	8001202 <fsm_manual_run+0x4d6>
break;
 80011e4:	bf00      	nop
 80011e6:	e00c      	b.n	8001202 <fsm_manual_run+0x4d6>
break;
 80011e8:	bf00      	nop
 80011ea:	e00a      	b.n	8001202 <fsm_manual_run+0x4d6>
break;
 80011ec:	bf00      	nop
 80011ee:	e008      	b.n	8001202 <fsm_manual_run+0x4d6>
break;
 80011f0:	bf00      	nop
 80011f2:	e006      	b.n	8001202 <fsm_manual_run+0x4d6>
break;
 80011f4:	bf00      	nop
 80011f6:	e004      	b.n	8001202 <fsm_manual_run+0x4d6>
break;
 80011f8:	bf00      	nop
 80011fa:	e002      	b.n	8001202 <fsm_manual_run+0x4d6>
break;
 80011fc:	bf00      	nop
 80011fe:	e000      	b.n	8001202 <fsm_manual_run+0x4d6>
break;
 8001200:	bf00      	nop
}
}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	2000005c 	.word	0x2000005c
 800120c:	20000070 	.word	0x20000070
 8001210:	20000060 	.word	0x20000060
 8001214:	20000068 	.word	0x20000068
 8001218:	20000064 	.word	0x20000064
 800121c:	20000088 	.word	0x20000088

08001220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001224:	f000 fa5c 	bl	80016e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001228:	f000 f81c 	bl	8001264 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800122c:	f000 f8a2 	bl	8001374 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001230:	f000 f854 	bl	80012dc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 );
 8001234:	4808      	ldr	r0, [pc, #32]	; (8001258 <main+0x38>)
 8001236:	f001 f9a5 	bl	8002584 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status = INIT;
 800123a:	4b08      	ldr	r3, [pc, #32]	; (800125c <main+0x3c>)
 800123c:	2201      	movs	r2, #1
 800123e:	601a      	str	r2, [r3, #0]
  ledstatus = LED_INIT;
 8001240:	4b07      	ldr	r3, [pc, #28]	; (8001260 <main+0x40>)
 8001242:	2245      	movs	r2, #69	; 0x45
 8001244:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */
fsm_automatic_run();
 8001246:	f7ff fa79 	bl	800073c <fsm_automatic_run>
fsm_manual_run();
 800124a:	f7ff fd6f 	bl	8000d2c <fsm_manual_run>
fsm_longpress_run();
 800124e:	f7ff fc35 	bl	8000abc <fsm_longpress_run>
fsm_ledBlinky_run();
 8001252:	f7fe ff7b 	bl	800014c <fsm_ledBlinky_run>
fsm_automatic_run();
 8001256:	e7f6      	b.n	8001246 <main+0x26>
 8001258:	20000090 	.word	0x20000090
 800125c:	20000070 	.word	0x20000070
 8001260:	20000074 	.word	0x20000074

08001264 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b090      	sub	sp, #64	; 0x40
 8001268:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800126a:	f107 0318 	add.w	r3, r7, #24
 800126e:	2228      	movs	r2, #40	; 0x28
 8001270:	2100      	movs	r1, #0
 8001272:	4618      	mov	r0, r3
 8001274:	f001 fd3e 	bl	8002cf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001278:	1d3b      	adds	r3, r7, #4
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	605a      	str	r2, [r3, #4]
 8001280:	609a      	str	r2, [r3, #8]
 8001282:	60da      	str	r2, [r3, #12]
 8001284:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001286:	2302      	movs	r3, #2
 8001288:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800128a:	2301      	movs	r3, #1
 800128c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800128e:	2310      	movs	r3, #16
 8001290:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001292:	2300      	movs	r3, #0
 8001294:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001296:	f107 0318 	add.w	r3, r7, #24
 800129a:	4618      	mov	r0, r3
 800129c:	f000 fd3a 	bl	8001d14 <HAL_RCC_OscConfig>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <SystemClock_Config+0x46>
  {
    Error_Handler();
 80012a6:	f000 f8e3 	bl	8001470 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012aa:	230f      	movs	r3, #15
 80012ac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80012ae:	2300      	movs	r3, #0
 80012b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012b2:	2300      	movs	r3, #0
 80012b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012b6:	2300      	movs	r3, #0
 80012b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012ba:	2300      	movs	r3, #0
 80012bc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012be:	1d3b      	adds	r3, r7, #4
 80012c0:	2100      	movs	r1, #0
 80012c2:	4618      	mov	r0, r3
 80012c4:	f000 ffa6 	bl	8002214 <HAL_RCC_ClockConfig>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80012ce:	f000 f8cf 	bl	8001470 <Error_Handler>
  }
}
 80012d2:	bf00      	nop
 80012d4:	3740      	adds	r7, #64	; 0x40
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
	...

080012dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b086      	sub	sp, #24
 80012e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012e2:	f107 0308 	add.w	r3, r7, #8
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	605a      	str	r2, [r3, #4]
 80012ec:	609a      	str	r2, [r3, #8]
 80012ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012f0:	463b      	mov	r3, r7
 80012f2:	2200      	movs	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012f8:	4b1d      	ldr	r3, [pc, #116]	; (8001370 <MX_TIM2_Init+0x94>)
 80012fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001300:	4b1b      	ldr	r3, [pc, #108]	; (8001370 <MX_TIM2_Init+0x94>)
 8001302:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001306:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001308:	4b19      	ldr	r3, [pc, #100]	; (8001370 <MX_TIM2_Init+0x94>)
 800130a:	2200      	movs	r2, #0
 800130c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800130e:	4b18      	ldr	r3, [pc, #96]	; (8001370 <MX_TIM2_Init+0x94>)
 8001310:	2209      	movs	r2, #9
 8001312:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001314:	4b16      	ldr	r3, [pc, #88]	; (8001370 <MX_TIM2_Init+0x94>)
 8001316:	2200      	movs	r2, #0
 8001318:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800131a:	4b15      	ldr	r3, [pc, #84]	; (8001370 <MX_TIM2_Init+0x94>)
 800131c:	2200      	movs	r2, #0
 800131e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001320:	4813      	ldr	r0, [pc, #76]	; (8001370 <MX_TIM2_Init+0x94>)
 8001322:	f001 f8df 	bl	80024e4 <HAL_TIM_Base_Init>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800132c:	f000 f8a0 	bl	8001470 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001330:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001334:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001336:	f107 0308 	add.w	r3, r7, #8
 800133a:	4619      	mov	r1, r3
 800133c:	480c      	ldr	r0, [pc, #48]	; (8001370 <MX_TIM2_Init+0x94>)
 800133e:	f001 fa75 	bl	800282c <HAL_TIM_ConfigClockSource>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001348:	f000 f892 	bl	8001470 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800134c:	2300      	movs	r3, #0
 800134e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001350:	2300      	movs	r3, #0
 8001352:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001354:	463b      	mov	r3, r7
 8001356:	4619      	mov	r1, r3
 8001358:	4805      	ldr	r0, [pc, #20]	; (8001370 <MX_TIM2_Init+0x94>)
 800135a:	f001 fc3d 	bl	8002bd8 <HAL_TIMEx_MasterConfigSynchronization>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001364:	f000 f884 	bl	8001470 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001368:	bf00      	nop
 800136a:	3718      	adds	r7, #24
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	20000090 	.word	0x20000090

08001374 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b088      	sub	sp, #32
 8001378:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800137a:	f107 0310 	add.w	r3, r7, #16
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	605a      	str	r2, [r3, #4]
 8001384:	609a      	str	r2, [r3, #8]
 8001386:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001388:	4b2d      	ldr	r3, [pc, #180]	; (8001440 <MX_GPIO_Init+0xcc>)
 800138a:	699b      	ldr	r3, [r3, #24]
 800138c:	4a2c      	ldr	r2, [pc, #176]	; (8001440 <MX_GPIO_Init+0xcc>)
 800138e:	f043 0310 	orr.w	r3, r3, #16
 8001392:	6193      	str	r3, [r2, #24]
 8001394:	4b2a      	ldr	r3, [pc, #168]	; (8001440 <MX_GPIO_Init+0xcc>)
 8001396:	699b      	ldr	r3, [r3, #24]
 8001398:	f003 0310 	and.w	r3, r3, #16
 800139c:	60fb      	str	r3, [r7, #12]
 800139e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a0:	4b27      	ldr	r3, [pc, #156]	; (8001440 <MX_GPIO_Init+0xcc>)
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	4a26      	ldr	r2, [pc, #152]	; (8001440 <MX_GPIO_Init+0xcc>)
 80013a6:	f043 0304 	orr.w	r3, r3, #4
 80013aa:	6193      	str	r3, [r2, #24]
 80013ac:	4b24      	ldr	r3, [pc, #144]	; (8001440 <MX_GPIO_Init+0xcc>)
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	f003 0304 	and.w	r3, r3, #4
 80013b4:	60bb      	str	r3, [r7, #8]
 80013b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b8:	4b21      	ldr	r3, [pc, #132]	; (8001440 <MX_GPIO_Init+0xcc>)
 80013ba:	699b      	ldr	r3, [r3, #24]
 80013bc:	4a20      	ldr	r2, [pc, #128]	; (8001440 <MX_GPIO_Init+0xcc>)
 80013be:	f043 0308 	orr.w	r3, r3, #8
 80013c2:	6193      	str	r3, [r2, #24]
 80013c4:	4b1e      	ldr	r3, [pc, #120]	; (8001440 <MX_GPIO_Init+0xcc>)
 80013c6:	699b      	ldr	r3, [r3, #24]
 80013c8:	f003 0308 	and.w	r3, r3, #8
 80013cc:	607b      	str	r3, [r7, #4]
 80013ce:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 80013d0:	2200      	movs	r2, #0
 80013d2:	2170      	movs	r1, #112	; 0x70
 80013d4:	481b      	ldr	r0, [pc, #108]	; (8001444 <MX_GPIO_Init+0xd0>)
 80013d6:	f000 fc84 	bl	8001ce2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80013da:	2200      	movs	r2, #0
 80013dc:	21fe      	movs	r1, #254	; 0xfe
 80013de:	481a      	ldr	r0, [pc, #104]	; (8001448 <MX_GPIO_Init+0xd4>)
 80013e0:	f000 fc7f 	bl	8001ce2 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80013e4:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80013e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ea:	2300      	movs	r3, #0
 80013ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013ee:	2301      	movs	r3, #1
 80013f0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013f2:	f107 0310 	add.w	r3, r7, #16
 80013f6:	4619      	mov	r1, r3
 80013f8:	4814      	ldr	r0, [pc, #80]	; (800144c <MX_GPIO_Init+0xd8>)
 80013fa:	f000 fae1 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80013fe:	2370      	movs	r3, #112	; 0x70
 8001400:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001402:	2301      	movs	r3, #1
 8001404:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140a:	2302      	movs	r3, #2
 800140c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140e:	f107 0310 	add.w	r3, r7, #16
 8001412:	4619      	mov	r1, r3
 8001414:	480b      	ldr	r0, [pc, #44]	; (8001444 <MX_GPIO_Init+0xd0>)
 8001416:	f000 fad3 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB3 PB4
                           PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 800141a:	23fe      	movs	r3, #254	; 0xfe
 800141c:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141e:	2301      	movs	r3, #1
 8001420:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001422:	2300      	movs	r3, #0
 8001424:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001426:	2302      	movs	r3, #2
 8001428:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800142a:	f107 0310 	add.w	r3, r7, #16
 800142e:	4619      	mov	r1, r3
 8001430:	4805      	ldr	r0, [pc, #20]	; (8001448 <MX_GPIO_Init+0xd4>)
 8001432:	f000 fac5 	bl	80019c0 <HAL_GPIO_Init>

}
 8001436:	bf00      	nop
 8001438:	3720      	adds	r7, #32
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40021000 	.word	0x40021000
 8001444:	40010800 	.word	0x40010800
 8001448:	40010c00 	.word	0x40010c00
 800144c:	40011000 	.word	0x40011000

08001450 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef* htim ){
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
	timerRun();
 8001458:	f000 f84c 	bl	80014f4 <timerRun>
	getKeyInput();
 800145c:	f7fe fee0 	bl	8000220 <getKeyInput>
	getKeyInput2();
 8001460:	f7fe ff2c 	bl	80002bc <getKeyInput2>
	getKeyInput3();
 8001464:	f7fe ff82 	bl	800036c <getKeyInput3>
}
 8001468:	bf00      	nop
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}

08001470 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001474:	b672      	cpsid	i
}
 8001476:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001478:	e7fe      	b.n	8001478 <Error_Handler+0x8>
	...

0800147c <setTimer1>:
int timer_counter2 = 0;
int timer_counter3 = 0;
int timer_flag1 = 0;
int timer_flag2 = 0;
int timer_flag3 = 0;
void setTimer1(int duration){
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
	timer_counter1 = duration;
 8001484:	4a05      	ldr	r2, [pc, #20]	; (800149c <setTimer1+0x20>)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6013      	str	r3, [r2, #0]
	timer_flag1 = 0;
 800148a:	4b05      	ldr	r3, [pc, #20]	; (80014a0 <setTimer1+0x24>)
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
	}
 8001490:	bf00      	nop
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	bc80      	pop	{r7}
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	20000078 	.word	0x20000078
 80014a0:	20000084 	.word	0x20000084

080014a4 <setTimer2>:
void setTimer2(int duration){
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
	timer_counter2 = duration;
 80014ac:	4a05      	ldr	r2, [pc, #20]	; (80014c4 <setTimer2+0x20>)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6013      	str	r3, [r2, #0]
	timer_flag2 = 0;
 80014b2:	4b05      	ldr	r3, [pc, #20]	; (80014c8 <setTimer2+0x24>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
	}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	bc80      	pop	{r7}
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	2000007c 	.word	0x2000007c
 80014c8:	20000088 	.word	0x20000088

080014cc <setTimer3>:
void setTimer3(int duration){
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
	timer_counter3 = duration;
 80014d4:	4a05      	ldr	r2, [pc, #20]	; (80014ec <setTimer3+0x20>)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6013      	str	r3, [r2, #0]
	timer_flag3 = 0;
 80014da:	4b05      	ldr	r3, [pc, #20]	; (80014f0 <setTimer3+0x24>)
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
	}
 80014e0:	bf00      	nop
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bc80      	pop	{r7}
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	20000080 	.word	0x20000080
 80014f0:	2000008c 	.word	0x2000008c

080014f4 <timerRun>:
void timerRun(){
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
	if(timer_counter1){
 80014f8:	4b19      	ldr	r3, [pc, #100]	; (8001560 <timerRun+0x6c>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d004      	beq.n	800150a <timerRun+0x16>
		timer_counter1--;
 8001500:	4b17      	ldr	r3, [pc, #92]	; (8001560 <timerRun+0x6c>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	3b01      	subs	r3, #1
 8001506:	4a16      	ldr	r2, [pc, #88]	; (8001560 <timerRun+0x6c>)
 8001508:	6013      	str	r3, [r2, #0]
	}
	if(timer_counter1 <= 0 ){
 800150a:	4b15      	ldr	r3, [pc, #84]	; (8001560 <timerRun+0x6c>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	2b00      	cmp	r3, #0
 8001510:	dc02      	bgt.n	8001518 <timerRun+0x24>
		timer_flag1 = 1;
 8001512:	4b14      	ldr	r3, [pc, #80]	; (8001564 <timerRun+0x70>)
 8001514:	2201      	movs	r2, #1
 8001516:	601a      	str	r2, [r3, #0]
	}
	if(timer_counter2){
 8001518:	4b13      	ldr	r3, [pc, #76]	; (8001568 <timerRun+0x74>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d004      	beq.n	800152a <timerRun+0x36>
		timer_counter2--;
 8001520:	4b11      	ldr	r3, [pc, #68]	; (8001568 <timerRun+0x74>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	3b01      	subs	r3, #1
 8001526:	4a10      	ldr	r2, [pc, #64]	; (8001568 <timerRun+0x74>)
 8001528:	6013      	str	r3, [r2, #0]
		}
	if(timer_counter2 <= 0 ){
 800152a:	4b0f      	ldr	r3, [pc, #60]	; (8001568 <timerRun+0x74>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2b00      	cmp	r3, #0
 8001530:	dc02      	bgt.n	8001538 <timerRun+0x44>
		timer_flag2 = 1;
 8001532:	4b0e      	ldr	r3, [pc, #56]	; (800156c <timerRun+0x78>)
 8001534:	2201      	movs	r2, #1
 8001536:	601a      	str	r2, [r3, #0]
		}
	if(timer_counter3){
 8001538:	4b0d      	ldr	r3, [pc, #52]	; (8001570 <timerRun+0x7c>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d004      	beq.n	800154a <timerRun+0x56>
			timer_counter3--;
 8001540:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <timerRun+0x7c>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	3b01      	subs	r3, #1
 8001546:	4a0a      	ldr	r2, [pc, #40]	; (8001570 <timerRun+0x7c>)
 8001548:	6013      	str	r3, [r2, #0]
			}
		if(timer_counter3 <= 0 ){
 800154a:	4b09      	ldr	r3, [pc, #36]	; (8001570 <timerRun+0x7c>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2b00      	cmp	r3, #0
 8001550:	dc02      	bgt.n	8001558 <timerRun+0x64>
			timer_flag3 = 1;
 8001552:	4b08      	ldr	r3, [pc, #32]	; (8001574 <timerRun+0x80>)
 8001554:	2201      	movs	r2, #1
 8001556:	601a      	str	r2, [r3, #0]
			}

}
 8001558:	bf00      	nop
 800155a:	46bd      	mov	sp, r7
 800155c:	bc80      	pop	{r7}
 800155e:	4770      	bx	lr
 8001560:	20000078 	.word	0x20000078
 8001564:	20000084 	.word	0x20000084
 8001568:	2000007c 	.word	0x2000007c
 800156c:	20000088 	.word	0x20000088
 8001570:	20000080 	.word	0x20000080
 8001574:	2000008c 	.word	0x2000008c

08001578 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001578:	b480      	push	{r7}
 800157a:	b085      	sub	sp, #20
 800157c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800157e:	4b15      	ldr	r3, [pc, #84]	; (80015d4 <HAL_MspInit+0x5c>)
 8001580:	699b      	ldr	r3, [r3, #24]
 8001582:	4a14      	ldr	r2, [pc, #80]	; (80015d4 <HAL_MspInit+0x5c>)
 8001584:	f043 0301 	orr.w	r3, r3, #1
 8001588:	6193      	str	r3, [r2, #24]
 800158a:	4b12      	ldr	r3, [pc, #72]	; (80015d4 <HAL_MspInit+0x5c>)
 800158c:	699b      	ldr	r3, [r3, #24]
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	60bb      	str	r3, [r7, #8]
 8001594:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001596:	4b0f      	ldr	r3, [pc, #60]	; (80015d4 <HAL_MspInit+0x5c>)
 8001598:	69db      	ldr	r3, [r3, #28]
 800159a:	4a0e      	ldr	r2, [pc, #56]	; (80015d4 <HAL_MspInit+0x5c>)
 800159c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015a0:	61d3      	str	r3, [r2, #28]
 80015a2:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <HAL_MspInit+0x5c>)
 80015a4:	69db      	ldr	r3, [r3, #28]
 80015a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015aa:	607b      	str	r3, [r7, #4]
 80015ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80015ae:	4b0a      	ldr	r3, [pc, #40]	; (80015d8 <HAL_MspInit+0x60>)
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	4a04      	ldr	r2, [pc, #16]	; (80015d8 <HAL_MspInit+0x60>)
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ca:	bf00      	nop
 80015cc:	3714      	adds	r7, #20
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bc80      	pop	{r7}
 80015d2:	4770      	bx	lr
 80015d4:	40021000 	.word	0x40021000
 80015d8:	40010000 	.word	0x40010000

080015dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015ec:	d113      	bne.n	8001616 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015ee:	4b0c      	ldr	r3, [pc, #48]	; (8001620 <HAL_TIM_Base_MspInit+0x44>)
 80015f0:	69db      	ldr	r3, [r3, #28]
 80015f2:	4a0b      	ldr	r2, [pc, #44]	; (8001620 <HAL_TIM_Base_MspInit+0x44>)
 80015f4:	f043 0301 	orr.w	r3, r3, #1
 80015f8:	61d3      	str	r3, [r2, #28]
 80015fa:	4b09      	ldr	r3, [pc, #36]	; (8001620 <HAL_TIM_Base_MspInit+0x44>)
 80015fc:	69db      	ldr	r3, [r3, #28]
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001606:	2200      	movs	r2, #0
 8001608:	2100      	movs	r1, #0
 800160a:	201c      	movs	r0, #28
 800160c:	f000 f9a1 	bl	8001952 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001610:	201c      	movs	r0, #28
 8001612:	f000 f9ba 	bl	800198a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001616:	bf00      	nop
 8001618:	3710      	adds	r7, #16
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40021000 	.word	0x40021000

08001624 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001628:	e7fe      	b.n	8001628 <NMI_Handler+0x4>

0800162a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800162a:	b480      	push	{r7}
 800162c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800162e:	e7fe      	b.n	800162e <HardFault_Handler+0x4>

08001630 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001634:	e7fe      	b.n	8001634 <MemManage_Handler+0x4>

08001636 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001636:	b480      	push	{r7}
 8001638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800163a:	e7fe      	b.n	800163a <BusFault_Handler+0x4>

0800163c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001640:	e7fe      	b.n	8001640 <UsageFault_Handler+0x4>

08001642 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001642:	b480      	push	{r7}
 8001644:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001646:	bf00      	nop
 8001648:	46bd      	mov	sp, r7
 800164a:	bc80      	pop	{r7}
 800164c:	4770      	bx	lr

0800164e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800164e:	b480      	push	{r7}
 8001650:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	46bd      	mov	sp, r7
 8001656:	bc80      	pop	{r7}
 8001658:	4770      	bx	lr

0800165a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800165a:	b480      	push	{r7}
 800165c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800165e:	bf00      	nop
 8001660:	46bd      	mov	sp, r7
 8001662:	bc80      	pop	{r7}
 8001664:	4770      	bx	lr

08001666 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001666:	b580      	push	{r7, lr}
 8001668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800166a:	f000 f87f 	bl	800176c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800166e:	bf00      	nop
 8001670:	bd80      	pop	{r7, pc}
	...

08001674 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001678:	4802      	ldr	r0, [pc, #8]	; (8001684 <TIM2_IRQHandler+0x10>)
 800167a:	f000 ffcf 	bl	800261c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	20000090 	.word	0x20000090

08001688 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800168c:	bf00      	nop
 800168e:	46bd      	mov	sp, r7
 8001690:	bc80      	pop	{r7}
 8001692:	4770      	bx	lr

08001694 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001694:	480c      	ldr	r0, [pc, #48]	; (80016c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001696:	490d      	ldr	r1, [pc, #52]	; (80016cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001698:	4a0d      	ldr	r2, [pc, #52]	; (80016d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800169a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800169c:	e002      	b.n	80016a4 <LoopCopyDataInit>

0800169e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800169e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016a2:	3304      	adds	r3, #4

080016a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016a8:	d3f9      	bcc.n	800169e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016aa:	4a0a      	ldr	r2, [pc, #40]	; (80016d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016ac:	4c0a      	ldr	r4, [pc, #40]	; (80016d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80016ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016b0:	e001      	b.n	80016b6 <LoopFillZerobss>

080016b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016b4:	3204      	adds	r2, #4

080016b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016b8:	d3fb      	bcc.n	80016b2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80016ba:	f7ff ffe5 	bl	8001688 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016be:	f001 faf5 	bl	8002cac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016c2:	f7ff fdad 	bl	8001220 <main>
  bx lr
 80016c6:	4770      	bx	lr
  ldr r0, =_sdata
 80016c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016cc:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 80016d0:	08002d44 	.word	0x08002d44
  ldr r2, =_sbss
 80016d4:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 80016d8:	200000dc 	.word	0x200000dc

080016dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016dc:	e7fe      	b.n	80016dc <ADC1_2_IRQHandler>
	...

080016e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016e4:	4b08      	ldr	r3, [pc, #32]	; (8001708 <HAL_Init+0x28>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a07      	ldr	r2, [pc, #28]	; (8001708 <HAL_Init+0x28>)
 80016ea:	f043 0310 	orr.w	r3, r3, #16
 80016ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016f0:	2003      	movs	r0, #3
 80016f2:	f000 f923 	bl	800193c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016f6:	200f      	movs	r0, #15
 80016f8:	f000 f808 	bl	800170c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016fc:	f7ff ff3c 	bl	8001578 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001700:	2300      	movs	r3, #0
}
 8001702:	4618      	mov	r0, r3
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40022000 	.word	0x40022000

0800170c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001714:	4b12      	ldr	r3, [pc, #72]	; (8001760 <HAL_InitTick+0x54>)
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	4b12      	ldr	r3, [pc, #72]	; (8001764 <HAL_InitTick+0x58>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	4619      	mov	r1, r3
 800171e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001722:	fbb3 f3f1 	udiv	r3, r3, r1
 8001726:	fbb2 f3f3 	udiv	r3, r2, r3
 800172a:	4618      	mov	r0, r3
 800172c:	f000 f93b 	bl	80019a6 <HAL_SYSTICK_Config>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e00e      	b.n	8001758 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2b0f      	cmp	r3, #15
 800173e:	d80a      	bhi.n	8001756 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001740:	2200      	movs	r2, #0
 8001742:	6879      	ldr	r1, [r7, #4]
 8001744:	f04f 30ff 	mov.w	r0, #4294967295
 8001748:	f000 f903 	bl	8001952 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800174c:	4a06      	ldr	r2, [pc, #24]	; (8001768 <HAL_InitTick+0x5c>)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001752:	2300      	movs	r3, #0
 8001754:	e000      	b.n	8001758 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
}
 8001758:	4618      	mov	r0, r3
 800175a:	3708      	adds	r7, #8
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	20000034 	.word	0x20000034
 8001764:	2000003c 	.word	0x2000003c
 8001768:	20000038 	.word	0x20000038

0800176c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001770:	4b05      	ldr	r3, [pc, #20]	; (8001788 <HAL_IncTick+0x1c>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	461a      	mov	r2, r3
 8001776:	4b05      	ldr	r3, [pc, #20]	; (800178c <HAL_IncTick+0x20>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4413      	add	r3, r2
 800177c:	4a03      	ldr	r2, [pc, #12]	; (800178c <HAL_IncTick+0x20>)
 800177e:	6013      	str	r3, [r2, #0]
}
 8001780:	bf00      	nop
 8001782:	46bd      	mov	sp, r7
 8001784:	bc80      	pop	{r7}
 8001786:	4770      	bx	lr
 8001788:	2000003c 	.word	0x2000003c
 800178c:	200000d8 	.word	0x200000d8

08001790 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  return uwTick;
 8001794:	4b02      	ldr	r3, [pc, #8]	; (80017a0 <HAL_GetTick+0x10>)
 8001796:	681b      	ldr	r3, [r3, #0]
}
 8001798:	4618      	mov	r0, r3
 800179a:	46bd      	mov	sp, r7
 800179c:	bc80      	pop	{r7}
 800179e:	4770      	bx	lr
 80017a0:	200000d8 	.word	0x200000d8

080017a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b085      	sub	sp, #20
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f003 0307 	and.w	r3, r3, #7
 80017b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017b4:	4b0c      	ldr	r3, [pc, #48]	; (80017e8 <__NVIC_SetPriorityGrouping+0x44>)
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ba:	68ba      	ldr	r2, [r7, #8]
 80017bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017c0:	4013      	ands	r3, r2
 80017c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017d6:	4a04      	ldr	r2, [pc, #16]	; (80017e8 <__NVIC_SetPriorityGrouping+0x44>)
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	60d3      	str	r3, [r2, #12]
}
 80017dc:	bf00      	nop
 80017de:	3714      	adds	r7, #20
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bc80      	pop	{r7}
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	e000ed00 	.word	0xe000ed00

080017ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017f0:	4b04      	ldr	r3, [pc, #16]	; (8001804 <__NVIC_GetPriorityGrouping+0x18>)
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	0a1b      	lsrs	r3, r3, #8
 80017f6:	f003 0307 	and.w	r3, r3, #7
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bc80      	pop	{r7}
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	e000ed00 	.word	0xe000ed00

08001808 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001816:	2b00      	cmp	r3, #0
 8001818:	db0b      	blt.n	8001832 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800181a:	79fb      	ldrb	r3, [r7, #7]
 800181c:	f003 021f 	and.w	r2, r3, #31
 8001820:	4906      	ldr	r1, [pc, #24]	; (800183c <__NVIC_EnableIRQ+0x34>)
 8001822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001826:	095b      	lsrs	r3, r3, #5
 8001828:	2001      	movs	r0, #1
 800182a:	fa00 f202 	lsl.w	r2, r0, r2
 800182e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001832:	bf00      	nop
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	bc80      	pop	{r7}
 800183a:	4770      	bx	lr
 800183c:	e000e100 	.word	0xe000e100

08001840 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	6039      	str	r1, [r7, #0]
 800184a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800184c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001850:	2b00      	cmp	r3, #0
 8001852:	db0a      	blt.n	800186a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	b2da      	uxtb	r2, r3
 8001858:	490c      	ldr	r1, [pc, #48]	; (800188c <__NVIC_SetPriority+0x4c>)
 800185a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185e:	0112      	lsls	r2, r2, #4
 8001860:	b2d2      	uxtb	r2, r2
 8001862:	440b      	add	r3, r1
 8001864:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001868:	e00a      	b.n	8001880 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	b2da      	uxtb	r2, r3
 800186e:	4908      	ldr	r1, [pc, #32]	; (8001890 <__NVIC_SetPriority+0x50>)
 8001870:	79fb      	ldrb	r3, [r7, #7]
 8001872:	f003 030f 	and.w	r3, r3, #15
 8001876:	3b04      	subs	r3, #4
 8001878:	0112      	lsls	r2, r2, #4
 800187a:	b2d2      	uxtb	r2, r2
 800187c:	440b      	add	r3, r1
 800187e:	761a      	strb	r2, [r3, #24]
}
 8001880:	bf00      	nop
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	bc80      	pop	{r7}
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	e000e100 	.word	0xe000e100
 8001890:	e000ed00 	.word	0xe000ed00

08001894 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001894:	b480      	push	{r7}
 8001896:	b089      	sub	sp, #36	; 0x24
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f003 0307 	and.w	r3, r3, #7
 80018a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	f1c3 0307 	rsb	r3, r3, #7
 80018ae:	2b04      	cmp	r3, #4
 80018b0:	bf28      	it	cs
 80018b2:	2304      	movcs	r3, #4
 80018b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	3304      	adds	r3, #4
 80018ba:	2b06      	cmp	r3, #6
 80018bc:	d902      	bls.n	80018c4 <NVIC_EncodePriority+0x30>
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	3b03      	subs	r3, #3
 80018c2:	e000      	b.n	80018c6 <NVIC_EncodePriority+0x32>
 80018c4:	2300      	movs	r3, #0
 80018c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c8:	f04f 32ff 	mov.w	r2, #4294967295
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	43da      	mvns	r2, r3
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	401a      	ands	r2, r3
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018dc:	f04f 31ff 	mov.w	r1, #4294967295
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	fa01 f303 	lsl.w	r3, r1, r3
 80018e6:	43d9      	mvns	r1, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ec:	4313      	orrs	r3, r2
         );
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3724      	adds	r7, #36	; 0x24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bc80      	pop	{r7}
 80018f6:	4770      	bx	lr

080018f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	3b01      	subs	r3, #1
 8001904:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001908:	d301      	bcc.n	800190e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800190a:	2301      	movs	r3, #1
 800190c:	e00f      	b.n	800192e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800190e:	4a0a      	ldr	r2, [pc, #40]	; (8001938 <SysTick_Config+0x40>)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	3b01      	subs	r3, #1
 8001914:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001916:	210f      	movs	r1, #15
 8001918:	f04f 30ff 	mov.w	r0, #4294967295
 800191c:	f7ff ff90 	bl	8001840 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001920:	4b05      	ldr	r3, [pc, #20]	; (8001938 <SysTick_Config+0x40>)
 8001922:	2200      	movs	r2, #0
 8001924:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001926:	4b04      	ldr	r3, [pc, #16]	; (8001938 <SysTick_Config+0x40>)
 8001928:	2207      	movs	r2, #7
 800192a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	e000e010 	.word	0xe000e010

0800193c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f7ff ff2d 	bl	80017a4 <__NVIC_SetPriorityGrouping>
}
 800194a:	bf00      	nop
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001952:	b580      	push	{r7, lr}
 8001954:	b086      	sub	sp, #24
 8001956:	af00      	add	r7, sp, #0
 8001958:	4603      	mov	r3, r0
 800195a:	60b9      	str	r1, [r7, #8]
 800195c:	607a      	str	r2, [r7, #4]
 800195e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001960:	2300      	movs	r3, #0
 8001962:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001964:	f7ff ff42 	bl	80017ec <__NVIC_GetPriorityGrouping>
 8001968:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	68b9      	ldr	r1, [r7, #8]
 800196e:	6978      	ldr	r0, [r7, #20]
 8001970:	f7ff ff90 	bl	8001894 <NVIC_EncodePriority>
 8001974:	4602      	mov	r2, r0
 8001976:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800197a:	4611      	mov	r1, r2
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff ff5f 	bl	8001840 <__NVIC_SetPriority>
}
 8001982:	bf00      	nop
 8001984:	3718      	adds	r7, #24
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	b082      	sub	sp, #8
 800198e:	af00      	add	r7, sp, #0
 8001990:	4603      	mov	r3, r0
 8001992:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001994:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff ff35 	bl	8001808 <__NVIC_EnableIRQ>
}
 800199e:	bf00      	nop
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b082      	sub	sp, #8
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f7ff ffa2 	bl	80018f8 <SysTick_Config>
 80019b4:	4603      	mov	r3, r0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
	...

080019c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b08b      	sub	sp, #44	; 0x2c
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019ca:	2300      	movs	r3, #0
 80019cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80019ce:	2300      	movs	r3, #0
 80019d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019d2:	e148      	b.n	8001c66 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80019d4:	2201      	movs	r2, #1
 80019d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	69fa      	ldr	r2, [r7, #28]
 80019e4:	4013      	ands	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	f040 8137 	bne.w	8001c60 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	4aa3      	ldr	r2, [pc, #652]	; (8001c84 <HAL_GPIO_Init+0x2c4>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d05e      	beq.n	8001aba <HAL_GPIO_Init+0xfa>
 80019fc:	4aa1      	ldr	r2, [pc, #644]	; (8001c84 <HAL_GPIO_Init+0x2c4>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d875      	bhi.n	8001aee <HAL_GPIO_Init+0x12e>
 8001a02:	4aa1      	ldr	r2, [pc, #644]	; (8001c88 <HAL_GPIO_Init+0x2c8>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d058      	beq.n	8001aba <HAL_GPIO_Init+0xfa>
 8001a08:	4a9f      	ldr	r2, [pc, #636]	; (8001c88 <HAL_GPIO_Init+0x2c8>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d86f      	bhi.n	8001aee <HAL_GPIO_Init+0x12e>
 8001a0e:	4a9f      	ldr	r2, [pc, #636]	; (8001c8c <HAL_GPIO_Init+0x2cc>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d052      	beq.n	8001aba <HAL_GPIO_Init+0xfa>
 8001a14:	4a9d      	ldr	r2, [pc, #628]	; (8001c8c <HAL_GPIO_Init+0x2cc>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d869      	bhi.n	8001aee <HAL_GPIO_Init+0x12e>
 8001a1a:	4a9d      	ldr	r2, [pc, #628]	; (8001c90 <HAL_GPIO_Init+0x2d0>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d04c      	beq.n	8001aba <HAL_GPIO_Init+0xfa>
 8001a20:	4a9b      	ldr	r2, [pc, #620]	; (8001c90 <HAL_GPIO_Init+0x2d0>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d863      	bhi.n	8001aee <HAL_GPIO_Init+0x12e>
 8001a26:	4a9b      	ldr	r2, [pc, #620]	; (8001c94 <HAL_GPIO_Init+0x2d4>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d046      	beq.n	8001aba <HAL_GPIO_Init+0xfa>
 8001a2c:	4a99      	ldr	r2, [pc, #612]	; (8001c94 <HAL_GPIO_Init+0x2d4>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d85d      	bhi.n	8001aee <HAL_GPIO_Init+0x12e>
 8001a32:	2b12      	cmp	r3, #18
 8001a34:	d82a      	bhi.n	8001a8c <HAL_GPIO_Init+0xcc>
 8001a36:	2b12      	cmp	r3, #18
 8001a38:	d859      	bhi.n	8001aee <HAL_GPIO_Init+0x12e>
 8001a3a:	a201      	add	r2, pc, #4	; (adr r2, 8001a40 <HAL_GPIO_Init+0x80>)
 8001a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a40:	08001abb 	.word	0x08001abb
 8001a44:	08001a95 	.word	0x08001a95
 8001a48:	08001aa7 	.word	0x08001aa7
 8001a4c:	08001ae9 	.word	0x08001ae9
 8001a50:	08001aef 	.word	0x08001aef
 8001a54:	08001aef 	.word	0x08001aef
 8001a58:	08001aef 	.word	0x08001aef
 8001a5c:	08001aef 	.word	0x08001aef
 8001a60:	08001aef 	.word	0x08001aef
 8001a64:	08001aef 	.word	0x08001aef
 8001a68:	08001aef 	.word	0x08001aef
 8001a6c:	08001aef 	.word	0x08001aef
 8001a70:	08001aef 	.word	0x08001aef
 8001a74:	08001aef 	.word	0x08001aef
 8001a78:	08001aef 	.word	0x08001aef
 8001a7c:	08001aef 	.word	0x08001aef
 8001a80:	08001aef 	.word	0x08001aef
 8001a84:	08001a9d 	.word	0x08001a9d
 8001a88:	08001ab1 	.word	0x08001ab1
 8001a8c:	4a82      	ldr	r2, [pc, #520]	; (8001c98 <HAL_GPIO_Init+0x2d8>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d013      	beq.n	8001aba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a92:	e02c      	b.n	8001aee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	623b      	str	r3, [r7, #32]
          break;
 8001a9a:	e029      	b.n	8001af0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	3304      	adds	r3, #4
 8001aa2:	623b      	str	r3, [r7, #32]
          break;
 8001aa4:	e024      	b.n	8001af0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	3308      	adds	r3, #8
 8001aac:	623b      	str	r3, [r7, #32]
          break;
 8001aae:	e01f      	b.n	8001af0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	330c      	adds	r3, #12
 8001ab6:	623b      	str	r3, [r7, #32]
          break;
 8001ab8:	e01a      	b.n	8001af0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d102      	bne.n	8001ac8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ac2:	2304      	movs	r3, #4
 8001ac4:	623b      	str	r3, [r7, #32]
          break;
 8001ac6:	e013      	b.n	8001af0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d105      	bne.n	8001adc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ad0:	2308      	movs	r3, #8
 8001ad2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	69fa      	ldr	r2, [r7, #28]
 8001ad8:	611a      	str	r2, [r3, #16]
          break;
 8001ada:	e009      	b.n	8001af0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001adc:	2308      	movs	r3, #8
 8001ade:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	69fa      	ldr	r2, [r7, #28]
 8001ae4:	615a      	str	r2, [r3, #20]
          break;
 8001ae6:	e003      	b.n	8001af0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	623b      	str	r3, [r7, #32]
          break;
 8001aec:	e000      	b.n	8001af0 <HAL_GPIO_Init+0x130>
          break;
 8001aee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	2bff      	cmp	r3, #255	; 0xff
 8001af4:	d801      	bhi.n	8001afa <HAL_GPIO_Init+0x13a>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	e001      	b.n	8001afe <HAL_GPIO_Init+0x13e>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	3304      	adds	r3, #4
 8001afe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	2bff      	cmp	r3, #255	; 0xff
 8001b04:	d802      	bhi.n	8001b0c <HAL_GPIO_Init+0x14c>
 8001b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	e002      	b.n	8001b12 <HAL_GPIO_Init+0x152>
 8001b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0e:	3b08      	subs	r3, #8
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	210f      	movs	r1, #15
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b20:	43db      	mvns	r3, r3
 8001b22:	401a      	ands	r2, r3
 8001b24:	6a39      	ldr	r1, [r7, #32]
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	fa01 f303 	lsl.w	r3, r1, r3
 8001b2c:	431a      	orrs	r2, r3
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	f000 8090 	beq.w	8001c60 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b40:	4b56      	ldr	r3, [pc, #344]	; (8001c9c <HAL_GPIO_Init+0x2dc>)
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	4a55      	ldr	r2, [pc, #340]	; (8001c9c <HAL_GPIO_Init+0x2dc>)
 8001b46:	f043 0301 	orr.w	r3, r3, #1
 8001b4a:	6193      	str	r3, [r2, #24]
 8001b4c:	4b53      	ldr	r3, [pc, #332]	; (8001c9c <HAL_GPIO_Init+0x2dc>)
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	f003 0301 	and.w	r3, r3, #1
 8001b54:	60bb      	str	r3, [r7, #8]
 8001b56:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b58:	4a51      	ldr	r2, [pc, #324]	; (8001ca0 <HAL_GPIO_Init+0x2e0>)
 8001b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5c:	089b      	lsrs	r3, r3, #2
 8001b5e:	3302      	adds	r3, #2
 8001b60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b64:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b68:	f003 0303 	and.w	r3, r3, #3
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	220f      	movs	r2, #15
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	43db      	mvns	r3, r3
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	4a49      	ldr	r2, [pc, #292]	; (8001ca4 <HAL_GPIO_Init+0x2e4>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d00d      	beq.n	8001ba0 <HAL_GPIO_Init+0x1e0>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	4a48      	ldr	r2, [pc, #288]	; (8001ca8 <HAL_GPIO_Init+0x2e8>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d007      	beq.n	8001b9c <HAL_GPIO_Init+0x1dc>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	4a47      	ldr	r2, [pc, #284]	; (8001cac <HAL_GPIO_Init+0x2ec>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d101      	bne.n	8001b98 <HAL_GPIO_Init+0x1d8>
 8001b94:	2302      	movs	r3, #2
 8001b96:	e004      	b.n	8001ba2 <HAL_GPIO_Init+0x1e2>
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e002      	b.n	8001ba2 <HAL_GPIO_Init+0x1e2>
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e000      	b.n	8001ba2 <HAL_GPIO_Init+0x1e2>
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ba4:	f002 0203 	and.w	r2, r2, #3
 8001ba8:	0092      	lsls	r2, r2, #2
 8001baa:	4093      	lsls	r3, r2
 8001bac:	68fa      	ldr	r2, [r7, #12]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001bb2:	493b      	ldr	r1, [pc, #236]	; (8001ca0 <HAL_GPIO_Init+0x2e0>)
 8001bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb6:	089b      	lsrs	r3, r3, #2
 8001bb8:	3302      	adds	r3, #2
 8001bba:	68fa      	ldr	r2, [r7, #12]
 8001bbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d006      	beq.n	8001bda <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001bcc:	4b38      	ldr	r3, [pc, #224]	; (8001cb0 <HAL_GPIO_Init+0x2f0>)
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	4937      	ldr	r1, [pc, #220]	; (8001cb0 <HAL_GPIO_Init+0x2f0>)
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	600b      	str	r3, [r1, #0]
 8001bd8:	e006      	b.n	8001be8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001bda:	4b35      	ldr	r3, [pc, #212]	; (8001cb0 <HAL_GPIO_Init+0x2f0>)
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	43db      	mvns	r3, r3
 8001be2:	4933      	ldr	r1, [pc, #204]	; (8001cb0 <HAL_GPIO_Init+0x2f0>)
 8001be4:	4013      	ands	r3, r2
 8001be6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d006      	beq.n	8001c02 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001bf4:	4b2e      	ldr	r3, [pc, #184]	; (8001cb0 <HAL_GPIO_Init+0x2f0>)
 8001bf6:	685a      	ldr	r2, [r3, #4]
 8001bf8:	492d      	ldr	r1, [pc, #180]	; (8001cb0 <HAL_GPIO_Init+0x2f0>)
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	604b      	str	r3, [r1, #4]
 8001c00:	e006      	b.n	8001c10 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c02:	4b2b      	ldr	r3, [pc, #172]	; (8001cb0 <HAL_GPIO_Init+0x2f0>)
 8001c04:	685a      	ldr	r2, [r3, #4]
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	43db      	mvns	r3, r3
 8001c0a:	4929      	ldr	r1, [pc, #164]	; (8001cb0 <HAL_GPIO_Init+0x2f0>)
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d006      	beq.n	8001c2a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c1c:	4b24      	ldr	r3, [pc, #144]	; (8001cb0 <HAL_GPIO_Init+0x2f0>)
 8001c1e:	689a      	ldr	r2, [r3, #8]
 8001c20:	4923      	ldr	r1, [pc, #140]	; (8001cb0 <HAL_GPIO_Init+0x2f0>)
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	608b      	str	r3, [r1, #8]
 8001c28:	e006      	b.n	8001c38 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c2a:	4b21      	ldr	r3, [pc, #132]	; (8001cb0 <HAL_GPIO_Init+0x2f0>)
 8001c2c:	689a      	ldr	r2, [r3, #8]
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	43db      	mvns	r3, r3
 8001c32:	491f      	ldr	r1, [pc, #124]	; (8001cb0 <HAL_GPIO_Init+0x2f0>)
 8001c34:	4013      	ands	r3, r2
 8001c36:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d006      	beq.n	8001c52 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c44:	4b1a      	ldr	r3, [pc, #104]	; (8001cb0 <HAL_GPIO_Init+0x2f0>)
 8001c46:	68da      	ldr	r2, [r3, #12]
 8001c48:	4919      	ldr	r1, [pc, #100]	; (8001cb0 <HAL_GPIO_Init+0x2f0>)
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	60cb      	str	r3, [r1, #12]
 8001c50:	e006      	b.n	8001c60 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c52:	4b17      	ldr	r3, [pc, #92]	; (8001cb0 <HAL_GPIO_Init+0x2f0>)
 8001c54:	68da      	ldr	r2, [r3, #12]
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	4915      	ldr	r1, [pc, #84]	; (8001cb0 <HAL_GPIO_Init+0x2f0>)
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c62:	3301      	adds	r3, #1
 8001c64:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	f47f aeaf 	bne.w	80019d4 <HAL_GPIO_Init+0x14>
  }
}
 8001c76:	bf00      	nop
 8001c78:	bf00      	nop
 8001c7a:	372c      	adds	r7, #44	; 0x2c
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bc80      	pop	{r7}
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	10320000 	.word	0x10320000
 8001c88:	10310000 	.word	0x10310000
 8001c8c:	10220000 	.word	0x10220000
 8001c90:	10210000 	.word	0x10210000
 8001c94:	10120000 	.word	0x10120000
 8001c98:	10110000 	.word	0x10110000
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	40010000 	.word	0x40010000
 8001ca4:	40010800 	.word	0x40010800
 8001ca8:	40010c00 	.word	0x40010c00
 8001cac:	40011000 	.word	0x40011000
 8001cb0:	40010400 	.word	0x40010400

08001cb4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b085      	sub	sp, #20
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	689a      	ldr	r2, [r3, #8]
 8001cc4:	887b      	ldrh	r3, [r7, #2]
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d002      	beq.n	8001cd2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	73fb      	strb	r3, [r7, #15]
 8001cd0:	e001      	b.n	8001cd6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3714      	adds	r7, #20
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bc80      	pop	{r7}
 8001ce0:	4770      	bx	lr

08001ce2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	b083      	sub	sp, #12
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
 8001cea:	460b      	mov	r3, r1
 8001cec:	807b      	strh	r3, [r7, #2]
 8001cee:	4613      	mov	r3, r2
 8001cf0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cf2:	787b      	ldrb	r3, [r7, #1]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d003      	beq.n	8001d00 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cf8:	887a      	ldrh	r2, [r7, #2]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001cfe:	e003      	b.n	8001d08 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d00:	887b      	ldrh	r3, [r7, #2]
 8001d02:	041a      	lsls	r2, r3, #16
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	611a      	str	r2, [r3, #16]
}
 8001d08:	bf00      	nop
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bc80      	pop	{r7}
 8001d10:	4770      	bx	lr
	...

08001d14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d101      	bne.n	8001d26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e26c      	b.n	8002200 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	f000 8087 	beq.w	8001e42 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d34:	4b92      	ldr	r3, [pc, #584]	; (8001f80 <HAL_RCC_OscConfig+0x26c>)
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f003 030c 	and.w	r3, r3, #12
 8001d3c:	2b04      	cmp	r3, #4
 8001d3e:	d00c      	beq.n	8001d5a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d40:	4b8f      	ldr	r3, [pc, #572]	; (8001f80 <HAL_RCC_OscConfig+0x26c>)
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f003 030c 	and.w	r3, r3, #12
 8001d48:	2b08      	cmp	r3, #8
 8001d4a:	d112      	bne.n	8001d72 <HAL_RCC_OscConfig+0x5e>
 8001d4c:	4b8c      	ldr	r3, [pc, #560]	; (8001f80 <HAL_RCC_OscConfig+0x26c>)
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d58:	d10b      	bne.n	8001d72 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d5a:	4b89      	ldr	r3, [pc, #548]	; (8001f80 <HAL_RCC_OscConfig+0x26c>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d06c      	beq.n	8001e40 <HAL_RCC_OscConfig+0x12c>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d168      	bne.n	8001e40 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e246      	b.n	8002200 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d7a:	d106      	bne.n	8001d8a <HAL_RCC_OscConfig+0x76>
 8001d7c:	4b80      	ldr	r3, [pc, #512]	; (8001f80 <HAL_RCC_OscConfig+0x26c>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a7f      	ldr	r2, [pc, #508]	; (8001f80 <HAL_RCC_OscConfig+0x26c>)
 8001d82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d86:	6013      	str	r3, [r2, #0]
 8001d88:	e02e      	b.n	8001de8 <HAL_RCC_OscConfig+0xd4>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d10c      	bne.n	8001dac <HAL_RCC_OscConfig+0x98>
 8001d92:	4b7b      	ldr	r3, [pc, #492]	; (8001f80 <HAL_RCC_OscConfig+0x26c>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a7a      	ldr	r2, [pc, #488]	; (8001f80 <HAL_RCC_OscConfig+0x26c>)
 8001d98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d9c:	6013      	str	r3, [r2, #0]
 8001d9e:	4b78      	ldr	r3, [pc, #480]	; (8001f80 <HAL_RCC_OscConfig+0x26c>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a77      	ldr	r2, [pc, #476]	; (8001f80 <HAL_RCC_OscConfig+0x26c>)
 8001da4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001da8:	6013      	str	r3, [r2, #0]
 8001daa:	e01d      	b.n	8001de8 <HAL_RCC_OscConfig+0xd4>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001db4:	d10c      	bne.n	8001dd0 <HAL_RCC_OscConfig+0xbc>
 8001db6:	4b72      	ldr	r3, [pc, #456]	; (8001f80 <HAL_RCC_OscConfig+0x26c>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a71      	ldr	r2, [pc, #452]	; (8001f80 <HAL_RCC_OscConfig+0x26c>)
 8001dbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dc0:	6013      	str	r3, [r2, #0]
 8001dc2:	4b6f      	ldr	r3, [pc, #444]	; (8001f80 <HAL_RCC_OscConfig+0x26c>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a6e      	ldr	r2, [pc, #440]	; (8001f80 <HAL_RCC_OscConfig+0x26c>)
 8001dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dcc:	6013      	str	r3, [r2, #0]
 8001dce:	e00b      	b.n	8001de8 <HAL_RCC_OscConfig+0xd4>
 8001dd0:	4b6b      	ldr	r3, [pc, #428]	; (8001f80 <HAL_RCC_OscConfig+0x26c>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a6a      	ldr	r2, [pc, #424]	; (8001f80 <HAL_RCC_OscConfig+0x26c>)
 8001dd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dda:	6013      	str	r3, [r2, #0]
 8001ddc:	4b68      	ldr	r3, [pc, #416]	; (8001f80 <HAL_RCC_OscConfig+0x26c>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a67      	ldr	r2, [pc, #412]	; (8001f80 <HAL_RCC_OscConfig+0x26c>)
 8001de2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001de6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d013      	beq.n	8001e18 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df0:	f7ff fcce 	bl	8001790 <HAL_GetTick>
 8001df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001df6:	e008      	b.n	8001e0a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001df8:	f7ff fcca 	bl	8001790 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b64      	cmp	r3, #100	; 0x64
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e1fa      	b.n	8002200 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e0a:	4b5d      	ldr	r3, [pc, #372]	; (8001f80 <HAL_RCC_OscConfig+0x26c>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d0f0      	beq.n	8001df8 <HAL_RCC_OscConfig+0xe4>
 8001e16:	e014      	b.n	8001e42 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e18:	f7ff fcba 	bl	8001790 <HAL_GetTick>
 8001e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e1e:	e008      	b.n	8001e32 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e20:	f7ff fcb6 	bl	8001790 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b64      	cmp	r3, #100	; 0x64
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e1e6      	b.n	8002200 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e32:	4b53      	ldr	r3, [pc, #332]	; (8001f80 <HAL_RCC_OscConfig+0x26c>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d1f0      	bne.n	8001e20 <HAL_RCC_OscConfig+0x10c>
 8001e3e:	e000      	b.n	8001e42 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d063      	beq.n	8001f16 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e4e:	4b4c      	ldr	r3, [pc, #304]	; (8001f80 <HAL_RCC_OscConfig+0x26c>)
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f003 030c 	and.w	r3, r3, #12
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d00b      	beq.n	8001e72 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e5a:	4b49      	ldr	r3, [pc, #292]	; (8001f80 <HAL_RCC_OscConfig+0x26c>)
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f003 030c 	and.w	r3, r3, #12
 8001e62:	2b08      	cmp	r3, #8
 8001e64:	d11c      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x18c>
 8001e66:	4b46      	ldr	r3, [pc, #280]	; (8001f80 <HAL_RCC_OscConfig+0x26c>)
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d116      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e72:	4b43      	ldr	r3, [pc, #268]	; (8001f80 <HAL_RCC_OscConfig+0x26c>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d005      	beq.n	8001e8a <HAL_RCC_OscConfig+0x176>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	691b      	ldr	r3, [r3, #16]
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d001      	beq.n	8001e8a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e1ba      	b.n	8002200 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e8a:	4b3d      	ldr	r3, [pc, #244]	; (8001f80 <HAL_RCC_OscConfig+0x26c>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	695b      	ldr	r3, [r3, #20]
 8001e96:	00db      	lsls	r3, r3, #3
 8001e98:	4939      	ldr	r1, [pc, #228]	; (8001f80 <HAL_RCC_OscConfig+0x26c>)
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e9e:	e03a      	b.n	8001f16 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	691b      	ldr	r3, [r3, #16]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d020      	beq.n	8001eea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ea8:	4b36      	ldr	r3, [pc, #216]	; (8001f84 <HAL_RCC_OscConfig+0x270>)
 8001eaa:	2201      	movs	r2, #1
 8001eac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eae:	f7ff fc6f 	bl	8001790 <HAL_GetTick>
 8001eb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eb4:	e008      	b.n	8001ec8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eb6:	f7ff fc6b 	bl	8001790 <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d901      	bls.n	8001ec8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e19b      	b.n	8002200 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ec8:	4b2d      	ldr	r3, [pc, #180]	; (8001f80 <HAL_RCC_OscConfig+0x26c>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d0f0      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ed4:	4b2a      	ldr	r3, [pc, #168]	; (8001f80 <HAL_RCC_OscConfig+0x26c>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	695b      	ldr	r3, [r3, #20]
 8001ee0:	00db      	lsls	r3, r3, #3
 8001ee2:	4927      	ldr	r1, [pc, #156]	; (8001f80 <HAL_RCC_OscConfig+0x26c>)
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	600b      	str	r3, [r1, #0]
 8001ee8:	e015      	b.n	8001f16 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eea:	4b26      	ldr	r3, [pc, #152]	; (8001f84 <HAL_RCC_OscConfig+0x270>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef0:	f7ff fc4e 	bl	8001790 <HAL_GetTick>
 8001ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ef6:	e008      	b.n	8001f0a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ef8:	f7ff fc4a 	bl	8001790 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e17a      	b.n	8002200 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f0a:	4b1d      	ldr	r3, [pc, #116]	; (8001f80 <HAL_RCC_OscConfig+0x26c>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0302 	and.w	r3, r3, #2
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d1f0      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0308 	and.w	r3, r3, #8
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d03a      	beq.n	8001f98 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	699b      	ldr	r3, [r3, #24]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d019      	beq.n	8001f5e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f2a:	4b17      	ldr	r3, [pc, #92]	; (8001f88 <HAL_RCC_OscConfig+0x274>)
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f30:	f7ff fc2e 	bl	8001790 <HAL_GetTick>
 8001f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f36:	e008      	b.n	8001f4a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f38:	f7ff fc2a 	bl	8001790 <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d901      	bls.n	8001f4a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e15a      	b.n	8002200 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f4a:	4b0d      	ldr	r3, [pc, #52]	; (8001f80 <HAL_RCC_OscConfig+0x26c>)
 8001f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d0f0      	beq.n	8001f38 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f56:	2001      	movs	r0, #1
 8001f58:	f000 faa6 	bl	80024a8 <RCC_Delay>
 8001f5c:	e01c      	b.n	8001f98 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f5e:	4b0a      	ldr	r3, [pc, #40]	; (8001f88 <HAL_RCC_OscConfig+0x274>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f64:	f7ff fc14 	bl	8001790 <HAL_GetTick>
 8001f68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f6a:	e00f      	b.n	8001f8c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f6c:	f7ff fc10 	bl	8001790 <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d908      	bls.n	8001f8c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e140      	b.n	8002200 <HAL_RCC_OscConfig+0x4ec>
 8001f7e:	bf00      	nop
 8001f80:	40021000 	.word	0x40021000
 8001f84:	42420000 	.word	0x42420000
 8001f88:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f8c:	4b9e      	ldr	r3, [pc, #632]	; (8002208 <HAL_RCC_OscConfig+0x4f4>)
 8001f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f90:	f003 0302 	and.w	r3, r3, #2
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d1e9      	bne.n	8001f6c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0304 	and.w	r3, r3, #4
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	f000 80a6 	beq.w	80020f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001faa:	4b97      	ldr	r3, [pc, #604]	; (8002208 <HAL_RCC_OscConfig+0x4f4>)
 8001fac:	69db      	ldr	r3, [r3, #28]
 8001fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d10d      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fb6:	4b94      	ldr	r3, [pc, #592]	; (8002208 <HAL_RCC_OscConfig+0x4f4>)
 8001fb8:	69db      	ldr	r3, [r3, #28]
 8001fba:	4a93      	ldr	r2, [pc, #588]	; (8002208 <HAL_RCC_OscConfig+0x4f4>)
 8001fbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fc0:	61d3      	str	r3, [r2, #28]
 8001fc2:	4b91      	ldr	r3, [pc, #580]	; (8002208 <HAL_RCC_OscConfig+0x4f4>)
 8001fc4:	69db      	ldr	r3, [r3, #28]
 8001fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fca:	60bb      	str	r3, [r7, #8]
 8001fcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fd2:	4b8e      	ldr	r3, [pc, #568]	; (800220c <HAL_RCC_OscConfig+0x4f8>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d118      	bne.n	8002010 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fde:	4b8b      	ldr	r3, [pc, #556]	; (800220c <HAL_RCC_OscConfig+0x4f8>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a8a      	ldr	r2, [pc, #552]	; (800220c <HAL_RCC_OscConfig+0x4f8>)
 8001fe4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fe8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fea:	f7ff fbd1 	bl	8001790 <HAL_GetTick>
 8001fee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ff0:	e008      	b.n	8002004 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ff2:	f7ff fbcd 	bl	8001790 <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b64      	cmp	r3, #100	; 0x64
 8001ffe:	d901      	bls.n	8002004 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e0fd      	b.n	8002200 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002004:	4b81      	ldr	r3, [pc, #516]	; (800220c <HAL_RCC_OscConfig+0x4f8>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800200c:	2b00      	cmp	r3, #0
 800200e:	d0f0      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	2b01      	cmp	r3, #1
 8002016:	d106      	bne.n	8002026 <HAL_RCC_OscConfig+0x312>
 8002018:	4b7b      	ldr	r3, [pc, #492]	; (8002208 <HAL_RCC_OscConfig+0x4f4>)
 800201a:	6a1b      	ldr	r3, [r3, #32]
 800201c:	4a7a      	ldr	r2, [pc, #488]	; (8002208 <HAL_RCC_OscConfig+0x4f4>)
 800201e:	f043 0301 	orr.w	r3, r3, #1
 8002022:	6213      	str	r3, [r2, #32]
 8002024:	e02d      	b.n	8002082 <HAL_RCC_OscConfig+0x36e>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d10c      	bne.n	8002048 <HAL_RCC_OscConfig+0x334>
 800202e:	4b76      	ldr	r3, [pc, #472]	; (8002208 <HAL_RCC_OscConfig+0x4f4>)
 8002030:	6a1b      	ldr	r3, [r3, #32]
 8002032:	4a75      	ldr	r2, [pc, #468]	; (8002208 <HAL_RCC_OscConfig+0x4f4>)
 8002034:	f023 0301 	bic.w	r3, r3, #1
 8002038:	6213      	str	r3, [r2, #32]
 800203a:	4b73      	ldr	r3, [pc, #460]	; (8002208 <HAL_RCC_OscConfig+0x4f4>)
 800203c:	6a1b      	ldr	r3, [r3, #32]
 800203e:	4a72      	ldr	r2, [pc, #456]	; (8002208 <HAL_RCC_OscConfig+0x4f4>)
 8002040:	f023 0304 	bic.w	r3, r3, #4
 8002044:	6213      	str	r3, [r2, #32]
 8002046:	e01c      	b.n	8002082 <HAL_RCC_OscConfig+0x36e>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	2b05      	cmp	r3, #5
 800204e:	d10c      	bne.n	800206a <HAL_RCC_OscConfig+0x356>
 8002050:	4b6d      	ldr	r3, [pc, #436]	; (8002208 <HAL_RCC_OscConfig+0x4f4>)
 8002052:	6a1b      	ldr	r3, [r3, #32]
 8002054:	4a6c      	ldr	r2, [pc, #432]	; (8002208 <HAL_RCC_OscConfig+0x4f4>)
 8002056:	f043 0304 	orr.w	r3, r3, #4
 800205a:	6213      	str	r3, [r2, #32]
 800205c:	4b6a      	ldr	r3, [pc, #424]	; (8002208 <HAL_RCC_OscConfig+0x4f4>)
 800205e:	6a1b      	ldr	r3, [r3, #32]
 8002060:	4a69      	ldr	r2, [pc, #420]	; (8002208 <HAL_RCC_OscConfig+0x4f4>)
 8002062:	f043 0301 	orr.w	r3, r3, #1
 8002066:	6213      	str	r3, [r2, #32]
 8002068:	e00b      	b.n	8002082 <HAL_RCC_OscConfig+0x36e>
 800206a:	4b67      	ldr	r3, [pc, #412]	; (8002208 <HAL_RCC_OscConfig+0x4f4>)
 800206c:	6a1b      	ldr	r3, [r3, #32]
 800206e:	4a66      	ldr	r2, [pc, #408]	; (8002208 <HAL_RCC_OscConfig+0x4f4>)
 8002070:	f023 0301 	bic.w	r3, r3, #1
 8002074:	6213      	str	r3, [r2, #32]
 8002076:	4b64      	ldr	r3, [pc, #400]	; (8002208 <HAL_RCC_OscConfig+0x4f4>)
 8002078:	6a1b      	ldr	r3, [r3, #32]
 800207a:	4a63      	ldr	r2, [pc, #396]	; (8002208 <HAL_RCC_OscConfig+0x4f4>)
 800207c:	f023 0304 	bic.w	r3, r3, #4
 8002080:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d015      	beq.n	80020b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800208a:	f7ff fb81 	bl	8001790 <HAL_GetTick>
 800208e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002090:	e00a      	b.n	80020a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002092:	f7ff fb7d 	bl	8001790 <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	f241 3288 	movw	r2, #5000	; 0x1388
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d901      	bls.n	80020a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e0ab      	b.n	8002200 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020a8:	4b57      	ldr	r3, [pc, #348]	; (8002208 <HAL_RCC_OscConfig+0x4f4>)
 80020aa:	6a1b      	ldr	r3, [r3, #32]
 80020ac:	f003 0302 	and.w	r3, r3, #2
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d0ee      	beq.n	8002092 <HAL_RCC_OscConfig+0x37e>
 80020b4:	e014      	b.n	80020e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020b6:	f7ff fb6b 	bl	8001790 <HAL_GetTick>
 80020ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020bc:	e00a      	b.n	80020d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020be:	f7ff fb67 	bl	8001790 <HAL_GetTick>
 80020c2:	4602      	mov	r2, r0
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d901      	bls.n	80020d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e095      	b.n	8002200 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020d4:	4b4c      	ldr	r3, [pc, #304]	; (8002208 <HAL_RCC_OscConfig+0x4f4>)
 80020d6:	6a1b      	ldr	r3, [r3, #32]
 80020d8:	f003 0302 	and.w	r3, r3, #2
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d1ee      	bne.n	80020be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80020e0:	7dfb      	ldrb	r3, [r7, #23]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d105      	bne.n	80020f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020e6:	4b48      	ldr	r3, [pc, #288]	; (8002208 <HAL_RCC_OscConfig+0x4f4>)
 80020e8:	69db      	ldr	r3, [r3, #28]
 80020ea:	4a47      	ldr	r2, [pc, #284]	; (8002208 <HAL_RCC_OscConfig+0x4f4>)
 80020ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	69db      	ldr	r3, [r3, #28]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	f000 8081 	beq.w	80021fe <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020fc:	4b42      	ldr	r3, [pc, #264]	; (8002208 <HAL_RCC_OscConfig+0x4f4>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f003 030c 	and.w	r3, r3, #12
 8002104:	2b08      	cmp	r3, #8
 8002106:	d061      	beq.n	80021cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	69db      	ldr	r3, [r3, #28]
 800210c:	2b02      	cmp	r3, #2
 800210e:	d146      	bne.n	800219e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002110:	4b3f      	ldr	r3, [pc, #252]	; (8002210 <HAL_RCC_OscConfig+0x4fc>)
 8002112:	2200      	movs	r2, #0
 8002114:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002116:	f7ff fb3b 	bl	8001790 <HAL_GetTick>
 800211a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800211c:	e008      	b.n	8002130 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800211e:	f7ff fb37 	bl	8001790 <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	2b02      	cmp	r3, #2
 800212a:	d901      	bls.n	8002130 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800212c:	2303      	movs	r3, #3
 800212e:	e067      	b.n	8002200 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002130:	4b35      	ldr	r3, [pc, #212]	; (8002208 <HAL_RCC_OscConfig+0x4f4>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d1f0      	bne.n	800211e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6a1b      	ldr	r3, [r3, #32]
 8002140:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002144:	d108      	bne.n	8002158 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002146:	4b30      	ldr	r3, [pc, #192]	; (8002208 <HAL_RCC_OscConfig+0x4f4>)
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	492d      	ldr	r1, [pc, #180]	; (8002208 <HAL_RCC_OscConfig+0x4f4>)
 8002154:	4313      	orrs	r3, r2
 8002156:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002158:	4b2b      	ldr	r3, [pc, #172]	; (8002208 <HAL_RCC_OscConfig+0x4f4>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6a19      	ldr	r1, [r3, #32]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002168:	430b      	orrs	r3, r1
 800216a:	4927      	ldr	r1, [pc, #156]	; (8002208 <HAL_RCC_OscConfig+0x4f4>)
 800216c:	4313      	orrs	r3, r2
 800216e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002170:	4b27      	ldr	r3, [pc, #156]	; (8002210 <HAL_RCC_OscConfig+0x4fc>)
 8002172:	2201      	movs	r2, #1
 8002174:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002176:	f7ff fb0b 	bl	8001790 <HAL_GetTick>
 800217a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800217c:	e008      	b.n	8002190 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800217e:	f7ff fb07 	bl	8001790 <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	2b02      	cmp	r3, #2
 800218a:	d901      	bls.n	8002190 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	e037      	b.n	8002200 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002190:	4b1d      	ldr	r3, [pc, #116]	; (8002208 <HAL_RCC_OscConfig+0x4f4>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d0f0      	beq.n	800217e <HAL_RCC_OscConfig+0x46a>
 800219c:	e02f      	b.n	80021fe <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800219e:	4b1c      	ldr	r3, [pc, #112]	; (8002210 <HAL_RCC_OscConfig+0x4fc>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a4:	f7ff faf4 	bl	8001790 <HAL_GetTick>
 80021a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021aa:	e008      	b.n	80021be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ac:	f7ff faf0 	bl	8001790 <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d901      	bls.n	80021be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e020      	b.n	8002200 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021be:	4b12      	ldr	r3, [pc, #72]	; (8002208 <HAL_RCC_OscConfig+0x4f4>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d1f0      	bne.n	80021ac <HAL_RCC_OscConfig+0x498>
 80021ca:	e018      	b.n	80021fe <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	69db      	ldr	r3, [r3, #28]
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d101      	bne.n	80021d8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e013      	b.n	8002200 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80021d8:	4b0b      	ldr	r3, [pc, #44]	; (8002208 <HAL_RCC_OscConfig+0x4f4>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6a1b      	ldr	r3, [r3, #32]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d106      	bne.n	80021fa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d001      	beq.n	80021fe <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e000      	b.n	8002200 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80021fe:	2300      	movs	r3, #0
}
 8002200:	4618      	mov	r0, r3
 8002202:	3718      	adds	r7, #24
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	40021000 	.word	0x40021000
 800220c:	40007000 	.word	0x40007000
 8002210:	42420060 	.word	0x42420060

08002214 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d101      	bne.n	8002228 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e0d0      	b.n	80023ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002228:	4b6a      	ldr	r3, [pc, #424]	; (80023d4 <HAL_RCC_ClockConfig+0x1c0>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0307 	and.w	r3, r3, #7
 8002230:	683a      	ldr	r2, [r7, #0]
 8002232:	429a      	cmp	r2, r3
 8002234:	d910      	bls.n	8002258 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002236:	4b67      	ldr	r3, [pc, #412]	; (80023d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f023 0207 	bic.w	r2, r3, #7
 800223e:	4965      	ldr	r1, [pc, #404]	; (80023d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	4313      	orrs	r3, r2
 8002244:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002246:	4b63      	ldr	r3, [pc, #396]	; (80023d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0307 	and.w	r3, r3, #7
 800224e:	683a      	ldr	r2, [r7, #0]
 8002250:	429a      	cmp	r2, r3
 8002252:	d001      	beq.n	8002258 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e0b8      	b.n	80023ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0302 	and.w	r3, r3, #2
 8002260:	2b00      	cmp	r3, #0
 8002262:	d020      	beq.n	80022a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0304 	and.w	r3, r3, #4
 800226c:	2b00      	cmp	r3, #0
 800226e:	d005      	beq.n	800227c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002270:	4b59      	ldr	r3, [pc, #356]	; (80023d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	4a58      	ldr	r2, [pc, #352]	; (80023d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002276:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800227a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0308 	and.w	r3, r3, #8
 8002284:	2b00      	cmp	r3, #0
 8002286:	d005      	beq.n	8002294 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002288:	4b53      	ldr	r3, [pc, #332]	; (80023d8 <HAL_RCC_ClockConfig+0x1c4>)
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	4a52      	ldr	r2, [pc, #328]	; (80023d8 <HAL_RCC_ClockConfig+0x1c4>)
 800228e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002292:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002294:	4b50      	ldr	r3, [pc, #320]	; (80023d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	494d      	ldr	r1, [pc, #308]	; (80023d8 <HAL_RCC_ClockConfig+0x1c4>)
 80022a2:	4313      	orrs	r3, r2
 80022a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d040      	beq.n	8002334 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d107      	bne.n	80022ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ba:	4b47      	ldr	r3, [pc, #284]	; (80023d8 <HAL_RCC_ClockConfig+0x1c4>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d115      	bne.n	80022f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e07f      	b.n	80023ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d107      	bne.n	80022e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022d2:	4b41      	ldr	r3, [pc, #260]	; (80023d8 <HAL_RCC_ClockConfig+0x1c4>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d109      	bne.n	80022f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e073      	b.n	80023ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022e2:	4b3d      	ldr	r3, [pc, #244]	; (80023d8 <HAL_RCC_ClockConfig+0x1c4>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d101      	bne.n	80022f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e06b      	b.n	80023ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022f2:	4b39      	ldr	r3, [pc, #228]	; (80023d8 <HAL_RCC_ClockConfig+0x1c4>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f023 0203 	bic.w	r2, r3, #3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	4936      	ldr	r1, [pc, #216]	; (80023d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002300:	4313      	orrs	r3, r2
 8002302:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002304:	f7ff fa44 	bl	8001790 <HAL_GetTick>
 8002308:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800230a:	e00a      	b.n	8002322 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800230c:	f7ff fa40 	bl	8001790 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	f241 3288 	movw	r2, #5000	; 0x1388
 800231a:	4293      	cmp	r3, r2
 800231c:	d901      	bls.n	8002322 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e053      	b.n	80023ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002322:	4b2d      	ldr	r3, [pc, #180]	; (80023d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f003 020c 	and.w	r2, r3, #12
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	429a      	cmp	r2, r3
 8002332:	d1eb      	bne.n	800230c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002334:	4b27      	ldr	r3, [pc, #156]	; (80023d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0307 	and.w	r3, r3, #7
 800233c:	683a      	ldr	r2, [r7, #0]
 800233e:	429a      	cmp	r2, r3
 8002340:	d210      	bcs.n	8002364 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002342:	4b24      	ldr	r3, [pc, #144]	; (80023d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f023 0207 	bic.w	r2, r3, #7
 800234a:	4922      	ldr	r1, [pc, #136]	; (80023d4 <HAL_RCC_ClockConfig+0x1c0>)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	4313      	orrs	r3, r2
 8002350:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002352:	4b20      	ldr	r3, [pc, #128]	; (80023d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0307 	and.w	r3, r3, #7
 800235a:	683a      	ldr	r2, [r7, #0]
 800235c:	429a      	cmp	r2, r3
 800235e:	d001      	beq.n	8002364 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e032      	b.n	80023ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0304 	and.w	r3, r3, #4
 800236c:	2b00      	cmp	r3, #0
 800236e:	d008      	beq.n	8002382 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002370:	4b19      	ldr	r3, [pc, #100]	; (80023d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	4916      	ldr	r1, [pc, #88]	; (80023d8 <HAL_RCC_ClockConfig+0x1c4>)
 800237e:	4313      	orrs	r3, r2
 8002380:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0308 	and.w	r3, r3, #8
 800238a:	2b00      	cmp	r3, #0
 800238c:	d009      	beq.n	80023a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800238e:	4b12      	ldr	r3, [pc, #72]	; (80023d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	691b      	ldr	r3, [r3, #16]
 800239a:	00db      	lsls	r3, r3, #3
 800239c:	490e      	ldr	r1, [pc, #56]	; (80023d8 <HAL_RCC_ClockConfig+0x1c4>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023a2:	f000 f821 	bl	80023e8 <HAL_RCC_GetSysClockFreq>
 80023a6:	4602      	mov	r2, r0
 80023a8:	4b0b      	ldr	r3, [pc, #44]	; (80023d8 <HAL_RCC_ClockConfig+0x1c4>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	091b      	lsrs	r3, r3, #4
 80023ae:	f003 030f 	and.w	r3, r3, #15
 80023b2:	490a      	ldr	r1, [pc, #40]	; (80023dc <HAL_RCC_ClockConfig+0x1c8>)
 80023b4:	5ccb      	ldrb	r3, [r1, r3]
 80023b6:	fa22 f303 	lsr.w	r3, r2, r3
 80023ba:	4a09      	ldr	r2, [pc, #36]	; (80023e0 <HAL_RCC_ClockConfig+0x1cc>)
 80023bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80023be:	4b09      	ldr	r3, [pc, #36]	; (80023e4 <HAL_RCC_ClockConfig+0x1d0>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7ff f9a2 	bl	800170c <HAL_InitTick>

  return HAL_OK;
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3710      	adds	r7, #16
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	40022000 	.word	0x40022000
 80023d8:	40021000 	.word	0x40021000
 80023dc:	08002d2c 	.word	0x08002d2c
 80023e0:	20000034 	.word	0x20000034
 80023e4:	20000038 	.word	0x20000038

080023e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023e8:	b490      	push	{r4, r7}
 80023ea:	b08a      	sub	sp, #40	; 0x28
 80023ec:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80023ee:	4b2a      	ldr	r3, [pc, #168]	; (8002498 <HAL_RCC_GetSysClockFreq+0xb0>)
 80023f0:	1d3c      	adds	r4, r7, #4
 80023f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80023f8:	f240 2301 	movw	r3, #513	; 0x201
 80023fc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023fe:	2300      	movs	r3, #0
 8002400:	61fb      	str	r3, [r7, #28]
 8002402:	2300      	movs	r3, #0
 8002404:	61bb      	str	r3, [r7, #24]
 8002406:	2300      	movs	r3, #0
 8002408:	627b      	str	r3, [r7, #36]	; 0x24
 800240a:	2300      	movs	r3, #0
 800240c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800240e:	2300      	movs	r3, #0
 8002410:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002412:	4b22      	ldr	r3, [pc, #136]	; (800249c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	f003 030c 	and.w	r3, r3, #12
 800241e:	2b04      	cmp	r3, #4
 8002420:	d002      	beq.n	8002428 <HAL_RCC_GetSysClockFreq+0x40>
 8002422:	2b08      	cmp	r3, #8
 8002424:	d003      	beq.n	800242e <HAL_RCC_GetSysClockFreq+0x46>
 8002426:	e02d      	b.n	8002484 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002428:	4b1d      	ldr	r3, [pc, #116]	; (80024a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800242a:	623b      	str	r3, [r7, #32]
      break;
 800242c:	e02d      	b.n	800248a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	0c9b      	lsrs	r3, r3, #18
 8002432:	f003 030f 	and.w	r3, r3, #15
 8002436:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800243a:	4413      	add	r3, r2
 800243c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002440:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d013      	beq.n	8002474 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800244c:	4b13      	ldr	r3, [pc, #76]	; (800249c <HAL_RCC_GetSysClockFreq+0xb4>)
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	0c5b      	lsrs	r3, r3, #17
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800245a:	4413      	add	r3, r2
 800245c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002460:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	4a0e      	ldr	r2, [pc, #56]	; (80024a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002466:	fb02 f203 	mul.w	r2, r2, r3
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002470:	627b      	str	r3, [r7, #36]	; 0x24
 8002472:	e004      	b.n	800247e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	4a0b      	ldr	r2, [pc, #44]	; (80024a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002478:	fb02 f303 	mul.w	r3, r2, r3
 800247c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800247e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002480:	623b      	str	r3, [r7, #32]
      break;
 8002482:	e002      	b.n	800248a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002484:	4b06      	ldr	r3, [pc, #24]	; (80024a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002486:	623b      	str	r3, [r7, #32]
      break;
 8002488:	bf00      	nop
    }
  }
  return sysclockfreq;
 800248a:	6a3b      	ldr	r3, [r7, #32]
}
 800248c:	4618      	mov	r0, r3
 800248e:	3728      	adds	r7, #40	; 0x28
 8002490:	46bd      	mov	sp, r7
 8002492:	bc90      	pop	{r4, r7}
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	08002d1c 	.word	0x08002d1c
 800249c:	40021000 	.word	0x40021000
 80024a0:	007a1200 	.word	0x007a1200
 80024a4:	003d0900 	.word	0x003d0900

080024a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b085      	sub	sp, #20
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80024b0:	4b0a      	ldr	r3, [pc, #40]	; (80024dc <RCC_Delay+0x34>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a0a      	ldr	r2, [pc, #40]	; (80024e0 <RCC_Delay+0x38>)
 80024b6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ba:	0a5b      	lsrs	r3, r3, #9
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	fb02 f303 	mul.w	r3, r2, r3
 80024c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80024c4:	bf00      	nop
  }
  while (Delay --);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	1e5a      	subs	r2, r3, #1
 80024ca:	60fa      	str	r2, [r7, #12]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d1f9      	bne.n	80024c4 <RCC_Delay+0x1c>
}
 80024d0:	bf00      	nop
 80024d2:	bf00      	nop
 80024d4:	3714      	adds	r7, #20
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bc80      	pop	{r7}
 80024da:	4770      	bx	lr
 80024dc:	20000034 	.word	0x20000034
 80024e0:	10624dd3 	.word	0x10624dd3

080024e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d101      	bne.n	80024f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e041      	b.n	800257a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d106      	bne.n	8002510 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f7ff f866 	bl	80015dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2202      	movs	r2, #2
 8002514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	3304      	adds	r3, #4
 8002520:	4619      	mov	r1, r3
 8002522:	4610      	mov	r0, r2
 8002524:	f000 fa6a 	bl	80029fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
	...

08002584 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002584:	b480      	push	{r7}
 8002586:	b085      	sub	sp, #20
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002592:	b2db      	uxtb	r3, r3
 8002594:	2b01      	cmp	r3, #1
 8002596:	d001      	beq.n	800259c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e035      	b.n	8002608 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2202      	movs	r2, #2
 80025a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	68da      	ldr	r2, [r3, #12]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f042 0201 	orr.w	r2, r2, #1
 80025b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a16      	ldr	r2, [pc, #88]	; (8002614 <HAL_TIM_Base_Start_IT+0x90>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d009      	beq.n	80025d2 <HAL_TIM_Base_Start_IT+0x4e>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025c6:	d004      	beq.n	80025d2 <HAL_TIM_Base_Start_IT+0x4e>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a12      	ldr	r2, [pc, #72]	; (8002618 <HAL_TIM_Base_Start_IT+0x94>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d111      	bne.n	80025f6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f003 0307 	and.w	r3, r3, #7
 80025dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2b06      	cmp	r3, #6
 80025e2:	d010      	beq.n	8002606 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f042 0201 	orr.w	r2, r2, #1
 80025f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025f4:	e007      	b.n	8002606 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f042 0201 	orr.w	r2, r2, #1
 8002604:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002606:	2300      	movs	r3, #0
}
 8002608:	4618      	mov	r0, r3
 800260a:	3714      	adds	r7, #20
 800260c:	46bd      	mov	sp, r7
 800260e:	bc80      	pop	{r7}
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	40012c00 	.word	0x40012c00
 8002618:	40000400 	.word	0x40000400

0800261c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b02      	cmp	r3, #2
 8002630:	d122      	bne.n	8002678 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	2b02      	cmp	r3, #2
 800263e:	d11b      	bne.n	8002678 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f06f 0202 	mvn.w	r2, #2
 8002648:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2201      	movs	r2, #1
 800264e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	699b      	ldr	r3, [r3, #24]
 8002656:	f003 0303 	and.w	r3, r3, #3
 800265a:	2b00      	cmp	r3, #0
 800265c:	d003      	beq.n	8002666 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f000 f9b1 	bl	80029c6 <HAL_TIM_IC_CaptureCallback>
 8002664:	e005      	b.n	8002672 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f000 f9a4 	bl	80029b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f000 f9b3 	bl	80029d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	f003 0304 	and.w	r3, r3, #4
 8002682:	2b04      	cmp	r3, #4
 8002684:	d122      	bne.n	80026cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	f003 0304 	and.w	r3, r3, #4
 8002690:	2b04      	cmp	r3, #4
 8002692:	d11b      	bne.n	80026cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f06f 0204 	mvn.w	r2, #4
 800269c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2202      	movs	r2, #2
 80026a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	699b      	ldr	r3, [r3, #24]
 80026aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d003      	beq.n	80026ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 f987 	bl	80029c6 <HAL_TIM_IC_CaptureCallback>
 80026b8:	e005      	b.n	80026c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f000 f97a 	bl	80029b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f000 f989 	bl	80029d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	f003 0308 	and.w	r3, r3, #8
 80026d6:	2b08      	cmp	r3, #8
 80026d8:	d122      	bne.n	8002720 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	f003 0308 	and.w	r3, r3, #8
 80026e4:	2b08      	cmp	r3, #8
 80026e6:	d11b      	bne.n	8002720 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f06f 0208 	mvn.w	r2, #8
 80026f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2204      	movs	r2, #4
 80026f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	69db      	ldr	r3, [r3, #28]
 80026fe:	f003 0303 	and.w	r3, r3, #3
 8002702:	2b00      	cmp	r3, #0
 8002704:	d003      	beq.n	800270e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f000 f95d 	bl	80029c6 <HAL_TIM_IC_CaptureCallback>
 800270c:	e005      	b.n	800271a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f000 f950 	bl	80029b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f000 f95f 	bl	80029d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	f003 0310 	and.w	r3, r3, #16
 800272a:	2b10      	cmp	r3, #16
 800272c:	d122      	bne.n	8002774 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	f003 0310 	and.w	r3, r3, #16
 8002738:	2b10      	cmp	r3, #16
 800273a:	d11b      	bne.n	8002774 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f06f 0210 	mvn.w	r2, #16
 8002744:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2208      	movs	r2, #8
 800274a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	69db      	ldr	r3, [r3, #28]
 8002752:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002756:	2b00      	cmp	r3, #0
 8002758:	d003      	beq.n	8002762 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f000 f933 	bl	80029c6 <HAL_TIM_IC_CaptureCallback>
 8002760:	e005      	b.n	800276e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f000 f926 	bl	80029b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f000 f935 	bl	80029d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	2b01      	cmp	r3, #1
 8002780:	d10e      	bne.n	80027a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	f003 0301 	and.w	r3, r3, #1
 800278c:	2b01      	cmp	r3, #1
 800278e:	d107      	bne.n	80027a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f06f 0201 	mvn.w	r2, #1
 8002798:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f7fe fe58 	bl	8001450 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027aa:	2b80      	cmp	r3, #128	; 0x80
 80027ac:	d10e      	bne.n	80027cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027b8:	2b80      	cmp	r3, #128	; 0x80
 80027ba:	d107      	bne.n	80027cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80027c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f000 fa67 	bl	8002c9a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027d6:	2b40      	cmp	r3, #64	; 0x40
 80027d8:	d10e      	bne.n	80027f8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027e4:	2b40      	cmp	r3, #64	; 0x40
 80027e6:	d107      	bne.n	80027f8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80027f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f000 f8f9 	bl	80029ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	f003 0320 	and.w	r3, r3, #32
 8002802:	2b20      	cmp	r3, #32
 8002804:	d10e      	bne.n	8002824 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	f003 0320 	and.w	r3, r3, #32
 8002810:	2b20      	cmp	r3, #32
 8002812:	d107      	bne.n	8002824 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f06f 0220 	mvn.w	r2, #32
 800281c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 fa32 	bl	8002c88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002824:	bf00      	nop
 8002826:	3708      	adds	r7, #8
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800283c:	2b01      	cmp	r3, #1
 800283e:	d101      	bne.n	8002844 <HAL_TIM_ConfigClockSource+0x18>
 8002840:	2302      	movs	r3, #2
 8002842:	e0b3      	b.n	80029ac <HAL_TIM_ConfigClockSource+0x180>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2202      	movs	r2, #2
 8002850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002862:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800286a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	68fa      	ldr	r2, [r7, #12]
 8002872:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800287c:	d03e      	beq.n	80028fc <HAL_TIM_ConfigClockSource+0xd0>
 800287e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002882:	f200 8087 	bhi.w	8002994 <HAL_TIM_ConfigClockSource+0x168>
 8002886:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800288a:	f000 8085 	beq.w	8002998 <HAL_TIM_ConfigClockSource+0x16c>
 800288e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002892:	d87f      	bhi.n	8002994 <HAL_TIM_ConfigClockSource+0x168>
 8002894:	2b70      	cmp	r3, #112	; 0x70
 8002896:	d01a      	beq.n	80028ce <HAL_TIM_ConfigClockSource+0xa2>
 8002898:	2b70      	cmp	r3, #112	; 0x70
 800289a:	d87b      	bhi.n	8002994 <HAL_TIM_ConfigClockSource+0x168>
 800289c:	2b60      	cmp	r3, #96	; 0x60
 800289e:	d050      	beq.n	8002942 <HAL_TIM_ConfigClockSource+0x116>
 80028a0:	2b60      	cmp	r3, #96	; 0x60
 80028a2:	d877      	bhi.n	8002994 <HAL_TIM_ConfigClockSource+0x168>
 80028a4:	2b50      	cmp	r3, #80	; 0x50
 80028a6:	d03c      	beq.n	8002922 <HAL_TIM_ConfigClockSource+0xf6>
 80028a8:	2b50      	cmp	r3, #80	; 0x50
 80028aa:	d873      	bhi.n	8002994 <HAL_TIM_ConfigClockSource+0x168>
 80028ac:	2b40      	cmp	r3, #64	; 0x40
 80028ae:	d058      	beq.n	8002962 <HAL_TIM_ConfigClockSource+0x136>
 80028b0:	2b40      	cmp	r3, #64	; 0x40
 80028b2:	d86f      	bhi.n	8002994 <HAL_TIM_ConfigClockSource+0x168>
 80028b4:	2b30      	cmp	r3, #48	; 0x30
 80028b6:	d064      	beq.n	8002982 <HAL_TIM_ConfigClockSource+0x156>
 80028b8:	2b30      	cmp	r3, #48	; 0x30
 80028ba:	d86b      	bhi.n	8002994 <HAL_TIM_ConfigClockSource+0x168>
 80028bc:	2b20      	cmp	r3, #32
 80028be:	d060      	beq.n	8002982 <HAL_TIM_ConfigClockSource+0x156>
 80028c0:	2b20      	cmp	r3, #32
 80028c2:	d867      	bhi.n	8002994 <HAL_TIM_ConfigClockSource+0x168>
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d05c      	beq.n	8002982 <HAL_TIM_ConfigClockSource+0x156>
 80028c8:	2b10      	cmp	r3, #16
 80028ca:	d05a      	beq.n	8002982 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80028cc:	e062      	b.n	8002994 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6818      	ldr	r0, [r3, #0]
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	6899      	ldr	r1, [r3, #8]
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	685a      	ldr	r2, [r3, #4]
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	f000 f95c 	bl	8002b9a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80028f0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	609a      	str	r2, [r3, #8]
      break;
 80028fa:	e04e      	b.n	800299a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6818      	ldr	r0, [r3, #0]
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	6899      	ldr	r1, [r3, #8]
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685a      	ldr	r2, [r3, #4]
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	f000 f945 	bl	8002b9a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	689a      	ldr	r2, [r3, #8]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800291e:	609a      	str	r2, [r3, #8]
      break;
 8002920:	e03b      	b.n	800299a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6818      	ldr	r0, [r3, #0]
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	6859      	ldr	r1, [r3, #4]
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	461a      	mov	r2, r3
 8002930:	f000 f8bc 	bl	8002aac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2150      	movs	r1, #80	; 0x50
 800293a:	4618      	mov	r0, r3
 800293c:	f000 f913 	bl	8002b66 <TIM_ITRx_SetConfig>
      break;
 8002940:	e02b      	b.n	800299a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6818      	ldr	r0, [r3, #0]
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	6859      	ldr	r1, [r3, #4]
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	461a      	mov	r2, r3
 8002950:	f000 f8da 	bl	8002b08 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2160      	movs	r1, #96	; 0x60
 800295a:	4618      	mov	r0, r3
 800295c:	f000 f903 	bl	8002b66 <TIM_ITRx_SetConfig>
      break;
 8002960:	e01b      	b.n	800299a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6818      	ldr	r0, [r3, #0]
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	6859      	ldr	r1, [r3, #4]
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	461a      	mov	r2, r3
 8002970:	f000 f89c 	bl	8002aac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2140      	movs	r1, #64	; 0x40
 800297a:	4618      	mov	r0, r3
 800297c:	f000 f8f3 	bl	8002b66 <TIM_ITRx_SetConfig>
      break;
 8002980:	e00b      	b.n	800299a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4619      	mov	r1, r3
 800298c:	4610      	mov	r0, r2
 800298e:	f000 f8ea 	bl	8002b66 <TIM_ITRx_SetConfig>
        break;
 8002992:	e002      	b.n	800299a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002994:	bf00      	nop
 8002996:	e000      	b.n	800299a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002998:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2201      	movs	r2, #1
 800299e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029aa:	2300      	movs	r3, #0
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3710      	adds	r7, #16
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80029bc:	bf00      	nop
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bc80      	pop	{r7}
 80029c4:	4770      	bx	lr

080029c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80029c6:	b480      	push	{r7}
 80029c8:	b083      	sub	sp, #12
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80029ce:	bf00      	nop
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bc80      	pop	{r7}
 80029d6:	4770      	bx	lr

080029d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029e0:	bf00      	nop
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bc80      	pop	{r7}
 80029e8:	4770      	bx	lr

080029ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029ea:	b480      	push	{r7}
 80029ec:	b083      	sub	sp, #12
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029f2:	bf00      	nop
 80029f4:	370c      	adds	r7, #12
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bc80      	pop	{r7}
 80029fa:	4770      	bx	lr

080029fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b085      	sub	sp, #20
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4a25      	ldr	r2, [pc, #148]	; (8002aa4 <TIM_Base_SetConfig+0xa8>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d007      	beq.n	8002a24 <TIM_Base_SetConfig+0x28>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a1a:	d003      	beq.n	8002a24 <TIM_Base_SetConfig+0x28>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4a22      	ldr	r2, [pc, #136]	; (8002aa8 <TIM_Base_SetConfig+0xac>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d108      	bne.n	8002a36 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	68fa      	ldr	r2, [r7, #12]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a1a      	ldr	r2, [pc, #104]	; (8002aa4 <TIM_Base_SetConfig+0xa8>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d007      	beq.n	8002a4e <TIM_Base_SetConfig+0x52>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a44:	d003      	beq.n	8002a4e <TIM_Base_SetConfig+0x52>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a17      	ldr	r2, [pc, #92]	; (8002aa8 <TIM_Base_SetConfig+0xac>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d108      	bne.n	8002a60 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	68fa      	ldr	r2, [r7, #12]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	695b      	ldr	r3, [r3, #20]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	68fa      	ldr	r2, [r7, #12]
 8002a72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	689a      	ldr	r2, [r3, #8]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	4a07      	ldr	r2, [pc, #28]	; (8002aa4 <TIM_Base_SetConfig+0xa8>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d103      	bne.n	8002a94 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	691a      	ldr	r2, [r3, #16]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	615a      	str	r2, [r3, #20]
}
 8002a9a:	bf00      	nop
 8002a9c:	3714      	adds	r7, #20
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bc80      	pop	{r7}
 8002aa2:	4770      	bx	lr
 8002aa4:	40012c00 	.word	0x40012c00
 8002aa8:	40000400 	.word	0x40000400

08002aac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b087      	sub	sp, #28
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6a1b      	ldr	r3, [r3, #32]
 8002abc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6a1b      	ldr	r3, [r3, #32]
 8002ac2:	f023 0201 	bic.w	r2, r3, #1
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ad6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	011b      	lsls	r3, r3, #4
 8002adc:	693a      	ldr	r2, [r7, #16]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	f023 030a 	bic.w	r3, r3, #10
 8002ae8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002aea:	697a      	ldr	r2, [r7, #20]
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	693a      	ldr	r2, [r7, #16]
 8002af6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	697a      	ldr	r2, [r7, #20]
 8002afc:	621a      	str	r2, [r3, #32]
}
 8002afe:	bf00      	nop
 8002b00:	371c      	adds	r7, #28
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bc80      	pop	{r7}
 8002b06:	4770      	bx	lr

08002b08 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b087      	sub	sp, #28
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6a1b      	ldr	r3, [r3, #32]
 8002b18:	f023 0210 	bic.w	r2, r3, #16
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	699b      	ldr	r3, [r3, #24]
 8002b24:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6a1b      	ldr	r3, [r3, #32]
 8002b2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b32:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	031b      	lsls	r3, r3, #12
 8002b38:	697a      	ldr	r2, [r7, #20]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b44:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	011b      	lsls	r3, r3, #4
 8002b4a:	693a      	ldr	r2, [r7, #16]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	697a      	ldr	r2, [r7, #20]
 8002b54:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	693a      	ldr	r2, [r7, #16]
 8002b5a:	621a      	str	r2, [r3, #32]
}
 8002b5c:	bf00      	nop
 8002b5e:	371c      	adds	r7, #28
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bc80      	pop	{r7}
 8002b64:	4770      	bx	lr

08002b66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b66:	b480      	push	{r7}
 8002b68:	b085      	sub	sp, #20
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
 8002b6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b7e:	683a      	ldr	r2, [r7, #0]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	f043 0307 	orr.w	r3, r3, #7
 8002b88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	68fa      	ldr	r2, [r7, #12]
 8002b8e:	609a      	str	r2, [r3, #8]
}
 8002b90:	bf00      	nop
 8002b92:	3714      	adds	r7, #20
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bc80      	pop	{r7}
 8002b98:	4770      	bx	lr

08002b9a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	b087      	sub	sp, #28
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	60f8      	str	r0, [r7, #12]
 8002ba2:	60b9      	str	r1, [r7, #8]
 8002ba4:	607a      	str	r2, [r7, #4]
 8002ba6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bb4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	021a      	lsls	r2, r3, #8
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	431a      	orrs	r2, r3
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	697a      	ldr	r2, [r7, #20]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	697a      	ldr	r2, [r7, #20]
 8002bcc:	609a      	str	r2, [r3, #8]
}
 8002bce:	bf00      	nop
 8002bd0:	371c      	adds	r7, #28
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bc80      	pop	{r7}
 8002bd6:	4770      	bx	lr

08002bd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b085      	sub	sp, #20
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d101      	bne.n	8002bf0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002bec:	2302      	movs	r3, #2
 8002bee:	e041      	b.n	8002c74 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2202      	movs	r2, #2
 8002bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	68fa      	ldr	r2, [r7, #12]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68fa      	ldr	r2, [r7, #12]
 8002c28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a14      	ldr	r2, [pc, #80]	; (8002c80 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d009      	beq.n	8002c48 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c3c:	d004      	beq.n	8002c48 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a10      	ldr	r2, [pc, #64]	; (8002c84 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d10c      	bne.n	8002c62 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c4e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	68ba      	ldr	r2, [r7, #8]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	68ba      	ldr	r2, [r7, #8]
 8002c60:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2201      	movs	r2, #1
 8002c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c72:	2300      	movs	r3, #0
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3714      	adds	r7, #20
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bc80      	pop	{r7}
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	40012c00 	.word	0x40012c00
 8002c84:	40000400 	.word	0x40000400

08002c88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c90:	bf00      	nop
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bc80      	pop	{r7}
 8002c98:	4770      	bx	lr

08002c9a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	b083      	sub	sp, #12
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ca2:	bf00      	nop
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bc80      	pop	{r7}
 8002caa:	4770      	bx	lr

08002cac <__libc_init_array>:
 8002cac:	b570      	push	{r4, r5, r6, lr}
 8002cae:	2600      	movs	r6, #0
 8002cb0:	4d0c      	ldr	r5, [pc, #48]	; (8002ce4 <__libc_init_array+0x38>)
 8002cb2:	4c0d      	ldr	r4, [pc, #52]	; (8002ce8 <__libc_init_array+0x3c>)
 8002cb4:	1b64      	subs	r4, r4, r5
 8002cb6:	10a4      	asrs	r4, r4, #2
 8002cb8:	42a6      	cmp	r6, r4
 8002cba:	d109      	bne.n	8002cd0 <__libc_init_array+0x24>
 8002cbc:	f000 f822 	bl	8002d04 <_init>
 8002cc0:	2600      	movs	r6, #0
 8002cc2:	4d0a      	ldr	r5, [pc, #40]	; (8002cec <__libc_init_array+0x40>)
 8002cc4:	4c0a      	ldr	r4, [pc, #40]	; (8002cf0 <__libc_init_array+0x44>)
 8002cc6:	1b64      	subs	r4, r4, r5
 8002cc8:	10a4      	asrs	r4, r4, #2
 8002cca:	42a6      	cmp	r6, r4
 8002ccc:	d105      	bne.n	8002cda <__libc_init_array+0x2e>
 8002cce:	bd70      	pop	{r4, r5, r6, pc}
 8002cd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cd4:	4798      	blx	r3
 8002cd6:	3601      	adds	r6, #1
 8002cd8:	e7ee      	b.n	8002cb8 <__libc_init_array+0xc>
 8002cda:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cde:	4798      	blx	r3
 8002ce0:	3601      	adds	r6, #1
 8002ce2:	e7f2      	b.n	8002cca <__libc_init_array+0x1e>
 8002ce4:	08002d3c 	.word	0x08002d3c
 8002ce8:	08002d3c 	.word	0x08002d3c
 8002cec:	08002d3c 	.word	0x08002d3c
 8002cf0:	08002d40 	.word	0x08002d40

08002cf4 <memset>:
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	4402      	add	r2, r0
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d100      	bne.n	8002cfe <memset+0xa>
 8002cfc:	4770      	bx	lr
 8002cfe:	f803 1b01 	strb.w	r1, [r3], #1
 8002d02:	e7f9      	b.n	8002cf8 <memset+0x4>

08002d04 <_init>:
 8002d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d06:	bf00      	nop
 8002d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d0a:	bc08      	pop	{r3}
 8002d0c:	469e      	mov	lr, r3
 8002d0e:	4770      	bx	lr

08002d10 <_fini>:
 8002d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d12:	bf00      	nop
 8002d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d16:	bc08      	pop	{r3}
 8002d18:	469e      	mov	lr, r3
 8002d1a:	4770      	bx	lr
