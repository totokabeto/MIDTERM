
BUTTON.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030dc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080031e8  080031e8  000131e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003208  08003208  00020040  2**0
                  CONTENTS
  4 .ARM          00000000  08003208  08003208  00020040  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003208  08003208  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003208  08003208  00013208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800320c  0800320c  0001320c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  08003210  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  20000040  08003250  00020040  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  08003250  000200e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 12 .debug_info   000095d6  00000000  00000000  00020069  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b88  00000000  00000000  0002963f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a70  00000000  00000000  0002b1c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000940  00000000  00000000  0002bc38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016fbe  00000000  00000000  0002c578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cb0a  00000000  00000000  00043536  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081fb4  00000000  00000000  00050040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d1ff4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002848  00000000  00000000  000d2048  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000040 	.word	0x20000040
 8000128:	00000000 	.word	0x00000000
 800012c:	080031d0 	.word	0x080031d0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000044 	.word	0x20000044
 8000148:	080031d0 	.word	0x080031d0

0800014c <fsm_ledBlinky_run>:
 *      Author: BOSCH - HCMUT
 */

#include "LedBlinky.h"

void fsm_ledBlinky_run (){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
switch (ledstatus){
 8000150:	4b1e      	ldr	r3, [pc, #120]	; (80001cc <fsm_ledBlinky_run+0x80>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b47      	cmp	r3, #71	; 0x47
 8000156:	d020      	beq.n	800019a <fsm_ledBlinky_run+0x4e>
 8000158:	2b47      	cmp	r3, #71	; 0x47
 800015a:	dc34      	bgt.n	80001c6 <fsm_ledBlinky_run+0x7a>
 800015c:	2b45      	cmp	r3, #69	; 0x45
 800015e:	d002      	beq.n	8000166 <fsm_ledBlinky_run+0x1a>
 8000160:	2b46      	cmp	r3, #70	; 0x46
 8000162:	d007      	beq.n	8000174 <fsm_ledBlinky_run+0x28>
ledstatus = LED_ON;
setTimer3(100);
}
break ;
}
}
 8000164:	e02f      	b.n	80001c6 <fsm_ledBlinky_run+0x7a>
ledstatus = LED_ON;
 8000166:	4b19      	ldr	r3, [pc, #100]	; (80001cc <fsm_ledBlinky_run+0x80>)
 8000168:	2246      	movs	r2, #70	; 0x46
 800016a:	601a      	str	r2, [r3, #0]
setTimer3(100);
 800016c:	2064      	movs	r0, #100	; 0x64
 800016e:	f001 fbff 	bl	8001970 <setTimer3>
break;
 8000172:	e028      	b.n	80001c6 <fsm_ledBlinky_run+0x7a>
if (timer_flag3 == 1){
 8000174:	4b16      	ldr	r3, [pc, #88]	; (80001d0 <fsm_ledBlinky_run+0x84>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d121      	bne.n	80001c0 <fsm_ledBlinky_run+0x74>
timer_flag3 = 0;
 800017c:	4b14      	ldr	r3, [pc, #80]	; (80001d0 <fsm_ledBlinky_run+0x84>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000182:	2200      	movs	r2, #0
 8000184:	2120      	movs	r1, #32
 8000186:	4813      	ldr	r0, [pc, #76]	; (80001d4 <fsm_ledBlinky_run+0x88>)
 8000188:	f002 f811 	bl	80021ae <HAL_GPIO_WritePin>
ledstatus = LED_OFF;
 800018c:	4b0f      	ldr	r3, [pc, #60]	; (80001cc <fsm_ledBlinky_run+0x80>)
 800018e:	2247      	movs	r2, #71	; 0x47
 8000190:	601a      	str	r2, [r3, #0]
setTimer3(100);
 8000192:	2064      	movs	r0, #100	; 0x64
 8000194:	f001 fbec 	bl	8001970 <setTimer3>
break;
 8000198:	e012      	b.n	80001c0 <fsm_ledBlinky_run+0x74>
if (timer_flag3 == 1){
 800019a:	4b0d      	ldr	r3, [pc, #52]	; (80001d0 <fsm_ledBlinky_run+0x84>)
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	2b01      	cmp	r3, #1
 80001a0:	d110      	bne.n	80001c4 <fsm_ledBlinky_run+0x78>
timer_flag3 =0;
 80001a2:	4b0b      	ldr	r3, [pc, #44]	; (80001d0 <fsm_ledBlinky_run+0x84>)
 80001a4:	2200      	movs	r2, #0
 80001a6:	601a      	str	r2, [r3, #0]
HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80001a8:	2201      	movs	r2, #1
 80001aa:	2120      	movs	r1, #32
 80001ac:	4809      	ldr	r0, [pc, #36]	; (80001d4 <fsm_ledBlinky_run+0x88>)
 80001ae:	f001 fffe 	bl	80021ae <HAL_GPIO_WritePin>
ledstatus = LED_ON;
 80001b2:	4b06      	ldr	r3, [pc, #24]	; (80001cc <fsm_ledBlinky_run+0x80>)
 80001b4:	2246      	movs	r2, #70	; 0x46
 80001b6:	601a      	str	r2, [r3, #0]
setTimer3(100);
 80001b8:	2064      	movs	r0, #100	; 0x64
 80001ba:	f001 fbd9 	bl	8001970 <setTimer3>
break ;
 80001be:	e001      	b.n	80001c4 <fsm_ledBlinky_run+0x78>
break;
 80001c0:	bf00      	nop
 80001c2:	e000      	b.n	80001c6 <fsm_ledBlinky_run+0x7a>
break ;
 80001c4:	bf00      	nop
}
 80001c6:	bf00      	nop
 80001c8:	bd80      	pop	{r7, pc}
 80001ca:	bf00      	nop
 80001cc:	20000074 	.word	0x20000074
 80001d0:	20000090 	.word	0x20000090
 80001d4:	40010800 	.word	0x40010800

080001d8 <subKeyProcess>:
}
void Sub_long_pressed(int index){
	if(index == 0)	button1_flag2 = 1;
	if(index == 1)	button2_flag2 = 1;
	if(index == 2)	button3_flag2 = 1;}*/
void subKeyProcess(){
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
button1_flag = 1;
 80001dc:	4b03      	ldr	r3, [pc, #12]	; (80001ec <subKeyProcess+0x14>)
 80001de:	2201      	movs	r2, #1
 80001e0:	601a      	str	r2, [r3, #0]
}
 80001e2:	bf00      	nop
 80001e4:	46bd      	mov	sp, r7
 80001e6:	bc80      	pop	{r7}
 80001e8:	4770      	bx	lr
 80001ea:	bf00      	nop
 80001ec:	2000005c 	.word	0x2000005c

080001f0 <subKeyProcess2>:
void subKeyProcess2(){
 80001f0:	b480      	push	{r7}
 80001f2:	af00      	add	r7, sp, #0
button2_flag = 1;
 80001f4:	4b03      	ldr	r3, [pc, #12]	; (8000204 <subKeyProcess2+0x14>)
 80001f6:	2201      	movs	r2, #1
 80001f8:	601a      	str	r2, [r3, #0]
}
 80001fa:	bf00      	nop
 80001fc:	46bd      	mov	sp, r7
 80001fe:	bc80      	pop	{r7}
 8000200:	4770      	bx	lr
 8000202:	bf00      	nop
 8000204:	20000060 	.word	0x20000060

08000208 <subKeyProcess3>:
void subKeyProcess3(){
 8000208:	b480      	push	{r7}
 800020a:	af00      	add	r7, sp, #0
button3_flag = 1;
 800020c:	4b03      	ldr	r3, [pc, #12]	; (800021c <subKeyProcess3+0x14>)
 800020e:	2201      	movs	r2, #1
 8000210:	601a      	str	r2, [r3, #0]
}
 8000212:	bf00      	nop
 8000214:	46bd      	mov	sp, r7
 8000216:	bc80      	pop	{r7}
 8000218:	4770      	bx	lr
 800021a:	bf00      	nop
 800021c:	20000064 	.word	0x20000064

08000220 <getKeyInput>:
void getKeyInput(){
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
	 KeyReg2 = KeyReg1;
 8000224:	4b1f      	ldr	r3, [pc, #124]	; (80002a4 <getKeyInput+0x84>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	4a1f      	ldr	r2, [pc, #124]	; (80002a8 <getKeyInput+0x88>)
 800022a:	6013      	str	r3, [r2, #0]
	  KeyReg1 = KeyReg0;
 800022c:	4b1f      	ldr	r3, [pc, #124]	; (80002ac <getKeyInput+0x8c>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	4a1c      	ldr	r2, [pc, #112]	; (80002a4 <getKeyInput+0x84>)
 8000232:	6013      	str	r3, [r2, #0]
	  KeyReg0 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8000234:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000238:	481d      	ldr	r0, [pc, #116]	; (80002b0 <getKeyInput+0x90>)
 800023a:	f001 ffa1 	bl	8002180 <HAL_GPIO_ReadPin>
 800023e:	4603      	mov	r3, r0
 8000240:	461a      	mov	r2, r3
 8000242:	4b1a      	ldr	r3, [pc, #104]	; (80002ac <getKeyInput+0x8c>)
 8000244:	601a      	str	r2, [r3, #0]
	  if ((KeyReg1 == KeyReg0) && (KeyReg1 == KeyReg2)){
 8000246:	4b17      	ldr	r3, [pc, #92]	; (80002a4 <getKeyInput+0x84>)
 8000248:	681a      	ldr	r2, [r3, #0]
 800024a:	4b18      	ldr	r3, [pc, #96]	; (80002ac <getKeyInput+0x8c>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	429a      	cmp	r2, r3
 8000250:	d126      	bne.n	80002a0 <getKeyInput+0x80>
 8000252:	4b14      	ldr	r3, [pc, #80]	; (80002a4 <getKeyInput+0x84>)
 8000254:	681a      	ldr	r2, [r3, #0]
 8000256:	4b14      	ldr	r3, [pc, #80]	; (80002a8 <getKeyInput+0x88>)
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	429a      	cmp	r2, r3
 800025c:	d120      	bne.n	80002a0 <getKeyInput+0x80>
	    if (KeyReg2 != KeyReg3){
 800025e:	4b12      	ldr	r3, [pc, #72]	; (80002a8 <getKeyInput+0x88>)
 8000260:	681a      	ldr	r2, [r3, #0]
 8000262:	4b14      	ldr	r3, [pc, #80]	; (80002b4 <getKeyInput+0x94>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	429a      	cmp	r2, r3
 8000268:	d00e      	beq.n	8000288 <getKeyInput+0x68>
	      KeyReg3 = KeyReg2;
 800026a:	4b0f      	ldr	r3, [pc, #60]	; (80002a8 <getKeyInput+0x88>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	4a11      	ldr	r2, [pc, #68]	; (80002b4 <getKeyInput+0x94>)
 8000270:	6013      	str	r3, [r2, #0]

	      if (KeyReg3 == PRESSED_STATE){
 8000272:	4b10      	ldr	r3, [pc, #64]	; (80002b4 <getKeyInput+0x94>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	2b00      	cmp	r3, #0
 8000278:	d112      	bne.n	80002a0 <getKeyInput+0x80>
	        TimeOutForKeyPress = 300;
 800027a:	4b0f      	ldr	r3, [pc, #60]	; (80002b8 <getKeyInput+0x98>)
 800027c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000280:	601a      	str	r2, [r3, #0]
	        subKeyProcess();
 8000282:	f7ff ffa9 	bl	80001d8 <subKeyProcess>
	        	TimeOutForKeyPress = 100;
	          //KeyReg3 = NORMAL_STATE;
	        }
	    }
	  }
	}
 8000286:	e00b      	b.n	80002a0 <getKeyInput+0x80>
	       TimeOutForKeyPress --;
 8000288:	4b0b      	ldr	r3, [pc, #44]	; (80002b8 <getKeyInput+0x98>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	3b01      	subs	r3, #1
 800028e:	4a0a      	ldr	r2, [pc, #40]	; (80002b8 <getKeyInput+0x98>)
 8000290:	6013      	str	r3, [r2, #0]
	        if (TimeOutForKeyPress == 0){
 8000292:	4b09      	ldr	r3, [pc, #36]	; (80002b8 <getKeyInput+0x98>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	2b00      	cmp	r3, #0
 8000298:	d102      	bne.n	80002a0 <getKeyInput+0x80>
	        	TimeOutForKeyPress = 100;
 800029a:	4b07      	ldr	r3, [pc, #28]	; (80002b8 <getKeyInput+0x98>)
 800029c:	2264      	movs	r2, #100	; 0x64
 800029e:	601a      	str	r2, [r3, #0]
	}
 80002a0:	bf00      	nop
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	20000004 	.word	0x20000004
 80002a8:	20000008 	.word	0x20000008
 80002ac:	20000000 	.word	0x20000000
 80002b0:	40011000 	.word	0x40011000
 80002b4:	2000000c 	.word	0x2000000c
 80002b8:	20000030 	.word	0x20000030

080002bc <getKeyInput2>:
void getKeyInput2(){
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
	Key2Reg2 = Key2Reg1;
 80002c0:	4b23      	ldr	r3, [pc, #140]	; (8000350 <getKeyInput2+0x94>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a23      	ldr	r2, [pc, #140]	; (8000354 <getKeyInput2+0x98>)
 80002c6:	6013      	str	r3, [r2, #0]
		  Key2Reg1 = Key2Reg0;
 80002c8:	4b23      	ldr	r3, [pc, #140]	; (8000358 <getKeyInput2+0x9c>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	4a20      	ldr	r2, [pc, #128]	; (8000350 <getKeyInput2+0x94>)
 80002ce:	6013      	str	r3, [r2, #0]
		  Key2Reg0 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14);
 80002d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002d4:	4821      	ldr	r0, [pc, #132]	; (800035c <getKeyInput2+0xa0>)
 80002d6:	f001 ff53 	bl	8002180 <HAL_GPIO_ReadPin>
 80002da:	4603      	mov	r3, r0
 80002dc:	461a      	mov	r2, r3
 80002de:	4b1e      	ldr	r3, [pc, #120]	; (8000358 <getKeyInput2+0x9c>)
 80002e0:	601a      	str	r2, [r3, #0]
		  if ((Key2Reg1 == Key2Reg0) && (Key2Reg1 == Key2Reg2)){
 80002e2:	4b1b      	ldr	r3, [pc, #108]	; (8000350 <getKeyInput2+0x94>)
 80002e4:	681a      	ldr	r2, [r3, #0]
 80002e6:	4b1c      	ldr	r3, [pc, #112]	; (8000358 <getKeyInput2+0x9c>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d12d      	bne.n	800034a <getKeyInput2+0x8e>
 80002ee:	4b18      	ldr	r3, [pc, #96]	; (8000350 <getKeyInput2+0x94>)
 80002f0:	681a      	ldr	r2, [r3, #0]
 80002f2:	4b18      	ldr	r3, [pc, #96]	; (8000354 <getKeyInput2+0x98>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	429a      	cmp	r2, r3
 80002f8:	d127      	bne.n	800034a <getKeyInput2+0x8e>
		    if (Key2Reg2 != Key2Reg3){
 80002fa:	4b16      	ldr	r3, [pc, #88]	; (8000354 <getKeyInput2+0x98>)
 80002fc:	681a      	ldr	r2, [r3, #0]
 80002fe:	4b18      	ldr	r3, [pc, #96]	; (8000360 <getKeyInput2+0xa4>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	429a      	cmp	r2, r3
 8000304:	d00e      	beq.n	8000324 <getKeyInput2+0x68>
		      Key2Reg3 = Key2Reg2;
 8000306:	4b13      	ldr	r3, [pc, #76]	; (8000354 <getKeyInput2+0x98>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	4a15      	ldr	r2, [pc, #84]	; (8000360 <getKeyInput2+0xa4>)
 800030c:	6013      	str	r3, [r2, #0]

		      if (Key2Reg3 == PRESSED_STATE){
 800030e:	4b14      	ldr	r3, [pc, #80]	; (8000360 <getKeyInput2+0xa4>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	2b00      	cmp	r3, #0
 8000314:	d119      	bne.n	800034a <getKeyInput2+0x8e>
		        TimeOutForKeyPress = 300;
 8000316:	4b13      	ldr	r3, [pc, #76]	; (8000364 <getKeyInput2+0xa8>)
 8000318:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800031c:	601a      	str	r2, [r3, #0]
		        subKeyProcess2();
 800031e:	f7ff ff67 	bl	80001f0 <subKeyProcess2>

		        	}
		        }
		    }
		  }
		}
 8000322:	e012      	b.n	800034a <getKeyInput2+0x8e>
		       TimeOutForKeyPress --;
 8000324:	4b0f      	ldr	r3, [pc, #60]	; (8000364 <getKeyInput2+0xa8>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	3b01      	subs	r3, #1
 800032a:	4a0e      	ldr	r2, [pc, #56]	; (8000364 <getKeyInput2+0xa8>)
 800032c:	6013      	str	r3, [r2, #0]
		        if (TimeOutForKeyPress == 0){
 800032e:	4b0d      	ldr	r3, [pc, #52]	; (8000364 <getKeyInput2+0xa8>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	2b00      	cmp	r3, #0
 8000334:	d109      	bne.n	800034a <getKeyInput2+0x8e>
		        	if (Key2Reg3 == PRESSED_STATE){
 8000336:	4b0a      	ldr	r3, [pc, #40]	; (8000360 <getKeyInput2+0xa4>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	2b00      	cmp	r3, #0
 800033c:	d105      	bne.n	800034a <getKeyInput2+0x8e>
		        		button2_flag2 =1;
 800033e:	4b0a      	ldr	r3, [pc, #40]	; (8000368 <getKeyInput2+0xac>)
 8000340:	2201      	movs	r2, #1
 8000342:	601a      	str	r2, [r3, #0]
		        		TimeOutForKeyPress = 100;
 8000344:	4b07      	ldr	r3, [pc, #28]	; (8000364 <getKeyInput2+0xa8>)
 8000346:	2264      	movs	r2, #100	; 0x64
 8000348:	601a      	str	r2, [r3, #0]
		}
 800034a:	bf00      	nop
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	20000014 	.word	0x20000014
 8000354:	20000018 	.word	0x20000018
 8000358:	20000010 	.word	0x20000010
 800035c:	40011000 	.word	0x40011000
 8000360:	2000001c 	.word	0x2000001c
 8000364:	20000030 	.word	0x20000030
 8000368:	20000068 	.word	0x20000068

0800036c <getKeyInput3>:

void getKeyInput3(){
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
	Key3Reg2 = Key3Reg1;
 8000370:	4b21      	ldr	r3, [pc, #132]	; (80003f8 <getKeyInput3+0x8c>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	4a21      	ldr	r2, [pc, #132]	; (80003fc <getKeyInput3+0x90>)
 8000376:	6013      	str	r3, [r2, #0]
		  Key3Reg1 = Key3Reg0;
 8000378:	4b21      	ldr	r3, [pc, #132]	; (8000400 <getKeyInput3+0x94>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4a1e      	ldr	r2, [pc, #120]	; (80003f8 <getKeyInput3+0x8c>)
 800037e:	6013      	str	r3, [r2, #0]
		  Key3Reg0 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15);
 8000380:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000384:	481f      	ldr	r0, [pc, #124]	; (8000404 <getKeyInput3+0x98>)
 8000386:	f001 fefb 	bl	8002180 <HAL_GPIO_ReadPin>
 800038a:	4603      	mov	r3, r0
 800038c:	461a      	mov	r2, r3
 800038e:	4b1c      	ldr	r3, [pc, #112]	; (8000400 <getKeyInput3+0x94>)
 8000390:	601a      	str	r2, [r3, #0]
		  if ((Key3Reg1 == Key3Reg0) && (Key3Reg1 == Key3Reg2)){
 8000392:	4b19      	ldr	r3, [pc, #100]	; (80003f8 <getKeyInput3+0x8c>)
 8000394:	681a      	ldr	r2, [r3, #0]
 8000396:	4b1a      	ldr	r3, [pc, #104]	; (8000400 <getKeyInput3+0x94>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	429a      	cmp	r2, r3
 800039c:	d129      	bne.n	80003f2 <getKeyInput3+0x86>
 800039e:	4b16      	ldr	r3, [pc, #88]	; (80003f8 <getKeyInput3+0x8c>)
 80003a0:	681a      	ldr	r2, [r3, #0]
 80003a2:	4b16      	ldr	r3, [pc, #88]	; (80003fc <getKeyInput3+0x90>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	429a      	cmp	r2, r3
 80003a8:	d123      	bne.n	80003f2 <getKeyInput3+0x86>
		    if (Key3Reg2 != Key3Reg3){
 80003aa:	4b14      	ldr	r3, [pc, #80]	; (80003fc <getKeyInput3+0x90>)
 80003ac:	681a      	ldr	r2, [r3, #0]
 80003ae:	4b16      	ldr	r3, [pc, #88]	; (8000408 <getKeyInput3+0x9c>)
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	429a      	cmp	r2, r3
 80003b4:	d00e      	beq.n	80003d4 <getKeyInput3+0x68>
		      Key3Reg3 = Key3Reg2;
 80003b6:	4b11      	ldr	r3, [pc, #68]	; (80003fc <getKeyInput3+0x90>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	4a13      	ldr	r2, [pc, #76]	; (8000408 <getKeyInput3+0x9c>)
 80003bc:	6013      	str	r3, [r2, #0]
		      if (Key3Reg3 == PRESSED_STATE){
 80003be:	4b12      	ldr	r3, [pc, #72]	; (8000408 <getKeyInput3+0x9c>)
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d115      	bne.n	80003f2 <getKeyInput3+0x86>
		        TimeOutForKeyPress = 300;
 80003c6:	4b11      	ldr	r3, [pc, #68]	; (800040c <getKeyInput3+0xa0>)
 80003c8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80003cc:	601a      	str	r2, [r3, #0]
		        subKeyProcess3();
 80003ce:	f7ff ff1b 	bl	8000208 <subKeyProcess3>
		    		        	button3_flag2 =1;
		    		        	TimeOutForKeyPress = 100;
		    		        }
		    		    }
		    		  }
		    		}
 80003d2:	e00e      	b.n	80003f2 <getKeyInput3+0x86>
		    		       TimeOutForKeyPress --;
 80003d4:	4b0d      	ldr	r3, [pc, #52]	; (800040c <getKeyInput3+0xa0>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	3b01      	subs	r3, #1
 80003da:	4a0c      	ldr	r2, [pc, #48]	; (800040c <getKeyInput3+0xa0>)
 80003dc:	6013      	str	r3, [r2, #0]
		    		        if (TimeOutForKeyPress == 0){
 80003de:	4b0b      	ldr	r3, [pc, #44]	; (800040c <getKeyInput3+0xa0>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d105      	bne.n	80003f2 <getKeyInput3+0x86>
		    		        	button3_flag2 =1;
 80003e6:	4b0a      	ldr	r3, [pc, #40]	; (8000410 <getKeyInput3+0xa4>)
 80003e8:	2201      	movs	r2, #1
 80003ea:	601a      	str	r2, [r3, #0]
		    		        	TimeOutForKeyPress = 100;
 80003ec:	4b07      	ldr	r3, [pc, #28]	; (800040c <getKeyInput3+0xa0>)
 80003ee:	2264      	movs	r2, #100	; 0x64
 80003f0:	601a      	str	r2, [r3, #0]
		    		}
 80003f2:	bf00      	nop
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop
 80003f8:	20000024 	.word	0x20000024
 80003fc:	20000028 	.word	0x20000028
 8000400:	20000020 	.word	0x20000020
 8000404:	40011000 	.word	0x40011000
 8000408:	2000002c 	.word	0x2000002c
 800040c:	20000030 	.word	0x20000030
 8000410:	2000006c 	.word	0x2000006c

08000414 <display7seg>:
 *  Created on: Nov 5, 2022
 *      Author: BOSCH - HCMUT
 */
#include "display7seg.h"
#include "main.h"
void display7seg (int num){
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	2b09      	cmp	r3, #9
 8000420:	f200 8180 	bhi.w	8000724 <display7seg+0x310>
 8000424:	a201      	add	r2, pc, #4	; (adr r2, 800042c <display7seg+0x18>)
 8000426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800042a:	bf00      	nop
 800042c:	08000455 	.word	0x08000455
 8000430:	0800049d 	.word	0x0800049d
 8000434:	080004e5 	.word	0x080004e5
 8000438:	0800052d 	.word	0x0800052d
 800043c:	08000575 	.word	0x08000575
 8000440:	080005bd 	.word	0x080005bd
 8000444:	08000605 	.word	0x08000605
 8000448:	0800064d 	.word	0x0800064d
 800044c:	08000695 	.word	0x08000695
 8000450:	080006dd 	.word	0x080006dd
switch (num){
case 0 : {
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_1 , GPIO_PIN_RESET );
 8000454:	2200      	movs	r2, #0
 8000456:	2102      	movs	r1, #2
 8000458:	48b5      	ldr	r0, [pc, #724]	; (8000730 <display7seg+0x31c>)
 800045a:	f001 fea8 	bl	80021ae <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_2 , GPIO_PIN_RESET );
 800045e:	2200      	movs	r2, #0
 8000460:	2104      	movs	r1, #4
 8000462:	48b3      	ldr	r0, [pc, #716]	; (8000730 <display7seg+0x31c>)
 8000464:	f001 fea3 	bl	80021ae <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_3 , GPIO_PIN_RESET );
 8000468:	2200      	movs	r2, #0
 800046a:	2108      	movs	r1, #8
 800046c:	48b0      	ldr	r0, [pc, #704]	; (8000730 <display7seg+0x31c>)
 800046e:	f001 fe9e 	bl	80021ae <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_4 , GPIO_PIN_RESET );
 8000472:	2200      	movs	r2, #0
 8000474:	2110      	movs	r1, #16
 8000476:	48ae      	ldr	r0, [pc, #696]	; (8000730 <display7seg+0x31c>)
 8000478:	f001 fe99 	bl	80021ae <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_5 , GPIO_PIN_RESET );
 800047c:	2200      	movs	r2, #0
 800047e:	2120      	movs	r1, #32
 8000480:	48ab      	ldr	r0, [pc, #684]	; (8000730 <display7seg+0x31c>)
 8000482:	f001 fe94 	bl	80021ae <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_6 , GPIO_PIN_RESET );
 8000486:	2200      	movs	r2, #0
 8000488:	2140      	movs	r1, #64	; 0x40
 800048a:	48a9      	ldr	r0, [pc, #676]	; (8000730 <display7seg+0x31c>)
 800048c:	f001 fe8f 	bl	80021ae <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_7 , GPIO_PIN_SET );
 8000490:	2201      	movs	r2, #1
 8000492:	2180      	movs	r1, #128	; 0x80
 8000494:	48a6      	ldr	r0, [pc, #664]	; (8000730 <display7seg+0x31c>)
 8000496:	f001 fe8a 	bl	80021ae <HAL_GPIO_WritePin>

break;
 800049a:	e144      	b.n	8000726 <display7seg+0x312>
}
case 1 :{
HAL_GPIO_WritePin (GPIOB, GPIO_PIN_1 , GPIO_PIN_SET );
 800049c:	2201      	movs	r2, #1
 800049e:	2102      	movs	r1, #2
 80004a0:	48a3      	ldr	r0, [pc, #652]	; (8000730 <display7seg+0x31c>)
 80004a2:	f001 fe84 	bl	80021ae <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_2 , GPIO_PIN_RESET );
 80004a6:	2200      	movs	r2, #0
 80004a8:	2104      	movs	r1, #4
 80004aa:	48a1      	ldr	r0, [pc, #644]	; (8000730 <display7seg+0x31c>)
 80004ac:	f001 fe7f 	bl	80021ae <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_3 , GPIO_PIN_RESET );
 80004b0:	2200      	movs	r2, #0
 80004b2:	2108      	movs	r1, #8
 80004b4:	489e      	ldr	r0, [pc, #632]	; (8000730 <display7seg+0x31c>)
 80004b6:	f001 fe7a 	bl	80021ae <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_4 , GPIO_PIN_SET );
 80004ba:	2201      	movs	r2, #1
 80004bc:	2110      	movs	r1, #16
 80004be:	489c      	ldr	r0, [pc, #624]	; (8000730 <display7seg+0x31c>)
 80004c0:	f001 fe75 	bl	80021ae <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_5 , GPIO_PIN_SET );
 80004c4:	2201      	movs	r2, #1
 80004c6:	2120      	movs	r1, #32
 80004c8:	4899      	ldr	r0, [pc, #612]	; (8000730 <display7seg+0x31c>)
 80004ca:	f001 fe70 	bl	80021ae <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_6 , GPIO_PIN_SET );
 80004ce:	2201      	movs	r2, #1
 80004d0:	2140      	movs	r1, #64	; 0x40
 80004d2:	4897      	ldr	r0, [pc, #604]	; (8000730 <display7seg+0x31c>)
 80004d4:	f001 fe6b 	bl	80021ae <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_7 , GPIO_PIN_SET );
 80004d8:	2201      	movs	r2, #1
 80004da:	2180      	movs	r1, #128	; 0x80
 80004dc:	4894      	ldr	r0, [pc, #592]	; (8000730 <display7seg+0x31c>)
 80004de:	f001 fe66 	bl	80021ae <HAL_GPIO_WritePin>

break;
 80004e2:	e120      	b.n	8000726 <display7seg+0x312>
}
case 2  :{
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_1 , GPIO_PIN_RESET );
 80004e4:	2200      	movs	r2, #0
 80004e6:	2102      	movs	r1, #2
 80004e8:	4891      	ldr	r0, [pc, #580]	; (8000730 <display7seg+0x31c>)
 80004ea:	f001 fe60 	bl	80021ae <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_2 , GPIO_PIN_RESET );
 80004ee:	2200      	movs	r2, #0
 80004f0:	2104      	movs	r1, #4
 80004f2:	488f      	ldr	r0, [pc, #572]	; (8000730 <display7seg+0x31c>)
 80004f4:	f001 fe5b 	bl	80021ae <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_3 , GPIO_PIN_SET );
 80004f8:	2201      	movs	r2, #1
 80004fa:	2108      	movs	r1, #8
 80004fc:	488c      	ldr	r0, [pc, #560]	; (8000730 <display7seg+0x31c>)
 80004fe:	f001 fe56 	bl	80021ae <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_4 , GPIO_PIN_RESET );
 8000502:	2200      	movs	r2, #0
 8000504:	2110      	movs	r1, #16
 8000506:	488a      	ldr	r0, [pc, #552]	; (8000730 <display7seg+0x31c>)
 8000508:	f001 fe51 	bl	80021ae <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_5 , GPIO_PIN_RESET );
 800050c:	2200      	movs	r2, #0
 800050e:	2120      	movs	r1, #32
 8000510:	4887      	ldr	r0, [pc, #540]	; (8000730 <display7seg+0x31c>)
 8000512:	f001 fe4c 	bl	80021ae <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_6 , GPIO_PIN_SET );
 8000516:	2201      	movs	r2, #1
 8000518:	2140      	movs	r1, #64	; 0x40
 800051a:	4885      	ldr	r0, [pc, #532]	; (8000730 <display7seg+0x31c>)
 800051c:	f001 fe47 	bl	80021ae <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_7 , GPIO_PIN_RESET );
 8000520:	2200      	movs	r2, #0
 8000522:	2180      	movs	r1, #128	; 0x80
 8000524:	4882      	ldr	r0, [pc, #520]	; (8000730 <display7seg+0x31c>)
 8000526:	f001 fe42 	bl	80021ae <HAL_GPIO_WritePin>

break;}
 800052a:	e0fc      	b.n	8000726 <display7seg+0x312>
case 3 :{
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_1 , GPIO_PIN_RESET );
 800052c:	2200      	movs	r2, #0
 800052e:	2102      	movs	r1, #2
 8000530:	487f      	ldr	r0, [pc, #508]	; (8000730 <display7seg+0x31c>)
 8000532:	f001 fe3c 	bl	80021ae <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_2 , GPIO_PIN_RESET );
 8000536:	2200      	movs	r2, #0
 8000538:	2104      	movs	r1, #4
 800053a:	487d      	ldr	r0, [pc, #500]	; (8000730 <display7seg+0x31c>)
 800053c:	f001 fe37 	bl	80021ae <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_3 , GPIO_PIN_RESET );
 8000540:	2200      	movs	r2, #0
 8000542:	2108      	movs	r1, #8
 8000544:	487a      	ldr	r0, [pc, #488]	; (8000730 <display7seg+0x31c>)
 8000546:	f001 fe32 	bl	80021ae <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_4 , GPIO_PIN_RESET );
 800054a:	2200      	movs	r2, #0
 800054c:	2110      	movs	r1, #16
 800054e:	4878      	ldr	r0, [pc, #480]	; (8000730 <display7seg+0x31c>)
 8000550:	f001 fe2d 	bl	80021ae <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_5 , GPIO_PIN_SET );
 8000554:	2201      	movs	r2, #1
 8000556:	2120      	movs	r1, #32
 8000558:	4875      	ldr	r0, [pc, #468]	; (8000730 <display7seg+0x31c>)
 800055a:	f001 fe28 	bl	80021ae <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_6 , GPIO_PIN_SET );
 800055e:	2201      	movs	r2, #1
 8000560:	2140      	movs	r1, #64	; 0x40
 8000562:	4873      	ldr	r0, [pc, #460]	; (8000730 <display7seg+0x31c>)
 8000564:	f001 fe23 	bl	80021ae <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_7 , GPIO_PIN_RESET );
 8000568:	2200      	movs	r2, #0
 800056a:	2180      	movs	r1, #128	; 0x80
 800056c:	4870      	ldr	r0, [pc, #448]	; (8000730 <display7seg+0x31c>)
 800056e:	f001 fe1e 	bl	80021ae <HAL_GPIO_WritePin>

break;}
 8000572:	e0d8      	b.n	8000726 <display7seg+0x312>
case 4  :{
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_1 , GPIO_PIN_SET );
 8000574:	2201      	movs	r2, #1
 8000576:	2102      	movs	r1, #2
 8000578:	486d      	ldr	r0, [pc, #436]	; (8000730 <display7seg+0x31c>)
 800057a:	f001 fe18 	bl	80021ae <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_2 , GPIO_PIN_RESET );
 800057e:	2200      	movs	r2, #0
 8000580:	2104      	movs	r1, #4
 8000582:	486b      	ldr	r0, [pc, #428]	; (8000730 <display7seg+0x31c>)
 8000584:	f001 fe13 	bl	80021ae <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_3 , GPIO_PIN_RESET );
 8000588:	2200      	movs	r2, #0
 800058a:	2108      	movs	r1, #8
 800058c:	4868      	ldr	r0, [pc, #416]	; (8000730 <display7seg+0x31c>)
 800058e:	f001 fe0e 	bl	80021ae <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_4 , GPIO_PIN_SET );
 8000592:	2201      	movs	r2, #1
 8000594:	2110      	movs	r1, #16
 8000596:	4866      	ldr	r0, [pc, #408]	; (8000730 <display7seg+0x31c>)
 8000598:	f001 fe09 	bl	80021ae <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_5 , GPIO_PIN_SET );
 800059c:	2201      	movs	r2, #1
 800059e:	2120      	movs	r1, #32
 80005a0:	4863      	ldr	r0, [pc, #396]	; (8000730 <display7seg+0x31c>)
 80005a2:	f001 fe04 	bl	80021ae <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_6 , GPIO_PIN_RESET );
 80005a6:	2200      	movs	r2, #0
 80005a8:	2140      	movs	r1, #64	; 0x40
 80005aa:	4861      	ldr	r0, [pc, #388]	; (8000730 <display7seg+0x31c>)
 80005ac:	f001 fdff 	bl	80021ae <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_7 , GPIO_PIN_RESET );
 80005b0:	2200      	movs	r2, #0
 80005b2:	2180      	movs	r1, #128	; 0x80
 80005b4:	485e      	ldr	r0, [pc, #376]	; (8000730 <display7seg+0x31c>)
 80005b6:	f001 fdfa 	bl	80021ae <HAL_GPIO_WritePin>

break;}
 80005ba:	e0b4      	b.n	8000726 <display7seg+0x312>
case 5  :{
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_1 , GPIO_PIN_RESET );
 80005bc:	2200      	movs	r2, #0
 80005be:	2102      	movs	r1, #2
 80005c0:	485b      	ldr	r0, [pc, #364]	; (8000730 <display7seg+0x31c>)
 80005c2:	f001 fdf4 	bl	80021ae <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_2 , GPIO_PIN_SET );
 80005c6:	2201      	movs	r2, #1
 80005c8:	2104      	movs	r1, #4
 80005ca:	4859      	ldr	r0, [pc, #356]	; (8000730 <display7seg+0x31c>)
 80005cc:	f001 fdef 	bl	80021ae <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_3 , GPIO_PIN_RESET );
 80005d0:	2200      	movs	r2, #0
 80005d2:	2108      	movs	r1, #8
 80005d4:	4856      	ldr	r0, [pc, #344]	; (8000730 <display7seg+0x31c>)
 80005d6:	f001 fdea 	bl	80021ae <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_4 , GPIO_PIN_RESET );
 80005da:	2200      	movs	r2, #0
 80005dc:	2110      	movs	r1, #16
 80005de:	4854      	ldr	r0, [pc, #336]	; (8000730 <display7seg+0x31c>)
 80005e0:	f001 fde5 	bl	80021ae <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_5 , GPIO_PIN_SET );
 80005e4:	2201      	movs	r2, #1
 80005e6:	2120      	movs	r1, #32
 80005e8:	4851      	ldr	r0, [pc, #324]	; (8000730 <display7seg+0x31c>)
 80005ea:	f001 fde0 	bl	80021ae <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_6 , GPIO_PIN_RESET );
 80005ee:	2200      	movs	r2, #0
 80005f0:	2140      	movs	r1, #64	; 0x40
 80005f2:	484f      	ldr	r0, [pc, #316]	; (8000730 <display7seg+0x31c>)
 80005f4:	f001 fddb 	bl	80021ae <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_7 , GPIO_PIN_RESET );
 80005f8:	2200      	movs	r2, #0
 80005fa:	2180      	movs	r1, #128	; 0x80
 80005fc:	484c      	ldr	r0, [pc, #304]	; (8000730 <display7seg+0x31c>)
 80005fe:	f001 fdd6 	bl	80021ae <HAL_GPIO_WritePin>


break;}
 8000602:	e090      	b.n	8000726 <display7seg+0x312>
case 6  :{
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_1 , GPIO_PIN_RESET );
 8000604:	2200      	movs	r2, #0
 8000606:	2102      	movs	r1, #2
 8000608:	4849      	ldr	r0, [pc, #292]	; (8000730 <display7seg+0x31c>)
 800060a:	f001 fdd0 	bl	80021ae <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_2 , GPIO_PIN_SET );
 800060e:	2201      	movs	r2, #1
 8000610:	2104      	movs	r1, #4
 8000612:	4847      	ldr	r0, [pc, #284]	; (8000730 <display7seg+0x31c>)
 8000614:	f001 fdcb 	bl	80021ae <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_3 , GPIO_PIN_RESET );
 8000618:	2200      	movs	r2, #0
 800061a:	2108      	movs	r1, #8
 800061c:	4844      	ldr	r0, [pc, #272]	; (8000730 <display7seg+0x31c>)
 800061e:	f001 fdc6 	bl	80021ae <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_4 , GPIO_PIN_RESET );
 8000622:	2200      	movs	r2, #0
 8000624:	2110      	movs	r1, #16
 8000626:	4842      	ldr	r0, [pc, #264]	; (8000730 <display7seg+0x31c>)
 8000628:	f001 fdc1 	bl	80021ae <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_5 , GPIO_PIN_RESET );
 800062c:	2200      	movs	r2, #0
 800062e:	2120      	movs	r1, #32
 8000630:	483f      	ldr	r0, [pc, #252]	; (8000730 <display7seg+0x31c>)
 8000632:	f001 fdbc 	bl	80021ae <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_6 , GPIO_PIN_RESET );
 8000636:	2200      	movs	r2, #0
 8000638:	2140      	movs	r1, #64	; 0x40
 800063a:	483d      	ldr	r0, [pc, #244]	; (8000730 <display7seg+0x31c>)
 800063c:	f001 fdb7 	bl	80021ae <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_7 , GPIO_PIN_RESET );
 8000640:	2200      	movs	r2, #0
 8000642:	2180      	movs	r1, #128	; 0x80
 8000644:	483a      	ldr	r0, [pc, #232]	; (8000730 <display7seg+0x31c>)
 8000646:	f001 fdb2 	bl	80021ae <HAL_GPIO_WritePin>

break;}
 800064a:	e06c      	b.n	8000726 <display7seg+0x312>
case 7  :{
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_1 , GPIO_PIN_RESET );
 800064c:	2200      	movs	r2, #0
 800064e:	2102      	movs	r1, #2
 8000650:	4837      	ldr	r0, [pc, #220]	; (8000730 <display7seg+0x31c>)
 8000652:	f001 fdac 	bl	80021ae <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_2 , GPIO_PIN_RESET );
 8000656:	2200      	movs	r2, #0
 8000658:	2104      	movs	r1, #4
 800065a:	4835      	ldr	r0, [pc, #212]	; (8000730 <display7seg+0x31c>)
 800065c:	f001 fda7 	bl	80021ae <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_3 , GPIO_PIN_RESET );
 8000660:	2200      	movs	r2, #0
 8000662:	2108      	movs	r1, #8
 8000664:	4832      	ldr	r0, [pc, #200]	; (8000730 <display7seg+0x31c>)
 8000666:	f001 fda2 	bl	80021ae <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_4 , GPIO_PIN_SET );
 800066a:	2201      	movs	r2, #1
 800066c:	2110      	movs	r1, #16
 800066e:	4830      	ldr	r0, [pc, #192]	; (8000730 <display7seg+0x31c>)
 8000670:	f001 fd9d 	bl	80021ae <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_5 , GPIO_PIN_SET );
 8000674:	2201      	movs	r2, #1
 8000676:	2120      	movs	r1, #32
 8000678:	482d      	ldr	r0, [pc, #180]	; (8000730 <display7seg+0x31c>)
 800067a:	f001 fd98 	bl	80021ae <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_6 , GPIO_PIN_SET );
 800067e:	2201      	movs	r2, #1
 8000680:	2140      	movs	r1, #64	; 0x40
 8000682:	482b      	ldr	r0, [pc, #172]	; (8000730 <display7seg+0x31c>)
 8000684:	f001 fd93 	bl	80021ae <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_7 , GPIO_PIN_SET );
 8000688:	2201      	movs	r2, #1
 800068a:	2180      	movs	r1, #128	; 0x80
 800068c:	4828      	ldr	r0, [pc, #160]	; (8000730 <display7seg+0x31c>)
 800068e:	f001 fd8e 	bl	80021ae <HAL_GPIO_WritePin>

break;}
 8000692:	e048      	b.n	8000726 <display7seg+0x312>
case 8  :{
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_1 , GPIO_PIN_RESET );
 8000694:	2200      	movs	r2, #0
 8000696:	2102      	movs	r1, #2
 8000698:	4825      	ldr	r0, [pc, #148]	; (8000730 <display7seg+0x31c>)
 800069a:	f001 fd88 	bl	80021ae <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_2 , GPIO_PIN_RESET );
 800069e:	2200      	movs	r2, #0
 80006a0:	2104      	movs	r1, #4
 80006a2:	4823      	ldr	r0, [pc, #140]	; (8000730 <display7seg+0x31c>)
 80006a4:	f001 fd83 	bl	80021ae <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_3 , GPIO_PIN_RESET );
 80006a8:	2200      	movs	r2, #0
 80006aa:	2108      	movs	r1, #8
 80006ac:	4820      	ldr	r0, [pc, #128]	; (8000730 <display7seg+0x31c>)
 80006ae:	f001 fd7e 	bl	80021ae <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_4 , GPIO_PIN_RESET );
 80006b2:	2200      	movs	r2, #0
 80006b4:	2110      	movs	r1, #16
 80006b6:	481e      	ldr	r0, [pc, #120]	; (8000730 <display7seg+0x31c>)
 80006b8:	f001 fd79 	bl	80021ae <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_5 , GPIO_PIN_RESET );
 80006bc:	2200      	movs	r2, #0
 80006be:	2120      	movs	r1, #32
 80006c0:	481b      	ldr	r0, [pc, #108]	; (8000730 <display7seg+0x31c>)
 80006c2:	f001 fd74 	bl	80021ae <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_6 , GPIO_PIN_RESET );
 80006c6:	2200      	movs	r2, #0
 80006c8:	2140      	movs	r1, #64	; 0x40
 80006ca:	4819      	ldr	r0, [pc, #100]	; (8000730 <display7seg+0x31c>)
 80006cc:	f001 fd6f 	bl	80021ae <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_7 , GPIO_PIN_RESET );
 80006d0:	2200      	movs	r2, #0
 80006d2:	2180      	movs	r1, #128	; 0x80
 80006d4:	4816      	ldr	r0, [pc, #88]	; (8000730 <display7seg+0x31c>)
 80006d6:	f001 fd6a 	bl	80021ae <HAL_GPIO_WritePin>

break;}
 80006da:	e024      	b.n	8000726 <display7seg+0x312>
case 9 :{
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_1 , GPIO_PIN_RESET );
 80006dc:	2200      	movs	r2, #0
 80006de:	2102      	movs	r1, #2
 80006e0:	4813      	ldr	r0, [pc, #76]	; (8000730 <display7seg+0x31c>)
 80006e2:	f001 fd64 	bl	80021ae <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_2 , GPIO_PIN_RESET );
 80006e6:	2200      	movs	r2, #0
 80006e8:	2104      	movs	r1, #4
 80006ea:	4811      	ldr	r0, [pc, #68]	; (8000730 <display7seg+0x31c>)
 80006ec:	f001 fd5f 	bl	80021ae <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_3 , GPIO_PIN_RESET );
 80006f0:	2200      	movs	r2, #0
 80006f2:	2108      	movs	r1, #8
 80006f4:	480e      	ldr	r0, [pc, #56]	; (8000730 <display7seg+0x31c>)
 80006f6:	f001 fd5a 	bl	80021ae <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_4 , GPIO_PIN_RESET );
 80006fa:	2200      	movs	r2, #0
 80006fc:	2110      	movs	r1, #16
 80006fe:	480c      	ldr	r0, [pc, #48]	; (8000730 <display7seg+0x31c>)
 8000700:	f001 fd55 	bl	80021ae <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_5 , GPIO_PIN_SET );
 8000704:	2201      	movs	r2, #1
 8000706:	2120      	movs	r1, #32
 8000708:	4809      	ldr	r0, [pc, #36]	; (8000730 <display7seg+0x31c>)
 800070a:	f001 fd50 	bl	80021ae <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_6 , GPIO_PIN_RESET );
 800070e:	2200      	movs	r2, #0
 8000710:	2140      	movs	r1, #64	; 0x40
 8000712:	4807      	ldr	r0, [pc, #28]	; (8000730 <display7seg+0x31c>)
 8000714:	f001 fd4b 	bl	80021ae <HAL_GPIO_WritePin>
HAL_GPIO_WritePin (GPIOB , GPIO_PIN_7 , GPIO_PIN_RESET );
 8000718:	2200      	movs	r2, #0
 800071a:	2180      	movs	r1, #128	; 0x80
 800071c:	4804      	ldr	r0, [pc, #16]	; (8000730 <display7seg+0x31c>)
 800071e:	f001 fd46 	bl	80021ae <HAL_GPIO_WritePin>


break;}
 8000722:	e000      	b.n	8000726 <display7seg+0x312>
default :{break;}
 8000724:	bf00      	nop

}
}
 8000726:	bf00      	nop
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40010c00 	.word	0x40010c00

08000734 <fsm_automatic_run>:
#include "fsm_automatic.h"
#include "global.h"
#include "button.h"
#include "main.h"
#include "display7seg.h"
void fsm_automatic_run(){
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
switch(status){
 8000738:	4ba2      	ldr	r3, [pc, #648]	; (80009c4 <fsm_automatic_run+0x290>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	3b01      	subs	r3, #1
 800073e:	2b3a      	cmp	r3, #58	; 0x3a
 8000740:	f200 8269 	bhi.w	8000c16 <fsm_automatic_run+0x4e2>
 8000744:	a201      	add	r2, pc, #4	; (adr r2, 800074c <fsm_automatic_run+0x18>)
 8000746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800074a:	bf00      	nop
 800074c:	08000839 	.word	0x08000839
 8000750:	08000c17 	.word	0x08000c17
 8000754:	08000c17 	.word	0x08000c17
 8000758:	08000c17 	.word	0x08000c17
 800075c:	08000c17 	.word	0x08000c17
 8000760:	08000c17 	.word	0x08000c17
 8000764:	08000c17 	.word	0x08000c17
 8000768:	08000c17 	.word	0x08000c17
 800076c:	08000c17 	.word	0x08000c17
 8000770:	08000c17 	.word	0x08000c17
 8000774:	08000c17 	.word	0x08000c17
 8000778:	08000c17 	.word	0x08000c17
 800077c:	08000c17 	.word	0x08000c17
 8000780:	08000c17 	.word	0x08000c17
 8000784:	08000c17 	.word	0x08000c17
 8000788:	08000c17 	.word	0x08000c17
 800078c:	08000c17 	.word	0x08000c17
 8000790:	08000c17 	.word	0x08000c17
 8000794:	08000c17 	.word	0x08000c17
 8000798:	08000c17 	.word	0x08000c17
 800079c:	08000c17 	.word	0x08000c17
 80007a0:	08000c17 	.word	0x08000c17
 80007a4:	08000c17 	.word	0x08000c17
 80007a8:	08000c17 	.word	0x08000c17
 80007ac:	08000c17 	.word	0x08000c17
 80007b0:	08000c17 	.word	0x08000c17
 80007b4:	08000c17 	.word	0x08000c17
 80007b8:	08000c17 	.word	0x08000c17
 80007bc:	08000c17 	.word	0x08000c17
 80007c0:	08000c17 	.word	0x08000c17
 80007c4:	08000c17 	.word	0x08000c17
 80007c8:	08000c17 	.word	0x08000c17
 80007cc:	08000c17 	.word	0x08000c17
 80007d0:	08000c17 	.word	0x08000c17
 80007d4:	08000c17 	.word	0x08000c17
 80007d8:	08000c17 	.word	0x08000c17
 80007dc:	08000c17 	.word	0x08000c17
 80007e0:	08000c17 	.word	0x08000c17
 80007e4:	08000c17 	.word	0x08000c17
 80007e8:	08000c17 	.word	0x08000c17
 80007ec:	08000c17 	.word	0x08000c17
 80007f0:	08000c17 	.word	0x08000c17
 80007f4:	08000c17 	.word	0x08000c17
 80007f8:	08000c17 	.word	0x08000c17
 80007fc:	08000c17 	.word	0x08000c17
 8000800:	08000c17 	.word	0x08000c17
 8000804:	08000c17 	.word	0x08000c17
 8000808:	08000c17 	.word	0x08000c17
 800080c:	08000c17 	.word	0x08000c17
 8000810:	08000855 	.word	0x08000855
 8000814:	080008a9 	.word	0x080008a9
 8000818:	08000909 	.word	0x08000909
 800081c:	08000965 	.word	0x08000965
 8000820:	080009dd 	.word	0x080009dd
 8000824:	08000a3d 	.word	0x08000a3d
 8000828:	08000a9d 	.word	0x08000a9d
 800082c:	08000afd 	.word	0x08000afd
 8000830:	08000b5b 	.word	0x08000b5b
 8000834:	08000bb9 	.word	0x08000bb9
case INIT :
display7seg(0);
 8000838:	2000      	movs	r0, #0
 800083a:	f7ff fdeb 	bl	8000414 <display7seg>
status = MAN_INC0;
 800083e:	4b61      	ldr	r3, [pc, #388]	; (80009c4 <fsm_automatic_run+0x290>)
 8000840:	220c      	movs	r2, #12
 8000842:	601a      	str	r2, [r3, #0]
setTimer2(1000);
 8000844:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000848:	f001 f87e 	bl	8001948 <setTimer2>
ledstatus = LED_ON;
 800084c:	4b5e      	ldr	r3, [pc, #376]	; (80009c8 <fsm_automatic_run+0x294>)
 800084e:	2246      	movs	r2, #70	; 0x46
 8000850:	601a      	str	r2, [r3, #0]
break;
 8000852:	e1f3      	b.n	8000c3c <fsm_automatic_run+0x508>
case AUTO_0:
	if (button1_flag ==1 ){
 8000854:	4b5d      	ldr	r3, [pc, #372]	; (80009cc <fsm_automatic_run+0x298>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	2b01      	cmp	r3, #1
 800085a:	d105      	bne.n	8000868 <fsm_automatic_run+0x134>
	button1_flag = 0;
 800085c:	4b5b      	ldr	r3, [pc, #364]	; (80009cc <fsm_automatic_run+0x298>)
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
	status = INIT;
 8000862:	4b58      	ldr	r3, [pc, #352]	; (80009c4 <fsm_automatic_run+0x290>)
 8000864:	2201      	movs	r2, #1
 8000866:	601a      	str	r2, [r3, #0]
	}
if (timer_flag2 ==1 ){
 8000868:	4b59      	ldr	r3, [pc, #356]	; (80009d0 <fsm_automatic_run+0x29c>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	2b01      	cmp	r3, #1
 800086e:	d105      	bne.n	800087c <fsm_automatic_run+0x148>
timer_flag2 =0;
 8000870:	4b57      	ldr	r3, [pc, #348]	; (80009d0 <fsm_automatic_run+0x29c>)
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
display7seg(0);
 8000876:	2000      	movs	r0, #0
 8000878:	f7ff fdcc 	bl	8000414 <display7seg>
}
if (button2_flag == 1){
 800087c:	4b55      	ldr	r3, [pc, #340]	; (80009d4 <fsm_automatic_run+0x2a0>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	2b01      	cmp	r3, #1
 8000882:	d105      	bne.n	8000890 <fsm_automatic_run+0x15c>
button2_flag = 0;
 8000884:	4b53      	ldr	r3, [pc, #332]	; (80009d4 <fsm_automatic_run+0x2a0>)
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
status = MAN_INC1;
 800088a:	4b4e      	ldr	r3, [pc, #312]	; (80009c4 <fsm_automatic_run+0x290>)
 800088c:	220d      	movs	r2, #13
 800088e:	601a      	str	r2, [r3, #0]
}
if (button3_flag == 1){
 8000890:	4b51      	ldr	r3, [pc, #324]	; (80009d8 <fsm_automatic_run+0x2a4>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	2b01      	cmp	r3, #1
 8000896:	f040 81c0 	bne.w	8000c1a <fsm_automatic_run+0x4e6>
button3_flag = 0;
 800089a:	4b4f      	ldr	r3, [pc, #316]	; (80009d8 <fsm_automatic_run+0x2a4>)
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
status = MAN_INC0;
 80008a0:	4b48      	ldr	r3, [pc, #288]	; (80009c4 <fsm_automatic_run+0x290>)
 80008a2:	220c      	movs	r2, #12
 80008a4:	601a      	str	r2, [r3, #0]
}
break;
 80008a6:	e1b8      	b.n	8000c1a <fsm_automatic_run+0x4e6>
case AUTO_1:
//TOD0
	if (button1_flag ==1 ){
 80008a8:	4b48      	ldr	r3, [pc, #288]	; (80009cc <fsm_automatic_run+0x298>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	2b01      	cmp	r3, #1
 80008ae:	d105      	bne.n	80008bc <fsm_automatic_run+0x188>
		button1_flag = 0;
 80008b0:	4b46      	ldr	r3, [pc, #280]	; (80009cc <fsm_automatic_run+0x298>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
		status = INIT;
 80008b6:	4b43      	ldr	r3, [pc, #268]	; (80009c4 <fsm_automatic_run+0x290>)
 80008b8:	2201      	movs	r2, #1
 80008ba:	601a      	str	r2, [r3, #0]
		}
if (timer_flag2 == 1){
 80008bc:	4b44      	ldr	r3, [pc, #272]	; (80009d0 <fsm_automatic_run+0x29c>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	2b01      	cmp	r3, #1
 80008c2:	d10b      	bne.n	80008dc <fsm_automatic_run+0x1a8>
timer_flag2 =0;
 80008c4:	4b42      	ldr	r3, [pc, #264]	; (80009d0 <fsm_automatic_run+0x29c>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
display7seg(1);
 80008ca:	2001      	movs	r0, #1
 80008cc:	f7ff fda2 	bl	8000414 <display7seg>
status = AUTO_0;
 80008d0:	4b3c      	ldr	r3, [pc, #240]	; (80009c4 <fsm_automatic_run+0x290>)
 80008d2:	2232      	movs	r2, #50	; 0x32
 80008d4:	601a      	str	r2, [r3, #0]
setTimer2(100);
 80008d6:	2064      	movs	r0, #100	; 0x64
 80008d8:	f001 f836 	bl	8001948 <setTimer2>
}
if (button2_flag == 1){
 80008dc:	4b3d      	ldr	r3, [pc, #244]	; (80009d4 <fsm_automatic_run+0x2a0>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	2b01      	cmp	r3, #1
 80008e2:	d105      	bne.n	80008f0 <fsm_automatic_run+0x1bc>
button2_flag = 0;
 80008e4:	4b3b      	ldr	r3, [pc, #236]	; (80009d4 <fsm_automatic_run+0x2a0>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
status = MAN_INC2;
 80008ea:	4b36      	ldr	r3, [pc, #216]	; (80009c4 <fsm_automatic_run+0x290>)
 80008ec:	220e      	movs	r2, #14
 80008ee:	601a      	str	r2, [r3, #0]
}
if (button3_flag == 1){
 80008f0:	4b39      	ldr	r3, [pc, #228]	; (80009d8 <fsm_automatic_run+0x2a4>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	2b01      	cmp	r3, #1
 80008f6:	f040 8192 	bne.w	8000c1e <fsm_automatic_run+0x4ea>
button3_flag = 0;
 80008fa:	4b37      	ldr	r3, [pc, #220]	; (80009d8 <fsm_automatic_run+0x2a4>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
status = MAN_INC1;
 8000900:	4b30      	ldr	r3, [pc, #192]	; (80009c4 <fsm_automatic_run+0x290>)
 8000902:	220d      	movs	r2, #13
 8000904:	601a      	str	r2, [r3, #0]
}
break;
 8000906:	e18a      	b.n	8000c1e <fsm_automatic_run+0x4ea>
case AUTO_2:
	if (button1_flag ==1 ){
 8000908:	4b30      	ldr	r3, [pc, #192]	; (80009cc <fsm_automatic_run+0x298>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	2b01      	cmp	r3, #1
 800090e:	d105      	bne.n	800091c <fsm_automatic_run+0x1e8>
		button1_flag = 0;
 8000910:	4b2e      	ldr	r3, [pc, #184]	; (80009cc <fsm_automatic_run+0x298>)
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
		status = INIT;
 8000916:	4b2b      	ldr	r3, [pc, #172]	; (80009c4 <fsm_automatic_run+0x290>)
 8000918:	2201      	movs	r2, #1
 800091a:	601a      	str	r2, [r3, #0]
		}
if (timer_flag2 == 1){
 800091c:	4b2c      	ldr	r3, [pc, #176]	; (80009d0 <fsm_automatic_run+0x29c>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	2b01      	cmp	r3, #1
 8000922:	d10b      	bne.n	800093c <fsm_automatic_run+0x208>
timer_flag2 =0;
 8000924:	4b2a      	ldr	r3, [pc, #168]	; (80009d0 <fsm_automatic_run+0x29c>)
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
display7seg(2);
 800092a:	2002      	movs	r0, #2
 800092c:	f7ff fd72 	bl	8000414 <display7seg>
status = AUTO_1;
 8000930:	4b24      	ldr	r3, [pc, #144]	; (80009c4 <fsm_automatic_run+0x290>)
 8000932:	2233      	movs	r2, #51	; 0x33
 8000934:	601a      	str	r2, [r3, #0]
setTimer2(100);
 8000936:	2064      	movs	r0, #100	; 0x64
 8000938:	f001 f806 	bl	8001948 <setTimer2>
}
if (button2_flag == 1){
 800093c:	4b25      	ldr	r3, [pc, #148]	; (80009d4 <fsm_automatic_run+0x2a0>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	2b01      	cmp	r3, #1
 8000942:	d105      	bne.n	8000950 <fsm_automatic_run+0x21c>
button2_flag = 0;
 8000944:	4b23      	ldr	r3, [pc, #140]	; (80009d4 <fsm_automatic_run+0x2a0>)
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
status = MAN_INC3;
 800094a:	4b1e      	ldr	r3, [pc, #120]	; (80009c4 <fsm_automatic_run+0x290>)
 800094c:	220f      	movs	r2, #15
 800094e:	601a      	str	r2, [r3, #0]
}
if (button3_flag == 1){
 8000950:	4b21      	ldr	r3, [pc, #132]	; (80009d8 <fsm_automatic_run+0x2a4>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	2b01      	cmp	r3, #1
 8000956:	d105      	bne.n	8000964 <fsm_automatic_run+0x230>
button3_flag = 0;
 8000958:	4b1f      	ldr	r3, [pc, #124]	; (80009d8 <fsm_automatic_run+0x2a4>)
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
status = MAN_INC2;
 800095e:	4b19      	ldr	r3, [pc, #100]	; (80009c4 <fsm_automatic_run+0x290>)
 8000960:	220e      	movs	r2, #14
 8000962:	601a      	str	r2, [r3, #0]
}
case AUTO_3:
	if (button1_flag ==1 ){
 8000964:	4b19      	ldr	r3, [pc, #100]	; (80009cc <fsm_automatic_run+0x298>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	2b01      	cmp	r3, #1
 800096a:	d105      	bne.n	8000978 <fsm_automatic_run+0x244>
		button1_flag = 0;
 800096c:	4b17      	ldr	r3, [pc, #92]	; (80009cc <fsm_automatic_run+0x298>)
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
		status = INIT;
 8000972:	4b14      	ldr	r3, [pc, #80]	; (80009c4 <fsm_automatic_run+0x290>)
 8000974:	2201      	movs	r2, #1
 8000976:	601a      	str	r2, [r3, #0]
		}
if (timer_flag2 == 1){
 8000978:	4b15      	ldr	r3, [pc, #84]	; (80009d0 <fsm_automatic_run+0x29c>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	2b01      	cmp	r3, #1
 800097e:	d10b      	bne.n	8000998 <fsm_automatic_run+0x264>
timer_flag2 =0;
 8000980:	4b13      	ldr	r3, [pc, #76]	; (80009d0 <fsm_automatic_run+0x29c>)
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
display7seg(3);
 8000986:	2003      	movs	r0, #3
 8000988:	f7ff fd44 	bl	8000414 <display7seg>
status = AUTO_2;
 800098c:	4b0d      	ldr	r3, [pc, #52]	; (80009c4 <fsm_automatic_run+0x290>)
 800098e:	2234      	movs	r2, #52	; 0x34
 8000990:	601a      	str	r2, [r3, #0]
setTimer2(100);
 8000992:	2064      	movs	r0, #100	; 0x64
 8000994:	f000 ffd8 	bl	8001948 <setTimer2>
}
if (button2_flag == 1){
 8000998:	4b0e      	ldr	r3, [pc, #56]	; (80009d4 <fsm_automatic_run+0x2a0>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	2b01      	cmp	r3, #1
 800099e:	d105      	bne.n	80009ac <fsm_automatic_run+0x278>
button2_flag = 0;
 80009a0:	4b0c      	ldr	r3, [pc, #48]	; (80009d4 <fsm_automatic_run+0x2a0>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
status = MAN_INC4;
 80009a6:	4b07      	ldr	r3, [pc, #28]	; (80009c4 <fsm_automatic_run+0x290>)
 80009a8:	2210      	movs	r2, #16
 80009aa:	601a      	str	r2, [r3, #0]
}
if (button3_flag == 1){
 80009ac:	4b0a      	ldr	r3, [pc, #40]	; (80009d8 <fsm_automatic_run+0x2a4>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	2b01      	cmp	r3, #1
 80009b2:	f040 8136 	bne.w	8000c22 <fsm_automatic_run+0x4ee>
button3_flag = 0;
 80009b6:	4b08      	ldr	r3, [pc, #32]	; (80009d8 <fsm_automatic_run+0x2a4>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
status = MAN_INC3;
 80009bc:	4b01      	ldr	r3, [pc, #4]	; (80009c4 <fsm_automatic_run+0x290>)
 80009be:	220f      	movs	r2, #15
 80009c0:	601a      	str	r2, [r3, #0]
}
break;
 80009c2:	e12e      	b.n	8000c22 <fsm_automatic_run+0x4ee>
 80009c4:	20000070 	.word	0x20000070
 80009c8:	20000074 	.word	0x20000074
 80009cc:	2000005c 	.word	0x2000005c
 80009d0:	2000008c 	.word	0x2000008c
 80009d4:	20000060 	.word	0x20000060
 80009d8:	20000064 	.word	0x20000064
case AUTO_4:
	if (button1_flag ==1 ){
 80009dc:	4b98      	ldr	r3, [pc, #608]	; (8000c40 <fsm_automatic_run+0x50c>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	2b01      	cmp	r3, #1
 80009e2:	d105      	bne.n	80009f0 <fsm_automatic_run+0x2bc>
		button1_flag = 0;
 80009e4:	4b96      	ldr	r3, [pc, #600]	; (8000c40 <fsm_automatic_run+0x50c>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
		status = INIT;
 80009ea:	4b96      	ldr	r3, [pc, #600]	; (8000c44 <fsm_automatic_run+0x510>)
 80009ec:	2201      	movs	r2, #1
 80009ee:	601a      	str	r2, [r3, #0]
		}
if (timer_flag2 == 1){
 80009f0:	4b95      	ldr	r3, [pc, #596]	; (8000c48 <fsm_automatic_run+0x514>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	d10b      	bne.n	8000a10 <fsm_automatic_run+0x2dc>
timer_flag2 =0;
 80009f8:	4b93      	ldr	r3, [pc, #588]	; (8000c48 <fsm_automatic_run+0x514>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
display7seg(4);
 80009fe:	2004      	movs	r0, #4
 8000a00:	f7ff fd08 	bl	8000414 <display7seg>
status = AUTO_3;
 8000a04:	4b8f      	ldr	r3, [pc, #572]	; (8000c44 <fsm_automatic_run+0x510>)
 8000a06:	2235      	movs	r2, #53	; 0x35
 8000a08:	601a      	str	r2, [r3, #0]
setTimer2(100);
 8000a0a:	2064      	movs	r0, #100	; 0x64
 8000a0c:	f000 ff9c 	bl	8001948 <setTimer2>
}
if (button2_flag == 1){
 8000a10:	4b8e      	ldr	r3, [pc, #568]	; (8000c4c <fsm_automatic_run+0x518>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	2b01      	cmp	r3, #1
 8000a16:	d105      	bne.n	8000a24 <fsm_automatic_run+0x2f0>
button2_flag = 0;
 8000a18:	4b8c      	ldr	r3, [pc, #560]	; (8000c4c <fsm_automatic_run+0x518>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
status = MAN_INC5;
 8000a1e:	4b89      	ldr	r3, [pc, #548]	; (8000c44 <fsm_automatic_run+0x510>)
 8000a20:	2211      	movs	r2, #17
 8000a22:	601a      	str	r2, [r3, #0]
}
if (button3_flag == 1){
 8000a24:	4b8a      	ldr	r3, [pc, #552]	; (8000c50 <fsm_automatic_run+0x51c>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	2b01      	cmp	r3, #1
 8000a2a:	f040 80fc 	bne.w	8000c26 <fsm_automatic_run+0x4f2>
button3_flag = 0;
 8000a2e:	4b88      	ldr	r3, [pc, #544]	; (8000c50 <fsm_automatic_run+0x51c>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
status = MAN_INC4;
 8000a34:	4b83      	ldr	r3, [pc, #524]	; (8000c44 <fsm_automatic_run+0x510>)
 8000a36:	2210      	movs	r2, #16
 8000a38:	601a      	str	r2, [r3, #0]
}
break;
 8000a3a:	e0f4      	b.n	8000c26 <fsm_automatic_run+0x4f2>
case AUTO_5:
	if (button1_flag ==1 ){
 8000a3c:	4b80      	ldr	r3, [pc, #512]	; (8000c40 <fsm_automatic_run+0x50c>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d105      	bne.n	8000a50 <fsm_automatic_run+0x31c>
		button1_flag = 0;
 8000a44:	4b7e      	ldr	r3, [pc, #504]	; (8000c40 <fsm_automatic_run+0x50c>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
		status = INIT;
 8000a4a:	4b7e      	ldr	r3, [pc, #504]	; (8000c44 <fsm_automatic_run+0x510>)
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	601a      	str	r2, [r3, #0]
		}
if (timer_flag2 == 1){
 8000a50:	4b7d      	ldr	r3, [pc, #500]	; (8000c48 <fsm_automatic_run+0x514>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	d10b      	bne.n	8000a70 <fsm_automatic_run+0x33c>
timer_flag2 =0;
 8000a58:	4b7b      	ldr	r3, [pc, #492]	; (8000c48 <fsm_automatic_run+0x514>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	601a      	str	r2, [r3, #0]
display7seg(5);
 8000a5e:	2005      	movs	r0, #5
 8000a60:	f7ff fcd8 	bl	8000414 <display7seg>
status = AUTO_4;
 8000a64:	4b77      	ldr	r3, [pc, #476]	; (8000c44 <fsm_automatic_run+0x510>)
 8000a66:	2236      	movs	r2, #54	; 0x36
 8000a68:	601a      	str	r2, [r3, #0]
setTimer2(100);
 8000a6a:	2064      	movs	r0, #100	; 0x64
 8000a6c:	f000 ff6c 	bl	8001948 <setTimer2>
}
if (button2_flag == 1){
 8000a70:	4b76      	ldr	r3, [pc, #472]	; (8000c4c <fsm_automatic_run+0x518>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	2b01      	cmp	r3, #1
 8000a76:	d105      	bne.n	8000a84 <fsm_automatic_run+0x350>
button2_flag = 0;
 8000a78:	4b74      	ldr	r3, [pc, #464]	; (8000c4c <fsm_automatic_run+0x518>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
status = MAN_INC5;
 8000a7e:	4b71      	ldr	r3, [pc, #452]	; (8000c44 <fsm_automatic_run+0x510>)
 8000a80:	2211      	movs	r2, #17
 8000a82:	601a      	str	r2, [r3, #0]
}
if (button3_flag == 1){
 8000a84:	4b72      	ldr	r3, [pc, #456]	; (8000c50 <fsm_automatic_run+0x51c>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	2b01      	cmp	r3, #1
 8000a8a:	f040 80ce 	bne.w	8000c2a <fsm_automatic_run+0x4f6>
button3_flag = 0;
 8000a8e:	4b70      	ldr	r3, [pc, #448]	; (8000c50 <fsm_automatic_run+0x51c>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
status = MAN_INC5;
 8000a94:	4b6b      	ldr	r3, [pc, #428]	; (8000c44 <fsm_automatic_run+0x510>)
 8000a96:	2211      	movs	r2, #17
 8000a98:	601a      	str	r2, [r3, #0]
}
break;
 8000a9a:	e0c6      	b.n	8000c2a <fsm_automatic_run+0x4f6>
case AUTO_6:
	if (button1_flag ==1 ){
 8000a9c:	4b68      	ldr	r3, [pc, #416]	; (8000c40 <fsm_automatic_run+0x50c>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	2b01      	cmp	r3, #1
 8000aa2:	d105      	bne.n	8000ab0 <fsm_automatic_run+0x37c>
		button1_flag = 0;
 8000aa4:	4b66      	ldr	r3, [pc, #408]	; (8000c40 <fsm_automatic_run+0x50c>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
		status = INIT;
 8000aaa:	4b66      	ldr	r3, [pc, #408]	; (8000c44 <fsm_automatic_run+0x510>)
 8000aac:	2201      	movs	r2, #1
 8000aae:	601a      	str	r2, [r3, #0]
		}
if (button2_flag == 1){
 8000ab0:	4b66      	ldr	r3, [pc, #408]	; (8000c4c <fsm_automatic_run+0x518>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	2b01      	cmp	r3, #1
 8000ab6:	d105      	bne.n	8000ac4 <fsm_automatic_run+0x390>
button2_flag = 0;
 8000ab8:	4b64      	ldr	r3, [pc, #400]	; (8000c4c <fsm_automatic_run+0x518>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	601a      	str	r2, [r3, #0]
status = MAN_INC6;
 8000abe:	4b61      	ldr	r3, [pc, #388]	; (8000c44 <fsm_automatic_run+0x510>)
 8000ac0:	2212      	movs	r2, #18
 8000ac2:	601a      	str	r2, [r3, #0]
}
if (timer_flag2 == 1){
 8000ac4:	4b60      	ldr	r3, [pc, #384]	; (8000c48 <fsm_automatic_run+0x514>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	d10b      	bne.n	8000ae4 <fsm_automatic_run+0x3b0>
timer_flag2 =0;
 8000acc:	4b5e      	ldr	r3, [pc, #376]	; (8000c48 <fsm_automatic_run+0x514>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	601a      	str	r2, [r3, #0]
display7seg(6);
 8000ad2:	2006      	movs	r0, #6
 8000ad4:	f7ff fc9e 	bl	8000414 <display7seg>
status = AUTO_5;
 8000ad8:	4b5a      	ldr	r3, [pc, #360]	; (8000c44 <fsm_automatic_run+0x510>)
 8000ada:	2237      	movs	r2, #55	; 0x37
 8000adc:	601a      	str	r2, [r3, #0]
setTimer2(100);
 8000ade:	2064      	movs	r0, #100	; 0x64
 8000ae0:	f000 ff32 	bl	8001948 <setTimer2>
}
if (button3_flag == 1){
 8000ae4:	4b5a      	ldr	r3, [pc, #360]	; (8000c50 <fsm_automatic_run+0x51c>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	2b01      	cmp	r3, #1
 8000aea:	f040 80a0 	bne.w	8000c2e <fsm_automatic_run+0x4fa>
button3_flag = 0;
 8000aee:	4b58      	ldr	r3, [pc, #352]	; (8000c50 <fsm_automatic_run+0x51c>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
status = MAN_INC6;
 8000af4:	4b53      	ldr	r3, [pc, #332]	; (8000c44 <fsm_automatic_run+0x510>)
 8000af6:	2212      	movs	r2, #18
 8000af8:	601a      	str	r2, [r3, #0]
}
break;
 8000afa:	e098      	b.n	8000c2e <fsm_automatic_run+0x4fa>
case AUTO_7:
	if (button1_flag ==1 ){
 8000afc:	4b50      	ldr	r3, [pc, #320]	; (8000c40 <fsm_automatic_run+0x50c>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	d105      	bne.n	8000b10 <fsm_automatic_run+0x3dc>
		button1_flag = 0;
 8000b04:	4b4e      	ldr	r3, [pc, #312]	; (8000c40 <fsm_automatic_run+0x50c>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
		status = INIT;
 8000b0a:	4b4e      	ldr	r3, [pc, #312]	; (8000c44 <fsm_automatic_run+0x510>)
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	601a      	str	r2, [r3, #0]
		}
if (timer_flag2 == 1){
 8000b10:	4b4d      	ldr	r3, [pc, #308]	; (8000c48 <fsm_automatic_run+0x514>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d10b      	bne.n	8000b30 <fsm_automatic_run+0x3fc>
timer_flag2 =0;
 8000b18:	4b4b      	ldr	r3, [pc, #300]	; (8000c48 <fsm_automatic_run+0x514>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	601a      	str	r2, [r3, #0]
display7seg(7);
 8000b1e:	2007      	movs	r0, #7
 8000b20:	f7ff fc78 	bl	8000414 <display7seg>
status = AUTO_6;
 8000b24:	4b47      	ldr	r3, [pc, #284]	; (8000c44 <fsm_automatic_run+0x510>)
 8000b26:	2238      	movs	r2, #56	; 0x38
 8000b28:	601a      	str	r2, [r3, #0]
setTimer2(100);
 8000b2a:	2064      	movs	r0, #100	; 0x64
 8000b2c:	f000 ff0c 	bl	8001948 <setTimer2>
}
if (button2_flag == 1){
 8000b30:	4b46      	ldr	r3, [pc, #280]	; (8000c4c <fsm_automatic_run+0x518>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d105      	bne.n	8000b44 <fsm_automatic_run+0x410>
button2_flag = 0;
 8000b38:	4b44      	ldr	r3, [pc, #272]	; (8000c4c <fsm_automatic_run+0x518>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
status = MAN_INC7;
 8000b3e:	4b41      	ldr	r3, [pc, #260]	; (8000c44 <fsm_automatic_run+0x510>)
 8000b40:	2213      	movs	r2, #19
 8000b42:	601a      	str	r2, [r3, #0]
}
if (button3_flag == 1){
 8000b44:	4b42      	ldr	r3, [pc, #264]	; (8000c50 <fsm_automatic_run+0x51c>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d172      	bne.n	8000c32 <fsm_automatic_run+0x4fe>
button3_flag = 0;
 8000b4c:	4b40      	ldr	r3, [pc, #256]	; (8000c50 <fsm_automatic_run+0x51c>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	601a      	str	r2, [r3, #0]
status = MAN_INC7;
 8000b52:	4b3c      	ldr	r3, [pc, #240]	; (8000c44 <fsm_automatic_run+0x510>)
 8000b54:	2213      	movs	r2, #19
 8000b56:	601a      	str	r2, [r3, #0]
}
break;
 8000b58:	e06b      	b.n	8000c32 <fsm_automatic_run+0x4fe>
case AUTO_8:
	if (button1_flag ==1 ){
 8000b5a:	4b39      	ldr	r3, [pc, #228]	; (8000c40 <fsm_automatic_run+0x50c>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	2b01      	cmp	r3, #1
 8000b60:	d105      	bne.n	8000b6e <fsm_automatic_run+0x43a>
		button1_flag = 0;
 8000b62:	4b37      	ldr	r3, [pc, #220]	; (8000c40 <fsm_automatic_run+0x50c>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
		status = INIT;
 8000b68:	4b36      	ldr	r3, [pc, #216]	; (8000c44 <fsm_automatic_run+0x510>)
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	601a      	str	r2, [r3, #0]
		}
if (button2_flag == 1){
 8000b6e:	4b37      	ldr	r3, [pc, #220]	; (8000c4c <fsm_automatic_run+0x518>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	2b01      	cmp	r3, #1
 8000b74:	d105      	bne.n	8000b82 <fsm_automatic_run+0x44e>
button2_flag = 0;
 8000b76:	4b35      	ldr	r3, [pc, #212]	; (8000c4c <fsm_automatic_run+0x518>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
status = MAN_INC7;
 8000b7c:	4b31      	ldr	r3, [pc, #196]	; (8000c44 <fsm_automatic_run+0x510>)
 8000b7e:	2213      	movs	r2, #19
 8000b80:	601a      	str	r2, [r3, #0]
}
if (button3_flag == 1){
 8000b82:	4b33      	ldr	r3, [pc, #204]	; (8000c50 <fsm_automatic_run+0x51c>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	2b01      	cmp	r3, #1
 8000b88:	d105      	bne.n	8000b96 <fsm_automatic_run+0x462>
button3_flag = 0;
 8000b8a:	4b31      	ldr	r3, [pc, #196]	; (8000c50 <fsm_automatic_run+0x51c>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
status = MAN_INC8;
 8000b90:	4b2c      	ldr	r3, [pc, #176]	; (8000c44 <fsm_automatic_run+0x510>)
 8000b92:	2214      	movs	r2, #20
 8000b94:	601a      	str	r2, [r3, #0]
}
if (timer_flag2 == 1){
 8000b96:	4b2c      	ldr	r3, [pc, #176]	; (8000c48 <fsm_automatic_run+0x514>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	2b01      	cmp	r3, #1
 8000b9c:	d14b      	bne.n	8000c36 <fsm_automatic_run+0x502>
timer_flag2 =0;
 8000b9e:	4b2a      	ldr	r3, [pc, #168]	; (8000c48 <fsm_automatic_run+0x514>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
display7seg(8);
 8000ba4:	2008      	movs	r0, #8
 8000ba6:	f7ff fc35 	bl	8000414 <display7seg>
status = AUTO_7;
 8000baa:	4b26      	ldr	r3, [pc, #152]	; (8000c44 <fsm_automatic_run+0x510>)
 8000bac:	2239      	movs	r2, #57	; 0x39
 8000bae:	601a      	str	r2, [r3, #0]
setTimer2(100);
 8000bb0:	2064      	movs	r0, #100	; 0x64
 8000bb2:	f000 fec9 	bl	8001948 <setTimer2>
}
break;
 8000bb6:	e03e      	b.n	8000c36 <fsm_automatic_run+0x502>
case AUTO_9:
	if (button1_flag ==1 ){
 8000bb8:	4b21      	ldr	r3, [pc, #132]	; (8000c40 <fsm_automatic_run+0x50c>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	2b01      	cmp	r3, #1
 8000bbe:	d105      	bne.n	8000bcc <fsm_automatic_run+0x498>
		button1_flag = 0;
 8000bc0:	4b1f      	ldr	r3, [pc, #124]	; (8000c40 <fsm_automatic_run+0x50c>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
		status = INIT;
 8000bc6:	4b1f      	ldr	r3, [pc, #124]	; (8000c44 <fsm_automatic_run+0x510>)
 8000bc8:	2201      	movs	r2, #1
 8000bca:	601a      	str	r2, [r3, #0]
		}
if (button2_flag == 1){
 8000bcc:	4b1f      	ldr	r3, [pc, #124]	; (8000c4c <fsm_automatic_run+0x518>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	2b01      	cmp	r3, #1
 8000bd2:	d105      	bne.n	8000be0 <fsm_automatic_run+0x4ac>
button2_flag = 0;
 8000bd4:	4b1d      	ldr	r3, [pc, #116]	; (8000c4c <fsm_automatic_run+0x518>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	601a      	str	r2, [r3, #0]
status = MAN_INC9;
 8000bda:	4b1a      	ldr	r3, [pc, #104]	; (8000c44 <fsm_automatic_run+0x510>)
 8000bdc:	2215      	movs	r2, #21
 8000bde:	601a      	str	r2, [r3, #0]
}
if (button3_flag == 1){
 8000be0:	4b1b      	ldr	r3, [pc, #108]	; (8000c50 <fsm_automatic_run+0x51c>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	d105      	bne.n	8000bf4 <fsm_automatic_run+0x4c0>
button3_flag = 0;
 8000be8:	4b19      	ldr	r3, [pc, #100]	; (8000c50 <fsm_automatic_run+0x51c>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
status = MAN_INC9;
 8000bee:	4b15      	ldr	r3, [pc, #84]	; (8000c44 <fsm_automatic_run+0x510>)
 8000bf0:	2215      	movs	r2, #21
 8000bf2:	601a      	str	r2, [r3, #0]
}
if (timer_flag2 == 1){
 8000bf4:	4b14      	ldr	r3, [pc, #80]	; (8000c48 <fsm_automatic_run+0x514>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	d11e      	bne.n	8000c3a <fsm_automatic_run+0x506>
timer_flag2 = 0 ;
 8000bfc:	4b12      	ldr	r3, [pc, #72]	; (8000c48 <fsm_automatic_run+0x514>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
display7seg(9);
 8000c02:	2009      	movs	r0, #9
 8000c04:	f7ff fc06 	bl	8000414 <display7seg>
status = AUTO_8;
 8000c08:	4b0e      	ldr	r3, [pc, #56]	; (8000c44 <fsm_automatic_run+0x510>)
 8000c0a:	223a      	movs	r2, #58	; 0x3a
 8000c0c:	601a      	str	r2, [r3, #0]
setTimer2(100);
 8000c0e:	2064      	movs	r0, #100	; 0x64
 8000c10:	f000 fe9a 	bl	8001948 <setTimer2>
}
break;
 8000c14:	e011      	b.n	8000c3a <fsm_automatic_run+0x506>
default:
break;
 8000c16:	bf00      	nop
 8000c18:	e010      	b.n	8000c3c <fsm_automatic_run+0x508>
break;
 8000c1a:	bf00      	nop
 8000c1c:	e00e      	b.n	8000c3c <fsm_automatic_run+0x508>
break;
 8000c1e:	bf00      	nop
 8000c20:	e00c      	b.n	8000c3c <fsm_automatic_run+0x508>
break;
 8000c22:	bf00      	nop
 8000c24:	e00a      	b.n	8000c3c <fsm_automatic_run+0x508>
break;
 8000c26:	bf00      	nop
 8000c28:	e008      	b.n	8000c3c <fsm_automatic_run+0x508>
break;
 8000c2a:	bf00      	nop
 8000c2c:	e006      	b.n	8000c3c <fsm_automatic_run+0x508>
break;
 8000c2e:	bf00      	nop
 8000c30:	e004      	b.n	8000c3c <fsm_automatic_run+0x508>
break;
 8000c32:	bf00      	nop
 8000c34:	e002      	b.n	8000c3c <fsm_automatic_run+0x508>
break;
 8000c36:	bf00      	nop
 8000c38:	e000      	b.n	8000c3c <fsm_automatic_run+0x508>
break;
 8000c3a:	bf00      	nop
}
}
 8000c3c:	bf00      	nop
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	2000005c 	.word	0x2000005c
 8000c44:	20000070 	.word	0x20000070
 8000c48:	2000008c 	.word	0x2000008c
 8000c4c:	20000060 	.word	0x20000060
 8000c50:	20000064 	.word	0x20000064

08000c54 <fsm_longpress_run>:
#include "fsm_automatic.h"
#include "button.h"
#include "display7seg.h"
#include "fsm_longpress.h"

void fsm_longpress_run(){
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
switch (status){
 8000c58:	4b9f      	ldr	r3, [pc, #636]	; (8000ed8 <fsm_longpress_run+0x284>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	3b1e      	subs	r3, #30
 8000c5e:	2b09      	cmp	r3, #9
 8000c60:	f200 8186 	bhi.w	8000f70 <fsm_longpress_run+0x31c>
 8000c64:	a201      	add	r2, pc, #4	; (adr r2, 8000c6c <fsm_longpress_run+0x18>)
 8000c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c6a:	bf00      	nop
 8000c6c:	08000c95 	.word	0x08000c95
 8000c70:	08000cdd 	.word	0x08000cdd
 8000c74:	08000d25 	.word	0x08000d25
 8000c78:	08000d6d 	.word	0x08000d6d
 8000c7c:	08000db5 	.word	0x08000db5
 8000c80:	08000e03 	.word	0x08000e03
 8000c84:	08000e4b 	.word	0x08000e4b
 8000c88:	08000e93 	.word	0x08000e93
 8000c8c:	08000ee9 	.word	0x08000ee9
 8000c90:	08000f2d 	.word	0x08000f2d
case LONG_0:
	display7seg(0);
 8000c94:	2000      	movs	r0, #0
 8000c96:	f7ff fbbd 	bl	8000414 <display7seg>
	if (button1_flag ==1 ){
 8000c9a:	4b90      	ldr	r3, [pc, #576]	; (8000edc <fsm_longpress_run+0x288>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	2b01      	cmp	r3, #1
 8000ca0:	d105      	bne.n	8000cae <fsm_longpress_run+0x5a>
	button1_flag = 0;
 8000ca2:	4b8e      	ldr	r3, [pc, #568]	; (8000edc <fsm_longpress_run+0x288>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
	status = INIT;
 8000ca8:	4b8b      	ldr	r3, [pc, #556]	; (8000ed8 <fsm_longpress_run+0x284>)
 8000caa:	2201      	movs	r2, #1
 8000cac:	601a      	str	r2, [r3, #0]
	}
	if (timer_flag1 ==1 ){
 8000cae:	4b8c      	ldr	r3, [pc, #560]	; (8000ee0 <fsm_longpress_run+0x28c>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	f040 815e 	bne.w	8000f74 <fsm_longpress_run+0x320>
	timer_flag1 = 0;
 8000cb8:	4b89      	ldr	r3, [pc, #548]	; (8000ee0 <fsm_longpress_run+0x28c>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
	if (button2_flag2 ==1){
 8000cbe:	4b89      	ldr	r3, [pc, #548]	; (8000ee4 <fsm_longpress_run+0x290>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	2b01      	cmp	r3, #1
 8000cc4:	f040 8156 	bne.w	8000f74 <fsm_longpress_run+0x320>
		button2_flag2 =0;
 8000cc8:	4b86      	ldr	r3, [pc, #536]	; (8000ee4 <fsm_longpress_run+0x290>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
	status = LONG_1;
 8000cce:	4b82      	ldr	r3, [pc, #520]	; (8000ed8 <fsm_longpress_run+0x284>)
 8000cd0:	221f      	movs	r2, #31
 8000cd2:	601a      	str	r2, [r3, #0]
	setTimer1(100);}
 8000cd4:	2064      	movs	r0, #100	; 0x64
 8000cd6:	f000 fe23 	bl	8001920 <setTimer1>
	}


break;
 8000cda:	e14b      	b.n	8000f74 <fsm_longpress_run+0x320>
case LONG_1:
	display7seg(1);
 8000cdc:	2001      	movs	r0, #1
 8000cde:	f7ff fb99 	bl	8000414 <display7seg>
	if (button1_flag ==1 ){
 8000ce2:	4b7e      	ldr	r3, [pc, #504]	; (8000edc <fsm_longpress_run+0x288>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d105      	bne.n	8000cf6 <fsm_longpress_run+0xa2>
	button1_flag = 0;
 8000cea:	4b7c      	ldr	r3, [pc, #496]	; (8000edc <fsm_longpress_run+0x288>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
	status = INIT;
 8000cf0:	4b79      	ldr	r3, [pc, #484]	; (8000ed8 <fsm_longpress_run+0x284>)
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	601a      	str	r2, [r3, #0]
	}
	if (timer_flag1 ==1 ){
 8000cf6:	4b7a      	ldr	r3, [pc, #488]	; (8000ee0 <fsm_longpress_run+0x28c>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	f040 813c 	bne.w	8000f78 <fsm_longpress_run+0x324>
	timer_flag1 = 0;
 8000d00:	4b77      	ldr	r3, [pc, #476]	; (8000ee0 <fsm_longpress_run+0x28c>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	601a      	str	r2, [r3, #0]
	if (button2_flag2 ==1){
 8000d06:	4b77      	ldr	r3, [pc, #476]	; (8000ee4 <fsm_longpress_run+0x290>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	f040 8134 	bne.w	8000f78 <fsm_longpress_run+0x324>
		button2_flag2 =0;
 8000d10:	4b74      	ldr	r3, [pc, #464]	; (8000ee4 <fsm_longpress_run+0x290>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
	status = LONG_2;
 8000d16:	4b70      	ldr	r3, [pc, #448]	; (8000ed8 <fsm_longpress_run+0x284>)
 8000d18:	2220      	movs	r2, #32
 8000d1a:	601a      	str	r2, [r3, #0]
	setTimer1(100);}
 8000d1c:	2064      	movs	r0, #100	; 0x64
 8000d1e:	f000 fdff 	bl	8001920 <setTimer1>
	}
break;
 8000d22:	e129      	b.n	8000f78 <fsm_longpress_run+0x324>
case LONG_2:
	display7seg(2);
 8000d24:	2002      	movs	r0, #2
 8000d26:	f7ff fb75 	bl	8000414 <display7seg>
	if (button1_flag ==1 ){
 8000d2a:	4b6c      	ldr	r3, [pc, #432]	; (8000edc <fsm_longpress_run+0x288>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d105      	bne.n	8000d3e <fsm_longpress_run+0xea>
	button1_flag = 0;
 8000d32:	4b6a      	ldr	r3, [pc, #424]	; (8000edc <fsm_longpress_run+0x288>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
	status = INIT;
 8000d38:	4b67      	ldr	r3, [pc, #412]	; (8000ed8 <fsm_longpress_run+0x284>)
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	601a      	str	r2, [r3, #0]
	}
	if (timer_flag1 ==1 ){
 8000d3e:	4b68      	ldr	r3, [pc, #416]	; (8000ee0 <fsm_longpress_run+0x28c>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	f040 811a 	bne.w	8000f7c <fsm_longpress_run+0x328>
	timer_flag1 = 0;
 8000d48:	4b65      	ldr	r3, [pc, #404]	; (8000ee0 <fsm_longpress_run+0x28c>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	601a      	str	r2, [r3, #0]
	if (button2_flag2 ==1){
 8000d4e:	4b65      	ldr	r3, [pc, #404]	; (8000ee4 <fsm_longpress_run+0x290>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	f040 8112 	bne.w	8000f7c <fsm_longpress_run+0x328>
	button2_flag2 =0;
 8000d58:	4b62      	ldr	r3, [pc, #392]	; (8000ee4 <fsm_longpress_run+0x290>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]
	status = LONG_3;
 8000d5e:	4b5e      	ldr	r3, [pc, #376]	; (8000ed8 <fsm_longpress_run+0x284>)
 8000d60:	2221      	movs	r2, #33	; 0x21
 8000d62:	601a      	str	r2, [r3, #0]
	setTimer1(100);}
 8000d64:	2064      	movs	r0, #100	; 0x64
 8000d66:	f000 fddb 	bl	8001920 <setTimer1>
	}
break;
 8000d6a:	e107      	b.n	8000f7c <fsm_longpress_run+0x328>
case LONG_3:
	display7seg(3);
 8000d6c:	2003      	movs	r0, #3
 8000d6e:	f7ff fb51 	bl	8000414 <display7seg>
	if (button1_flag ==1 ){
 8000d72:	4b5a      	ldr	r3, [pc, #360]	; (8000edc <fsm_longpress_run+0x288>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d105      	bne.n	8000d86 <fsm_longpress_run+0x132>
	button1_flag = 0;
 8000d7a:	4b58      	ldr	r3, [pc, #352]	; (8000edc <fsm_longpress_run+0x288>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
	status = INIT;
 8000d80:	4b55      	ldr	r3, [pc, #340]	; (8000ed8 <fsm_longpress_run+0x284>)
 8000d82:	2201      	movs	r2, #1
 8000d84:	601a      	str	r2, [r3, #0]
	}
	if (timer_flag1 ==1 ){
 8000d86:	4b56      	ldr	r3, [pc, #344]	; (8000ee0 <fsm_longpress_run+0x28c>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	f040 80f8 	bne.w	8000f80 <fsm_longpress_run+0x32c>
	timer_flag1 = 0;
 8000d90:	4b53      	ldr	r3, [pc, #332]	; (8000ee0 <fsm_longpress_run+0x28c>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
	if (button2_flag2 ==1){
 8000d96:	4b53      	ldr	r3, [pc, #332]	; (8000ee4 <fsm_longpress_run+0x290>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	f040 80f0 	bne.w	8000f80 <fsm_longpress_run+0x32c>
		button2_flag2 =0;
 8000da0:	4b50      	ldr	r3, [pc, #320]	; (8000ee4 <fsm_longpress_run+0x290>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
	status = LONG_4;
 8000da6:	4b4c      	ldr	r3, [pc, #304]	; (8000ed8 <fsm_longpress_run+0x284>)
 8000da8:	2222      	movs	r2, #34	; 0x22
 8000daa:	601a      	str	r2, [r3, #0]
	setTimer1(100);}
 8000dac:	2064      	movs	r0, #100	; 0x64
 8000dae:	f000 fdb7 	bl	8001920 <setTimer1>
	}
break;
 8000db2:	e0e5      	b.n	8000f80 <fsm_longpress_run+0x32c>
case LONG_4:
	display7seg(4);
 8000db4:	2004      	movs	r0, #4
 8000db6:	f7ff fb2d 	bl	8000414 <display7seg>
	if (button1_flag ==1 ){
 8000dba:	4b48      	ldr	r3, [pc, #288]	; (8000edc <fsm_longpress_run+0x288>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d105      	bne.n	8000dce <fsm_longpress_run+0x17a>
	button1_flag = 0;
 8000dc2:	4b46      	ldr	r3, [pc, #280]	; (8000edc <fsm_longpress_run+0x288>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
	status = INIT;
 8000dc8:	4b43      	ldr	r3, [pc, #268]	; (8000ed8 <fsm_longpress_run+0x284>)
 8000dca:	2201      	movs	r2, #1
 8000dcc:	601a      	str	r2, [r3, #0]
	}
	if (timer_flag1 ==1 ){
 8000dce:	4b44      	ldr	r3, [pc, #272]	; (8000ee0 <fsm_longpress_run+0x28c>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	f040 80d6 	bne.w	8000f84 <fsm_longpress_run+0x330>
		timer_flag1 =0;
 8000dd8:	4b41      	ldr	r3, [pc, #260]	; (8000ee0 <fsm_longpress_run+0x28c>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
	timer_flag1 = 0;
 8000dde:	4b40      	ldr	r3, [pc, #256]	; (8000ee0 <fsm_longpress_run+0x28c>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
	if (button2_flag2 ==1){
 8000de4:	4b3f      	ldr	r3, [pc, #252]	; (8000ee4 <fsm_longpress_run+0x290>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	f040 80cb 	bne.w	8000f84 <fsm_longpress_run+0x330>
		button2_flag2 =0;
 8000dee:	4b3d      	ldr	r3, [pc, #244]	; (8000ee4 <fsm_longpress_run+0x290>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
	status = LONG_5;
 8000df4:	4b38      	ldr	r3, [pc, #224]	; (8000ed8 <fsm_longpress_run+0x284>)
 8000df6:	2223      	movs	r2, #35	; 0x23
 8000df8:	601a      	str	r2, [r3, #0]
	setTimer1(100);}
 8000dfa:	2064      	movs	r0, #100	; 0x64
 8000dfc:	f000 fd90 	bl	8001920 <setTimer1>
	}
break;
 8000e00:	e0c0      	b.n	8000f84 <fsm_longpress_run+0x330>
case LONG_5:
	display7seg(5);
 8000e02:	2005      	movs	r0, #5
 8000e04:	f7ff fb06 	bl	8000414 <display7seg>
	if (button1_flag ==1 ){
 8000e08:	4b34      	ldr	r3, [pc, #208]	; (8000edc <fsm_longpress_run+0x288>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d105      	bne.n	8000e1c <fsm_longpress_run+0x1c8>
	button1_flag = 0;
 8000e10:	4b32      	ldr	r3, [pc, #200]	; (8000edc <fsm_longpress_run+0x288>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
	status = INIT;
 8000e16:	4b30      	ldr	r3, [pc, #192]	; (8000ed8 <fsm_longpress_run+0x284>)
 8000e18:	2201      	movs	r2, #1
 8000e1a:	601a      	str	r2, [r3, #0]
	}
	if (timer_flag1 ==1 ){
 8000e1c:	4b30      	ldr	r3, [pc, #192]	; (8000ee0 <fsm_longpress_run+0x28c>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	f040 80b1 	bne.w	8000f88 <fsm_longpress_run+0x334>
	timer_flag1 = 0;
 8000e26:	4b2e      	ldr	r3, [pc, #184]	; (8000ee0 <fsm_longpress_run+0x28c>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
	if (button2_flag2 ==1){
 8000e2c:	4b2d      	ldr	r3, [pc, #180]	; (8000ee4 <fsm_longpress_run+0x290>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	f040 80a9 	bne.w	8000f88 <fsm_longpress_run+0x334>
	button2_flag2 =0;
 8000e36:	4b2b      	ldr	r3, [pc, #172]	; (8000ee4 <fsm_longpress_run+0x290>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
	status = LONG_6;
 8000e3c:	4b26      	ldr	r3, [pc, #152]	; (8000ed8 <fsm_longpress_run+0x284>)
 8000e3e:	2224      	movs	r2, #36	; 0x24
 8000e40:	601a      	str	r2, [r3, #0]
	setTimer1(100);}
 8000e42:	2064      	movs	r0, #100	; 0x64
 8000e44:	f000 fd6c 	bl	8001920 <setTimer1>
	}
	break;
 8000e48:	e09e      	b.n	8000f88 <fsm_longpress_run+0x334>
case LONG_6:
	if (button1_flag ==1 ){
 8000e4a:	4b24      	ldr	r3, [pc, #144]	; (8000edc <fsm_longpress_run+0x288>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d105      	bne.n	8000e5e <fsm_longpress_run+0x20a>
		button1_flag = 0;
 8000e52:	4b22      	ldr	r3, [pc, #136]	; (8000edc <fsm_longpress_run+0x288>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
		status = INIT;
 8000e58:	4b1f      	ldr	r3, [pc, #124]	; (8000ed8 <fsm_longpress_run+0x284>)
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	601a      	str	r2, [r3, #0]
		}
	display7seg(6);
 8000e5e:	2006      	movs	r0, #6
 8000e60:	f7ff fad8 	bl	8000414 <display7seg>
if (timer_flag1 ==1 ){
 8000e64:	4b1e      	ldr	r3, [pc, #120]	; (8000ee0 <fsm_longpress_run+0x28c>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	f040 808f 	bne.w	8000f8c <fsm_longpress_run+0x338>
timer_flag1 = 0;
 8000e6e:	4b1c      	ldr	r3, [pc, #112]	; (8000ee0 <fsm_longpress_run+0x28c>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
if (button2_flag2 ==1){
 8000e74:	4b1b      	ldr	r3, [pc, #108]	; (8000ee4 <fsm_longpress_run+0x290>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	f040 8087 	bne.w	8000f8c <fsm_longpress_run+0x338>
	button2_flag2 =0;
 8000e7e:	4b19      	ldr	r3, [pc, #100]	; (8000ee4 <fsm_longpress_run+0x290>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
status = LONG_7;
 8000e84:	4b14      	ldr	r3, [pc, #80]	; (8000ed8 <fsm_longpress_run+0x284>)
 8000e86:	2225      	movs	r2, #37	; 0x25
 8000e88:	601a      	str	r2, [r3, #0]
setTimer1(100);}
 8000e8a:	2064      	movs	r0, #100	; 0x64
 8000e8c:	f000 fd48 	bl	8001920 <setTimer1>
}
break;
 8000e90:	e07c      	b.n	8000f8c <fsm_longpress_run+0x338>
case LONG_7:
display7seg(7);
 8000e92:	2007      	movs	r0, #7
 8000e94:	f7ff fabe 	bl	8000414 <display7seg>
if (button1_flag ==1 ){
 8000e98:	4b10      	ldr	r3, [pc, #64]	; (8000edc <fsm_longpress_run+0x288>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d105      	bne.n	8000eac <fsm_longpress_run+0x258>
	button1_flag = 0;
 8000ea0:	4b0e      	ldr	r3, [pc, #56]	; (8000edc <fsm_longpress_run+0x288>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]
	status = INIT;
 8000ea6:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <fsm_longpress_run+0x284>)
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	601a      	str	r2, [r3, #0]
	}
if (timer_flag1 == 1){
 8000eac:	4b0c      	ldr	r3, [pc, #48]	; (8000ee0 <fsm_longpress_run+0x28c>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d16d      	bne.n	8000f90 <fsm_longpress_run+0x33c>
timer_flag1 = 0;
 8000eb4:	4b0a      	ldr	r3, [pc, #40]	; (8000ee0 <fsm_longpress_run+0x28c>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
if (button2_flag2 ==1){
 8000eba:	4b0a      	ldr	r3, [pc, #40]	; (8000ee4 <fsm_longpress_run+0x290>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d166      	bne.n	8000f90 <fsm_longpress_run+0x33c>
	button2_flag2 =0;
 8000ec2:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <fsm_longpress_run+0x290>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
status = LONG_8;
 8000ec8:	4b03      	ldr	r3, [pc, #12]	; (8000ed8 <fsm_longpress_run+0x284>)
 8000eca:	2226      	movs	r2, #38	; 0x26
 8000ecc:	601a      	str	r2, [r3, #0]
setTimer1(100);}
 8000ece:	2064      	movs	r0, #100	; 0x64
 8000ed0:	f000 fd26 	bl	8001920 <setTimer1>
}
break;
 8000ed4:	e05c      	b.n	8000f90 <fsm_longpress_run+0x33c>
 8000ed6:	bf00      	nop
 8000ed8:	20000070 	.word	0x20000070
 8000edc:	2000005c 	.word	0x2000005c
 8000ee0:	20000088 	.word	0x20000088
 8000ee4:	20000068 	.word	0x20000068
case LONG_8:
	display7seg(8);
 8000ee8:	2008      	movs	r0, #8
 8000eea:	f7ff fa93 	bl	8000414 <display7seg>
	if (button1_flag ==1 ){
 8000eee:	4b2c      	ldr	r3, [pc, #176]	; (8000fa0 <fsm_longpress_run+0x34c>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	2b01      	cmp	r3, #1
 8000ef4:	d105      	bne.n	8000f02 <fsm_longpress_run+0x2ae>
		button1_flag = 0;
 8000ef6:	4b2a      	ldr	r3, [pc, #168]	; (8000fa0 <fsm_longpress_run+0x34c>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
		status = INIT;
 8000efc:	4b29      	ldr	r3, [pc, #164]	; (8000fa4 <fsm_longpress_run+0x350>)
 8000efe:	2201      	movs	r2, #1
 8000f00:	601a      	str	r2, [r3, #0]
		}
	if (timer_flag1 ==1 ){
 8000f02:	4b29      	ldr	r3, [pc, #164]	; (8000fa8 <fsm_longpress_run+0x354>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d144      	bne.n	8000f94 <fsm_longpress_run+0x340>
timer_flag1 = 0;
 8000f0a:	4b27      	ldr	r3, [pc, #156]	; (8000fa8 <fsm_longpress_run+0x354>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
if (button2_flag2 ==1){
 8000f10:	4b26      	ldr	r3, [pc, #152]	; (8000fac <fsm_longpress_run+0x358>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d13d      	bne.n	8000f94 <fsm_longpress_run+0x340>
	button2_flag2 =0;
 8000f18:	4b24      	ldr	r3, [pc, #144]	; (8000fac <fsm_longpress_run+0x358>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]
status = LONG_9;
 8000f1e:	4b21      	ldr	r3, [pc, #132]	; (8000fa4 <fsm_longpress_run+0x350>)
 8000f20:	2227      	movs	r2, #39	; 0x27
 8000f22:	601a      	str	r2, [r3, #0]
setTimer1(100);}
 8000f24:	2064      	movs	r0, #100	; 0x64
 8000f26:	f000 fcfb 	bl	8001920 <setTimer1>
}

break;
 8000f2a:	e033      	b.n	8000f94 <fsm_longpress_run+0x340>
case LONG_9:
	if (button1_flag ==1 ){
 8000f2c:	4b1c      	ldr	r3, [pc, #112]	; (8000fa0 <fsm_longpress_run+0x34c>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d105      	bne.n	8000f40 <fsm_longpress_run+0x2ec>
		button1_flag = 0;
 8000f34:	4b1a      	ldr	r3, [pc, #104]	; (8000fa0 <fsm_longpress_run+0x34c>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
		status = INIT;
 8000f3a:	4b1a      	ldr	r3, [pc, #104]	; (8000fa4 <fsm_longpress_run+0x350>)
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	601a      	str	r2, [r3, #0]
		}
	display7seg(9);
 8000f40:	2009      	movs	r0, #9
 8000f42:	f7ff fa67 	bl	8000414 <display7seg>
if (timer_flag1 == 1 ){
 8000f46:	4b18      	ldr	r3, [pc, #96]	; (8000fa8 <fsm_longpress_run+0x354>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d124      	bne.n	8000f98 <fsm_longpress_run+0x344>
timer_flag1 = 0;
 8000f4e:	4b16      	ldr	r3, [pc, #88]	; (8000fa8 <fsm_longpress_run+0x354>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
if (button2_flag2 ==1){
 8000f54:	4b15      	ldr	r3, [pc, #84]	; (8000fac <fsm_longpress_run+0x358>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d11d      	bne.n	8000f98 <fsm_longpress_run+0x344>
	button2_flag2 =0;
 8000f5c:	4b13      	ldr	r3, [pc, #76]	; (8000fac <fsm_longpress_run+0x358>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	601a      	str	r2, [r3, #0]
status = LONG_0;
 8000f62:	4b10      	ldr	r3, [pc, #64]	; (8000fa4 <fsm_longpress_run+0x350>)
 8000f64:	221e      	movs	r2, #30
 8000f66:	601a      	str	r2, [r3, #0]
setTimer1(100);}
 8000f68:	2064      	movs	r0, #100	; 0x64
 8000f6a:	f000 fcd9 	bl	8001920 <setTimer1>
}
break;
 8000f6e:	e013      	b.n	8000f98 <fsm_longpress_run+0x344>
default :
break;
 8000f70:	bf00      	nop
 8000f72:	e012      	b.n	8000f9a <fsm_longpress_run+0x346>
break;
 8000f74:	bf00      	nop
 8000f76:	e010      	b.n	8000f9a <fsm_longpress_run+0x346>
break;
 8000f78:	bf00      	nop
 8000f7a:	e00e      	b.n	8000f9a <fsm_longpress_run+0x346>
break;
 8000f7c:	bf00      	nop
 8000f7e:	e00c      	b.n	8000f9a <fsm_longpress_run+0x346>
break;
 8000f80:	bf00      	nop
 8000f82:	e00a      	b.n	8000f9a <fsm_longpress_run+0x346>
break;
 8000f84:	bf00      	nop
 8000f86:	e008      	b.n	8000f9a <fsm_longpress_run+0x346>
	break;
 8000f88:	bf00      	nop
 8000f8a:	e006      	b.n	8000f9a <fsm_longpress_run+0x346>
break;
 8000f8c:	bf00      	nop
 8000f8e:	e004      	b.n	8000f9a <fsm_longpress_run+0x346>
break;
 8000f90:	bf00      	nop
 8000f92:	e002      	b.n	8000f9a <fsm_longpress_run+0x346>
break;
 8000f94:	bf00      	nop
 8000f96:	e000      	b.n	8000f9a <fsm_longpress_run+0x346>
break;
 8000f98:	bf00      	nop
}
}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	2000005c 	.word	0x2000005c
 8000fa4:	20000070 	.word	0x20000070
 8000fa8:	20000088 	.word	0x20000088
 8000fac:	20000068 	.word	0x20000068

08000fb0 <fsm_simple_button_run>:
*      Author: Admin
*/
#include "fsm_automatic.h"
#include "button.h"
#include "display7seg.h"
void fsm_simple_button_run(){
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0

switch (status){
 8000fb4:	4b84      	ldr	r3, [pc, #528]	; (80011c8 <fsm_simple_button_run+0x218>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	3b0c      	subs	r3, #12
 8000fba:	2b09      	cmp	r3, #9
 8000fbc:	f200 835c 	bhi.w	8001678 <fsm_simple_button_run+0x6c8>
 8000fc0:	a201      	add	r2, pc, #4	; (adr r2, 8000fc8 <fsm_simple_button_run+0x18>)
 8000fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fc6:	bf00      	nop
 8000fc8:	08000ff1 	.word	0x08000ff1
 8000fcc:	08001081 	.word	0x08001081
 8000fd0:	08001125 	.word	0x08001125
 8000fd4:	080011e5 	.word	0x080011e5
 8000fd8:	08001289 	.word	0x08001289
 8000fdc:	0800132d 	.word	0x0800132d
 8000fe0:	080013d1 	.word	0x080013d1
 8000fe4:	08001491 	.word	0x08001491
 8000fe8:	08001535 	.word	0x08001535
 8000fec:	080015d7 	.word	0x080015d7
case MAN_INC0 :
display7seg(0);
 8000ff0:	2000      	movs	r0, #0
 8000ff2:	f7ff fa0f 	bl	8000414 <display7seg>
if (button2_flag == 1){
 8000ff6:	4b75      	ldr	r3, [pc, #468]	; (80011cc <fsm_simple_button_run+0x21c>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d109      	bne.n	8001012 <fsm_simple_button_run+0x62>
button2_flag =0;
 8000ffe:	4b73      	ldr	r3, [pc, #460]	; (80011cc <fsm_simple_button_run+0x21c>)
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
status = MAN_INC1;
 8001004:	4b70      	ldr	r3, [pc, #448]	; (80011c8 <fsm_simple_button_run+0x218>)
 8001006:	220d      	movs	r2, #13
 8001008:	601a      	str	r2, [r3, #0]
setTimer2(1000);}
 800100a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800100e:	f000 fc9b 	bl	8001948 <setTimer2>
if (button2_flag2 == 1){
 8001012:	4b6f      	ldr	r3, [pc, #444]	; (80011d0 <fsm_simple_button_run+0x220>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2b01      	cmp	r3, #1
 8001018:	d108      	bne.n	800102c <fsm_simple_button_run+0x7c>
	button2_flag2 =0;
 800101a:	4b6d      	ldr	r3, [pc, #436]	; (80011d0 <fsm_simple_button_run+0x220>)
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
status = LONG_0;
 8001020:	4b69      	ldr	r3, [pc, #420]	; (80011c8 <fsm_simple_button_run+0x218>)
 8001022:	221e      	movs	r2, #30
 8001024:	601a      	str	r2, [r3, #0]
setTimer1(100);
 8001026:	2064      	movs	r0, #100	; 0x64
 8001028:	f000 fc7a 	bl	8001920 <setTimer1>
}
if (button3_flag == 1){
 800102c:	4b69      	ldr	r3, [pc, #420]	; (80011d4 <fsm_simple_button_run+0x224>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2b01      	cmp	r3, #1
 8001032:	d109      	bne.n	8001048 <fsm_simple_button_run+0x98>
button3_flag =0;
 8001034:	4b67      	ldr	r3, [pc, #412]	; (80011d4 <fsm_simple_button_run+0x224>)
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
status = MAN_INC9;
 800103a:	4b63      	ldr	r3, [pc, #396]	; (80011c8 <fsm_simple_button_run+0x218>)
 800103c:	2215      	movs	r2, #21
 800103e:	601a      	str	r2, [r3, #0]
setTimer2(1000);
 8001040:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001044:	f000 fc80 	bl	8001948 <setTimer2>
}
if (timer_flag2 == 1){
 8001048:	4b63      	ldr	r3, [pc, #396]	; (80011d8 <fsm_simple_button_run+0x228>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2b01      	cmp	r3, #1
 800104e:	d108      	bne.n	8001062 <fsm_simple_button_run+0xb2>
timer_flag2 = 0;
 8001050:	4b61      	ldr	r3, [pc, #388]	; (80011d8 <fsm_simple_button_run+0x228>)
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
status = AUTO_0;
 8001056:	4b5c      	ldr	r3, [pc, #368]	; (80011c8 <fsm_simple_button_run+0x218>)
 8001058:	2232      	movs	r2, #50	; 0x32
 800105a:	601a      	str	r2, [r3, #0]
setTimer2(100);
 800105c:	2064      	movs	r0, #100	; 0x64
 800105e:	f000 fc73 	bl	8001948 <setTimer2>
}
if (button3_flag2 == 1){
 8001062:	4b5e      	ldr	r3, [pc, #376]	; (80011dc <fsm_simple_button_run+0x22c>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	2b01      	cmp	r3, #1
 8001068:	f040 8308 	bne.w	800167c <fsm_simple_button_run+0x6cc>
button3_flag2 =0;
 800106c:	4b5b      	ldr	r3, [pc, #364]	; (80011dc <fsm_simple_button_run+0x22c>)
 800106e:	2200      	movs	r2, #0
 8001070:	601a      	str	r2, [r3, #0]
status = LONG_0;
 8001072:	4b55      	ldr	r3, [pc, #340]	; (80011c8 <fsm_simple_button_run+0x218>)
 8001074:	221e      	movs	r2, #30
 8001076:	601a      	str	r2, [r3, #0]
setTimer1(100);
 8001078:	2064      	movs	r0, #100	; 0x64
 800107a:	f000 fc51 	bl	8001920 <setTimer1>
}

break;
 800107e:	e2fd      	b.n	800167c <fsm_simple_button_run+0x6cc>
case MAN_INC1:
display7seg(1);
 8001080:	2001      	movs	r0, #1
 8001082:	f7ff f9c7 	bl	8000414 <display7seg>
if (button1_flag ==1 ){
 8001086:	4b56      	ldr	r3, [pc, #344]	; (80011e0 <fsm_simple_button_run+0x230>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	2b01      	cmp	r3, #1
 800108c:	d105      	bne.n	800109a <fsm_simple_button_run+0xea>
button1_flag = 0;
 800108e:	4b54      	ldr	r3, [pc, #336]	; (80011e0 <fsm_simple_button_run+0x230>)
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
status = INIT;
 8001094:	4b4c      	ldr	r3, [pc, #304]	; (80011c8 <fsm_simple_button_run+0x218>)
 8001096:	2201      	movs	r2, #1
 8001098:	601a      	str	r2, [r3, #0]
}
if (button2_flag == 1){
 800109a:	4b4c      	ldr	r3, [pc, #304]	; (80011cc <fsm_simple_button_run+0x21c>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d109      	bne.n	80010b6 <fsm_simple_button_run+0x106>
button2_flag =0;
 80010a2:	4b4a      	ldr	r3, [pc, #296]	; (80011cc <fsm_simple_button_run+0x21c>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
status = MAN_INC2;
 80010a8:	4b47      	ldr	r3, [pc, #284]	; (80011c8 <fsm_simple_button_run+0x218>)
 80010aa:	220e      	movs	r2, #14
 80010ac:	601a      	str	r2, [r3, #0]
setTimer2(1000);
 80010ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010b2:	f000 fc49 	bl	8001948 <setTimer2>
}
if (button2_flag2 == 1){
 80010b6:	4b46      	ldr	r3, [pc, #280]	; (80011d0 <fsm_simple_button_run+0x220>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d108      	bne.n	80010d0 <fsm_simple_button_run+0x120>
	button2_flag2 =0;
 80010be:	4b44      	ldr	r3, [pc, #272]	; (80011d0 <fsm_simple_button_run+0x220>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
status = LONG_1;
 80010c4:	4b40      	ldr	r3, [pc, #256]	; (80011c8 <fsm_simple_button_run+0x218>)
 80010c6:	221f      	movs	r2, #31
 80010c8:	601a      	str	r2, [r3, #0]
setTimer1(100);
 80010ca:	2064      	movs	r0, #100	; 0x64
 80010cc:	f000 fc28 	bl	8001920 <setTimer1>
}
if (button3_flag == 1){
 80010d0:	4b40      	ldr	r3, [pc, #256]	; (80011d4 <fsm_simple_button_run+0x224>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d109      	bne.n	80010ec <fsm_simple_button_run+0x13c>
	button3_flag =0;
 80010d8:	4b3e      	ldr	r3, [pc, #248]	; (80011d4 <fsm_simple_button_run+0x224>)
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
	status = MAN_INC0;
 80010de:	4b3a      	ldr	r3, [pc, #232]	; (80011c8 <fsm_simple_button_run+0x218>)
 80010e0:	220c      	movs	r2, #12
 80010e2:	601a      	str	r2, [r3, #0]
	setTimer2(1000);}
 80010e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010e8:	f000 fc2e 	bl	8001948 <setTimer2>
if (timer_flag2 == 1){
 80010ec:	4b3a      	ldr	r3, [pc, #232]	; (80011d8 <fsm_simple_button_run+0x228>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d108      	bne.n	8001106 <fsm_simple_button_run+0x156>
timer_flag2 = 0;
 80010f4:	4b38      	ldr	r3, [pc, #224]	; (80011d8 <fsm_simple_button_run+0x228>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
status = AUTO_1;
 80010fa:	4b33      	ldr	r3, [pc, #204]	; (80011c8 <fsm_simple_button_run+0x218>)
 80010fc:	2233      	movs	r2, #51	; 0x33
 80010fe:	601a      	str	r2, [r3, #0]
setTimer2(100);
 8001100:	2064      	movs	r0, #100	; 0x64
 8001102:	f000 fc21 	bl	8001948 <setTimer2>
}
if (button3_flag2 == 1){
 8001106:	4b35      	ldr	r3, [pc, #212]	; (80011dc <fsm_simple_button_run+0x22c>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	2b01      	cmp	r3, #1
 800110c:	f040 82b8 	bne.w	8001680 <fsm_simple_button_run+0x6d0>
button3_flag2 =0;
 8001110:	4b32      	ldr	r3, [pc, #200]	; (80011dc <fsm_simple_button_run+0x22c>)
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
status = LONG_1;
 8001116:	4b2c      	ldr	r3, [pc, #176]	; (80011c8 <fsm_simple_button_run+0x218>)
 8001118:	221f      	movs	r2, #31
 800111a:	601a      	str	r2, [r3, #0]
setTimer1(100);
 800111c:	2064      	movs	r0, #100	; 0x64
 800111e:	f000 fbff 	bl	8001920 <setTimer1>
}
break;
 8001122:	e2ad      	b.n	8001680 <fsm_simple_button_run+0x6d0>
case MAN_INC2:
display7seg(2);
 8001124:	2002      	movs	r0, #2
 8001126:	f7ff f975 	bl	8000414 <display7seg>
if (button1_flag ==1 ){
 800112a:	4b2d      	ldr	r3, [pc, #180]	; (80011e0 <fsm_simple_button_run+0x230>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	2b01      	cmp	r3, #1
 8001130:	d105      	bne.n	800113e <fsm_simple_button_run+0x18e>
button1_flag = 0;
 8001132:	4b2b      	ldr	r3, [pc, #172]	; (80011e0 <fsm_simple_button_run+0x230>)
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
status = INIT;
 8001138:	4b23      	ldr	r3, [pc, #140]	; (80011c8 <fsm_simple_button_run+0x218>)
 800113a:	2201      	movs	r2, #1
 800113c:	601a      	str	r2, [r3, #0]
}

if (button2_flag == 1){
 800113e:	4b23      	ldr	r3, [pc, #140]	; (80011cc <fsm_simple_button_run+0x21c>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	2b01      	cmp	r3, #1
 8001144:	d109      	bne.n	800115a <fsm_simple_button_run+0x1aa>
button2_flag =0;
 8001146:	4b21      	ldr	r3, [pc, #132]	; (80011cc <fsm_simple_button_run+0x21c>)
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
status = MAN_INC3;
 800114c:	4b1e      	ldr	r3, [pc, #120]	; (80011c8 <fsm_simple_button_run+0x218>)
 800114e:	220f      	movs	r2, #15
 8001150:	601a      	str	r2, [r3, #0]
setTimer2(1000);
 8001152:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001156:	f000 fbf7 	bl	8001948 <setTimer2>
}
if (button2_flag2 == 1){
 800115a:	4b1d      	ldr	r3, [pc, #116]	; (80011d0 <fsm_simple_button_run+0x220>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	2b01      	cmp	r3, #1
 8001160:	d108      	bne.n	8001174 <fsm_simple_button_run+0x1c4>
	button2_flag2 = 0;
 8001162:	4b1b      	ldr	r3, [pc, #108]	; (80011d0 <fsm_simple_button_run+0x220>)
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
status = LONG_2;
 8001168:	4b17      	ldr	r3, [pc, #92]	; (80011c8 <fsm_simple_button_run+0x218>)
 800116a:	2220      	movs	r2, #32
 800116c:	601a      	str	r2, [r3, #0]
setTimer1(100);
 800116e:	2064      	movs	r0, #100	; 0x64
 8001170:	f000 fbd6 	bl	8001920 <setTimer1>
}
if (button3_flag == 1){
 8001174:	4b17      	ldr	r3, [pc, #92]	; (80011d4 <fsm_simple_button_run+0x224>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2b01      	cmp	r3, #1
 800117a:	d109      	bne.n	8001190 <fsm_simple_button_run+0x1e0>
	button3_flag =0;
 800117c:	4b15      	ldr	r3, [pc, #84]	; (80011d4 <fsm_simple_button_run+0x224>)
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
	status = MAN_INC1;
 8001182:	4b11      	ldr	r3, [pc, #68]	; (80011c8 <fsm_simple_button_run+0x218>)
 8001184:	220d      	movs	r2, #13
 8001186:	601a      	str	r2, [r3, #0]
	setTimer2(1000);}
 8001188:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800118c:	f000 fbdc 	bl	8001948 <setTimer2>

if (timer_flag2 == 1){
 8001190:	4b11      	ldr	r3, [pc, #68]	; (80011d8 <fsm_simple_button_run+0x228>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2b01      	cmp	r3, #1
 8001196:	d108      	bne.n	80011aa <fsm_simple_button_run+0x1fa>
timer_flag2 = 0;
 8001198:	4b0f      	ldr	r3, [pc, #60]	; (80011d8 <fsm_simple_button_run+0x228>)
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
status = AUTO_2;
 800119e:	4b0a      	ldr	r3, [pc, #40]	; (80011c8 <fsm_simple_button_run+0x218>)
 80011a0:	2234      	movs	r2, #52	; 0x34
 80011a2:	601a      	str	r2, [r3, #0]
setTimer2(100);
 80011a4:	2064      	movs	r0, #100	; 0x64
 80011a6:	f000 fbcf 	bl	8001948 <setTimer2>
}
if (button3_flag2 == 1){
 80011aa:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <fsm_simple_button_run+0x22c>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	f040 8268 	bne.w	8001684 <fsm_simple_button_run+0x6d4>
button3_flag2 =0;
 80011b4:	4b09      	ldr	r3, [pc, #36]	; (80011dc <fsm_simple_button_run+0x22c>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
status = LONG_2;
 80011ba:	4b03      	ldr	r3, [pc, #12]	; (80011c8 <fsm_simple_button_run+0x218>)
 80011bc:	2220      	movs	r2, #32
 80011be:	601a      	str	r2, [r3, #0]
setTimer1(100);
 80011c0:	2064      	movs	r0, #100	; 0x64
 80011c2:	f000 fbad 	bl	8001920 <setTimer1>
}
break;
 80011c6:	e25d      	b.n	8001684 <fsm_simple_button_run+0x6d4>
 80011c8:	20000070 	.word	0x20000070
 80011cc:	20000060 	.word	0x20000060
 80011d0:	20000068 	.word	0x20000068
 80011d4:	20000064 	.word	0x20000064
 80011d8:	2000008c 	.word	0x2000008c
 80011dc:	2000006c 	.word	0x2000006c
 80011e0:	2000005c 	.word	0x2000005c

case MAN_INC3:
display7seg(3);
 80011e4:	2003      	movs	r0, #3
 80011e6:	f7ff f915 	bl	8000414 <display7seg>
if (button1_flag ==1 ){
 80011ea:	4ba2      	ldr	r3, [pc, #648]	; (8001474 <fsm_simple_button_run+0x4c4>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d105      	bne.n	80011fe <fsm_simple_button_run+0x24e>
button1_flag = 0;
 80011f2:	4ba0      	ldr	r3, [pc, #640]	; (8001474 <fsm_simple_button_run+0x4c4>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
status = INIT;
 80011f8:	4b9f      	ldr	r3, [pc, #636]	; (8001478 <fsm_simple_button_run+0x4c8>)
 80011fa:	2201      	movs	r2, #1
 80011fc:	601a      	str	r2, [r3, #0]

}
if (button2_flag == 1){
 80011fe:	4b9f      	ldr	r3, [pc, #636]	; (800147c <fsm_simple_button_run+0x4cc>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	2b01      	cmp	r3, #1
 8001204:	d109      	bne.n	800121a <fsm_simple_button_run+0x26a>
button2_flag =0;
 8001206:	4b9d      	ldr	r3, [pc, #628]	; (800147c <fsm_simple_button_run+0x4cc>)
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
status = MAN_INC4;
 800120c:	4b9a      	ldr	r3, [pc, #616]	; (8001478 <fsm_simple_button_run+0x4c8>)
 800120e:	2210      	movs	r2, #16
 8001210:	601a      	str	r2, [r3, #0]
setTimer2(1000);
 8001212:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001216:	f000 fb97 	bl	8001948 <setTimer2>
}
if (button2_flag2 == 1){
 800121a:	4b99      	ldr	r3, [pc, #612]	; (8001480 <fsm_simple_button_run+0x4d0>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2b01      	cmp	r3, #1
 8001220:	d108      	bne.n	8001234 <fsm_simple_button_run+0x284>
	button2_flag2 =0;
 8001222:	4b97      	ldr	r3, [pc, #604]	; (8001480 <fsm_simple_button_run+0x4d0>)
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
status = LONG_3;
 8001228:	4b93      	ldr	r3, [pc, #588]	; (8001478 <fsm_simple_button_run+0x4c8>)
 800122a:	2221      	movs	r2, #33	; 0x21
 800122c:	601a      	str	r2, [r3, #0]
setTimer1(100);
 800122e:	2064      	movs	r0, #100	; 0x64
 8001230:	f000 fb76 	bl	8001920 <setTimer1>
}
if (button3_flag == 1){
 8001234:	4b93      	ldr	r3, [pc, #588]	; (8001484 <fsm_simple_button_run+0x4d4>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	2b01      	cmp	r3, #1
 800123a:	d109      	bne.n	8001250 <fsm_simple_button_run+0x2a0>
	button3_flag =0;
 800123c:	4b91      	ldr	r3, [pc, #580]	; (8001484 <fsm_simple_button_run+0x4d4>)
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
	status = MAN_INC2;
 8001242:	4b8d      	ldr	r3, [pc, #564]	; (8001478 <fsm_simple_button_run+0x4c8>)
 8001244:	220e      	movs	r2, #14
 8001246:	601a      	str	r2, [r3, #0]
	setTimer2(1000);
 8001248:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800124c:	f000 fb7c 	bl	8001948 <setTimer2>
}

if (timer_flag2 == 1){
 8001250:	4b8d      	ldr	r3, [pc, #564]	; (8001488 <fsm_simple_button_run+0x4d8>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2b01      	cmp	r3, #1
 8001256:	d108      	bne.n	800126a <fsm_simple_button_run+0x2ba>
timer_flag2 = 0;
 8001258:	4b8b      	ldr	r3, [pc, #556]	; (8001488 <fsm_simple_button_run+0x4d8>)
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
status = AUTO_3;
 800125e:	4b86      	ldr	r3, [pc, #536]	; (8001478 <fsm_simple_button_run+0x4c8>)
 8001260:	2235      	movs	r2, #53	; 0x35
 8001262:	601a      	str	r2, [r3, #0]
setTimer2(100);
 8001264:	2064      	movs	r0, #100	; 0x64
 8001266:	f000 fb6f 	bl	8001948 <setTimer2>
}
if (button3_flag2 == 1){
 800126a:	4b88      	ldr	r3, [pc, #544]	; (800148c <fsm_simple_button_run+0x4dc>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	2b01      	cmp	r3, #1
 8001270:	f040 820a 	bne.w	8001688 <fsm_simple_button_run+0x6d8>
button3_flag2 =0;
 8001274:	4b85      	ldr	r3, [pc, #532]	; (800148c <fsm_simple_button_run+0x4dc>)
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
status = LONG_3;
 800127a:	4b7f      	ldr	r3, [pc, #508]	; (8001478 <fsm_simple_button_run+0x4c8>)
 800127c:	2221      	movs	r2, #33	; 0x21
 800127e:	601a      	str	r2, [r3, #0]
setTimer1(100);
 8001280:	2064      	movs	r0, #100	; 0x64
 8001282:	f000 fb4d 	bl	8001920 <setTimer1>
}
break;
 8001286:	e1ff      	b.n	8001688 <fsm_simple_button_run+0x6d8>

case MAN_INC4:
display7seg(4);
 8001288:	2004      	movs	r0, #4
 800128a:	f7ff f8c3 	bl	8000414 <display7seg>
if (button1_flag ==1 ){
 800128e:	4b79      	ldr	r3, [pc, #484]	; (8001474 <fsm_simple_button_run+0x4c4>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	2b01      	cmp	r3, #1
 8001294:	d105      	bne.n	80012a2 <fsm_simple_button_run+0x2f2>
button1_flag = 0;
 8001296:	4b77      	ldr	r3, [pc, #476]	; (8001474 <fsm_simple_button_run+0x4c4>)
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
status = INIT;
 800129c:	4b76      	ldr	r3, [pc, #472]	; (8001478 <fsm_simple_button_run+0x4c8>)
 800129e:	2201      	movs	r2, #1
 80012a0:	601a      	str	r2, [r3, #0]

}
if (button2_flag == 1){
 80012a2:	4b76      	ldr	r3, [pc, #472]	; (800147c <fsm_simple_button_run+0x4cc>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d109      	bne.n	80012be <fsm_simple_button_run+0x30e>
button2_flag =0;
 80012aa:	4b74      	ldr	r3, [pc, #464]	; (800147c <fsm_simple_button_run+0x4cc>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
status = MAN_INC5;
 80012b0:	4b71      	ldr	r3, [pc, #452]	; (8001478 <fsm_simple_button_run+0x4c8>)
 80012b2:	2211      	movs	r2, #17
 80012b4:	601a      	str	r2, [r3, #0]
setTimer2(1000);
 80012b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012ba:	f000 fb45 	bl	8001948 <setTimer2>
}
if (button2_flag2 == 1){
 80012be:	4b70      	ldr	r3, [pc, #448]	; (8001480 <fsm_simple_button_run+0x4d0>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d108      	bne.n	80012d8 <fsm_simple_button_run+0x328>
	button2_flag2 =0;
 80012c6:	4b6e      	ldr	r3, [pc, #440]	; (8001480 <fsm_simple_button_run+0x4d0>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
status = LONG_4;
 80012cc:	4b6a      	ldr	r3, [pc, #424]	; (8001478 <fsm_simple_button_run+0x4c8>)
 80012ce:	2222      	movs	r2, #34	; 0x22
 80012d0:	601a      	str	r2, [r3, #0]
setTimer1(100);
 80012d2:	2064      	movs	r0, #100	; 0x64
 80012d4:	f000 fb24 	bl	8001920 <setTimer1>
}
if (button3_flag == 1){
 80012d8:	4b6a      	ldr	r3, [pc, #424]	; (8001484 <fsm_simple_button_run+0x4d4>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d109      	bne.n	80012f4 <fsm_simple_button_run+0x344>
	button3_flag = 0;
 80012e0:	4b68      	ldr	r3, [pc, #416]	; (8001484 <fsm_simple_button_run+0x4d4>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
	status = MAN_INC3;
 80012e6:	4b64      	ldr	r3, [pc, #400]	; (8001478 <fsm_simple_button_run+0x4c8>)
 80012e8:	220f      	movs	r2, #15
 80012ea:	601a      	str	r2, [r3, #0]
	setTimer2(1000);
 80012ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012f0:	f000 fb2a 	bl	8001948 <setTimer2>
}
if (timer_flag2 == 1){
 80012f4:	4b64      	ldr	r3, [pc, #400]	; (8001488 <fsm_simple_button_run+0x4d8>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d108      	bne.n	800130e <fsm_simple_button_run+0x35e>
timer_flag2 = 0;
 80012fc:	4b62      	ldr	r3, [pc, #392]	; (8001488 <fsm_simple_button_run+0x4d8>)
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
status = AUTO_4;
 8001302:	4b5d      	ldr	r3, [pc, #372]	; (8001478 <fsm_simple_button_run+0x4c8>)
 8001304:	2236      	movs	r2, #54	; 0x36
 8001306:	601a      	str	r2, [r3, #0]
setTimer2(100);
 8001308:	2064      	movs	r0, #100	; 0x64
 800130a:	f000 fb1d 	bl	8001948 <setTimer2>
}
if (button3_flag2 == 1){
 800130e:	4b5f      	ldr	r3, [pc, #380]	; (800148c <fsm_simple_button_run+0x4dc>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	2b01      	cmp	r3, #1
 8001314:	f040 81ba 	bne.w	800168c <fsm_simple_button_run+0x6dc>
button3_flag2 =0;
 8001318:	4b5c      	ldr	r3, [pc, #368]	; (800148c <fsm_simple_button_run+0x4dc>)
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
status = LONG_4;
 800131e:	4b56      	ldr	r3, [pc, #344]	; (8001478 <fsm_simple_button_run+0x4c8>)
 8001320:	2222      	movs	r2, #34	; 0x22
 8001322:	601a      	str	r2, [r3, #0]
setTimer1(100);
 8001324:	2064      	movs	r0, #100	; 0x64
 8001326:	f000 fafb 	bl	8001920 <setTimer1>
}
break;
 800132a:	e1af      	b.n	800168c <fsm_simple_button_run+0x6dc>
case MAN_INC5:
if (button1_flag ==1 ){
 800132c:	4b51      	ldr	r3, [pc, #324]	; (8001474 <fsm_simple_button_run+0x4c4>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2b01      	cmp	r3, #1
 8001332:	d105      	bne.n	8001340 <fsm_simple_button_run+0x390>
button1_flag = 0;
 8001334:	4b4f      	ldr	r3, [pc, #316]	; (8001474 <fsm_simple_button_run+0x4c4>)
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
status = INIT;
 800133a:	4b4f      	ldr	r3, [pc, #316]	; (8001478 <fsm_simple_button_run+0x4c8>)
 800133c:	2201      	movs	r2, #1
 800133e:	601a      	str	r2, [r3, #0]
}
display7seg(5);
 8001340:	2005      	movs	r0, #5
 8001342:	f7ff f867 	bl	8000414 <display7seg>
if (button2_flag == 1){
 8001346:	4b4d      	ldr	r3, [pc, #308]	; (800147c <fsm_simple_button_run+0x4cc>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2b01      	cmp	r3, #1
 800134c:	d109      	bne.n	8001362 <fsm_simple_button_run+0x3b2>
	button2_flag =0;
 800134e:	4b4b      	ldr	r3, [pc, #300]	; (800147c <fsm_simple_button_run+0x4cc>)
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
status = MAN_INC6;
 8001354:	4b48      	ldr	r3, [pc, #288]	; (8001478 <fsm_simple_button_run+0x4c8>)
 8001356:	2212      	movs	r2, #18
 8001358:	601a      	str	r2, [r3, #0]
setTimer2(1000);
 800135a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800135e:	f000 faf3 	bl	8001948 <setTimer2>
}
if (button2_flag2 == 1){
 8001362:	4b47      	ldr	r3, [pc, #284]	; (8001480 <fsm_simple_button_run+0x4d0>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	2b01      	cmp	r3, #1
 8001368:	d108      	bne.n	800137c <fsm_simple_button_run+0x3cc>
	button2_flag2 =0;
 800136a:	4b45      	ldr	r3, [pc, #276]	; (8001480 <fsm_simple_button_run+0x4d0>)
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
	//button2_flag2 = 0;
status = LONG_5;
 8001370:	4b41      	ldr	r3, [pc, #260]	; (8001478 <fsm_simple_button_run+0x4c8>)
 8001372:	2223      	movs	r2, #35	; 0x23
 8001374:	601a      	str	r2, [r3, #0]
setTimer1(100);
 8001376:	2064      	movs	r0, #100	; 0x64
 8001378:	f000 fad2 	bl	8001920 <setTimer1>
}
if (button3_flag == 1){
 800137c:	4b41      	ldr	r3, [pc, #260]	; (8001484 <fsm_simple_button_run+0x4d4>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2b01      	cmp	r3, #1
 8001382:	d109      	bne.n	8001398 <fsm_simple_button_run+0x3e8>
	button3_flag =0;
 8001384:	4b3f      	ldr	r3, [pc, #252]	; (8001484 <fsm_simple_button_run+0x4d4>)
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
	status = MAN_INC4;
 800138a:	4b3b      	ldr	r3, [pc, #236]	; (8001478 <fsm_simple_button_run+0x4c8>)
 800138c:	2210      	movs	r2, #16
 800138e:	601a      	str	r2, [r3, #0]
	setTimer2(1000);}
 8001390:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001394:	f000 fad8 	bl	8001948 <setTimer2>
if (timer_flag2 == 1){
 8001398:	4b3b      	ldr	r3, [pc, #236]	; (8001488 <fsm_simple_button_run+0x4d8>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2b01      	cmp	r3, #1
 800139e:	d108      	bne.n	80013b2 <fsm_simple_button_run+0x402>
timer_flag2 = 0;
 80013a0:	4b39      	ldr	r3, [pc, #228]	; (8001488 <fsm_simple_button_run+0x4d8>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
status = AUTO_5;
 80013a6:	4b34      	ldr	r3, [pc, #208]	; (8001478 <fsm_simple_button_run+0x4c8>)
 80013a8:	2237      	movs	r2, #55	; 0x37
 80013aa:	601a      	str	r2, [r3, #0]
setTimer2(100);
 80013ac:	2064      	movs	r0, #100	; 0x64
 80013ae:	f000 facb 	bl	8001948 <setTimer2>
}
if (button3_flag2 == 1){
 80013b2:	4b36      	ldr	r3, [pc, #216]	; (800148c <fsm_simple_button_run+0x4dc>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	f040 816a 	bne.w	8001690 <fsm_simple_button_run+0x6e0>
button3_flag2 =0;
 80013bc:	4b33      	ldr	r3, [pc, #204]	; (800148c <fsm_simple_button_run+0x4dc>)
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
status = LONG_5;
 80013c2:	4b2d      	ldr	r3, [pc, #180]	; (8001478 <fsm_simple_button_run+0x4c8>)
 80013c4:	2223      	movs	r2, #35	; 0x23
 80013c6:	601a      	str	r2, [r3, #0]
setTimer1(100);
 80013c8:	2064      	movs	r0, #100	; 0x64
 80013ca:	f000 faa9 	bl	8001920 <setTimer1>
}
break;
 80013ce:	e15f      	b.n	8001690 <fsm_simple_button_run+0x6e0>
case MAN_INC6:
	display7seg(6);
 80013d0:	2006      	movs	r0, #6
 80013d2:	f7ff f81f 	bl	8000414 <display7seg>
if (button1_flag ==1 ){
 80013d6:	4b27      	ldr	r3, [pc, #156]	; (8001474 <fsm_simple_button_run+0x4c4>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d105      	bne.n	80013ea <fsm_simple_button_run+0x43a>
button1_flag = 0;
 80013de:	4b25      	ldr	r3, [pc, #148]	; (8001474 <fsm_simple_button_run+0x4c4>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
status = INIT;
 80013e4:	4b24      	ldr	r3, [pc, #144]	; (8001478 <fsm_simple_button_run+0x4c8>)
 80013e6:	2201      	movs	r2, #1
 80013e8:	601a      	str	r2, [r3, #0]
}
if (button2_flag == 1){
 80013ea:	4b24      	ldr	r3, [pc, #144]	; (800147c <fsm_simple_button_run+0x4cc>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d109      	bne.n	8001406 <fsm_simple_button_run+0x456>
button2_flag =0;
 80013f2:	4b22      	ldr	r3, [pc, #136]	; (800147c <fsm_simple_button_run+0x4cc>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
status = MAN_INC7;
 80013f8:	4b1f      	ldr	r3, [pc, #124]	; (8001478 <fsm_simple_button_run+0x4c8>)
 80013fa:	2213      	movs	r2, #19
 80013fc:	601a      	str	r2, [r3, #0]
setTimer2(1000);
 80013fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001402:	f000 faa1 	bl	8001948 <setTimer2>
}
if (button2_flag2 == 1){
 8001406:	4b1e      	ldr	r3, [pc, #120]	; (8001480 <fsm_simple_button_run+0x4d0>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	2b01      	cmp	r3, #1
 800140c:	d108      	bne.n	8001420 <fsm_simple_button_run+0x470>
button2_flag2 = 0;
 800140e:	4b1c      	ldr	r3, [pc, #112]	; (8001480 <fsm_simple_button_run+0x4d0>)
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
status = LONG_6;
 8001414:	4b18      	ldr	r3, [pc, #96]	; (8001478 <fsm_simple_button_run+0x4c8>)
 8001416:	2224      	movs	r2, #36	; 0x24
 8001418:	601a      	str	r2, [r3, #0]
setTimer1(100);
 800141a:	2064      	movs	r0, #100	; 0x64
 800141c:	f000 fa80 	bl	8001920 <setTimer1>
}
if (button3_flag == 1){
 8001420:	4b18      	ldr	r3, [pc, #96]	; (8001484 <fsm_simple_button_run+0x4d4>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2b01      	cmp	r3, #1
 8001426:	d109      	bne.n	800143c <fsm_simple_button_run+0x48c>
	button3_flag =0;
 8001428:	4b16      	ldr	r3, [pc, #88]	; (8001484 <fsm_simple_button_run+0x4d4>)
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
	status = MAN_INC5;
 800142e:	4b12      	ldr	r3, [pc, #72]	; (8001478 <fsm_simple_button_run+0x4c8>)
 8001430:	2211      	movs	r2, #17
 8001432:	601a      	str	r2, [r3, #0]
	setTimer2(1000);}
 8001434:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001438:	f000 fa86 	bl	8001948 <setTimer2>
if (timer_flag2 == 1){
 800143c:	4b12      	ldr	r3, [pc, #72]	; (8001488 <fsm_simple_button_run+0x4d8>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2b01      	cmp	r3, #1
 8001442:	d108      	bne.n	8001456 <fsm_simple_button_run+0x4a6>
timer_flag2 = 0;
 8001444:	4b10      	ldr	r3, [pc, #64]	; (8001488 <fsm_simple_button_run+0x4d8>)
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
status = AUTO_6;
 800144a:	4b0b      	ldr	r3, [pc, #44]	; (8001478 <fsm_simple_button_run+0x4c8>)
 800144c:	2238      	movs	r2, #56	; 0x38
 800144e:	601a      	str	r2, [r3, #0]
setTimer2(100);
 8001450:	2064      	movs	r0, #100	; 0x64
 8001452:	f000 fa79 	bl	8001948 <setTimer2>
}
if (button3_flag2 == 1){
 8001456:	4b0d      	ldr	r3, [pc, #52]	; (800148c <fsm_simple_button_run+0x4dc>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	2b01      	cmp	r3, #1
 800145c:	f040 811a 	bne.w	8001694 <fsm_simple_button_run+0x6e4>
button3_flag2 =0;
 8001460:	4b0a      	ldr	r3, [pc, #40]	; (800148c <fsm_simple_button_run+0x4dc>)
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]
status = LONG_6;
 8001466:	4b04      	ldr	r3, [pc, #16]	; (8001478 <fsm_simple_button_run+0x4c8>)
 8001468:	2224      	movs	r2, #36	; 0x24
 800146a:	601a      	str	r2, [r3, #0]
setTimer1(100);
 800146c:	2064      	movs	r0, #100	; 0x64
 800146e:	f000 fa57 	bl	8001920 <setTimer1>
}
break;
 8001472:	e10f      	b.n	8001694 <fsm_simple_button_run+0x6e4>
 8001474:	2000005c 	.word	0x2000005c
 8001478:	20000070 	.word	0x20000070
 800147c:	20000060 	.word	0x20000060
 8001480:	20000068 	.word	0x20000068
 8001484:	20000064 	.word	0x20000064
 8001488:	2000008c 	.word	0x2000008c
 800148c:	2000006c 	.word	0x2000006c
case MAN_INC7:
display7seg(7);
 8001490:	2007      	movs	r0, #7
 8001492:	f7fe ffbf 	bl	8000414 <display7seg>
if (button1_flag ==1 ){
 8001496:	4b84      	ldr	r3, [pc, #528]	; (80016a8 <fsm_simple_button_run+0x6f8>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	2b01      	cmp	r3, #1
 800149c:	d105      	bne.n	80014aa <fsm_simple_button_run+0x4fa>
button1_flag = 0;
 800149e:	4b82      	ldr	r3, [pc, #520]	; (80016a8 <fsm_simple_button_run+0x6f8>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
status = INIT;
 80014a4:	4b81      	ldr	r3, [pc, #516]	; (80016ac <fsm_simple_button_run+0x6fc>)
 80014a6:	2201      	movs	r2, #1
 80014a8:	601a      	str	r2, [r3, #0]
}
if (button2_flag == 1){
 80014aa:	4b81      	ldr	r3, [pc, #516]	; (80016b0 <fsm_simple_button_run+0x700>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d109      	bne.n	80014c6 <fsm_simple_button_run+0x516>
button2_flag =0;
 80014b2:	4b7f      	ldr	r3, [pc, #508]	; (80016b0 <fsm_simple_button_run+0x700>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
status = MAN_INC8;
 80014b8:	4b7c      	ldr	r3, [pc, #496]	; (80016ac <fsm_simple_button_run+0x6fc>)
 80014ba:	2214      	movs	r2, #20
 80014bc:	601a      	str	r2, [r3, #0]
setTimer2(1000);
 80014be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014c2:	f000 fa41 	bl	8001948 <setTimer2>
}
if (button2_flag2 == 1){
 80014c6:	4b7b      	ldr	r3, [pc, #492]	; (80016b4 <fsm_simple_button_run+0x704>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d108      	bne.n	80014e0 <fsm_simple_button_run+0x530>
button2_flag2 = 0;
 80014ce:	4b79      	ldr	r3, [pc, #484]	; (80016b4 <fsm_simple_button_run+0x704>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
status = LONG_7;
 80014d4:	4b75      	ldr	r3, [pc, #468]	; (80016ac <fsm_simple_button_run+0x6fc>)
 80014d6:	2225      	movs	r2, #37	; 0x25
 80014d8:	601a      	str	r2, [r3, #0]
setTimer1(100);
 80014da:	2064      	movs	r0, #100	; 0x64
 80014dc:	f000 fa20 	bl	8001920 <setTimer1>
}
if (button3_flag == 1){
 80014e0:	4b75      	ldr	r3, [pc, #468]	; (80016b8 <fsm_simple_button_run+0x708>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d109      	bne.n	80014fc <fsm_simple_button_run+0x54c>
	button3_flag =0;
 80014e8:	4b73      	ldr	r3, [pc, #460]	; (80016b8 <fsm_simple_button_run+0x708>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
	status = MAN_INC6;
 80014ee:	4b6f      	ldr	r3, [pc, #444]	; (80016ac <fsm_simple_button_run+0x6fc>)
 80014f0:	2212      	movs	r2, #18
 80014f2:	601a      	str	r2, [r3, #0]
	setTimer2(1000);}
 80014f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014f8:	f000 fa26 	bl	8001948 <setTimer2>
if (timer_flag2 == 1){
 80014fc:	4b6f      	ldr	r3, [pc, #444]	; (80016bc <fsm_simple_button_run+0x70c>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2b01      	cmp	r3, #1
 8001502:	d108      	bne.n	8001516 <fsm_simple_button_run+0x566>
timer_flag2 = 0;
 8001504:	4b6d      	ldr	r3, [pc, #436]	; (80016bc <fsm_simple_button_run+0x70c>)
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]
status = AUTO_7;
 800150a:	4b68      	ldr	r3, [pc, #416]	; (80016ac <fsm_simple_button_run+0x6fc>)
 800150c:	2239      	movs	r2, #57	; 0x39
 800150e:	601a      	str	r2, [r3, #0]
setTimer2(100);
 8001510:	2064      	movs	r0, #100	; 0x64
 8001512:	f000 fa19 	bl	8001948 <setTimer2>
}
if (button3_flag2 == 1){
 8001516:	4b6a      	ldr	r3, [pc, #424]	; (80016c0 <fsm_simple_button_run+0x710>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	2b01      	cmp	r3, #1
 800151c:	f040 80bc 	bne.w	8001698 <fsm_simple_button_run+0x6e8>
button3_flag2 =0;
 8001520:	4b67      	ldr	r3, [pc, #412]	; (80016c0 <fsm_simple_button_run+0x710>)
 8001522:	2200      	movs	r2, #0
 8001524:	601a      	str	r2, [r3, #0]
status = LONG_7;
 8001526:	4b61      	ldr	r3, [pc, #388]	; (80016ac <fsm_simple_button_run+0x6fc>)
 8001528:	2225      	movs	r2, #37	; 0x25
 800152a:	601a      	str	r2, [r3, #0]
setTimer1(100);
 800152c:	2064      	movs	r0, #100	; 0x64
 800152e:	f000 f9f7 	bl	8001920 <setTimer1>
}
break;
 8001532:	e0b1      	b.n	8001698 <fsm_simple_button_run+0x6e8>
case MAN_INC8:
if (button1_flag ==1 ){
 8001534:	4b5c      	ldr	r3, [pc, #368]	; (80016a8 <fsm_simple_button_run+0x6f8>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	2b01      	cmp	r3, #1
 800153a:	d105      	bne.n	8001548 <fsm_simple_button_run+0x598>
button1_flag = 0;
 800153c:	4b5a      	ldr	r3, [pc, #360]	; (80016a8 <fsm_simple_button_run+0x6f8>)
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
status = INIT;
 8001542:	4b5a      	ldr	r3, [pc, #360]	; (80016ac <fsm_simple_button_run+0x6fc>)
 8001544:	2201      	movs	r2, #1
 8001546:	601a      	str	r2, [r3, #0]

}
display7seg(8);
 8001548:	2008      	movs	r0, #8
 800154a:	f7fe ff63 	bl	8000414 <display7seg>
if (button2_flag == 1){
 800154e:	4b58      	ldr	r3, [pc, #352]	; (80016b0 <fsm_simple_button_run+0x700>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	2b01      	cmp	r3, #1
 8001554:	d109      	bne.n	800156a <fsm_simple_button_run+0x5ba>
button2_flag =0;
 8001556:	4b56      	ldr	r3, [pc, #344]	; (80016b0 <fsm_simple_button_run+0x700>)
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
status = MAN_INC9;
 800155c:	4b53      	ldr	r3, [pc, #332]	; (80016ac <fsm_simple_button_run+0x6fc>)
 800155e:	2215      	movs	r2, #21
 8001560:	601a      	str	r2, [r3, #0]
setTimer2(1000);
 8001562:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001566:	f000 f9ef 	bl	8001948 <setTimer2>
}
if (button2_flag2 == 1){
 800156a:	4b52      	ldr	r3, [pc, #328]	; (80016b4 <fsm_simple_button_run+0x704>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d108      	bne.n	8001584 <fsm_simple_button_run+0x5d4>
button2_flag2 =0;
 8001572:	4b50      	ldr	r3, [pc, #320]	; (80016b4 <fsm_simple_button_run+0x704>)
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
status = LONG_8;
 8001578:	4b4c      	ldr	r3, [pc, #304]	; (80016ac <fsm_simple_button_run+0x6fc>)
 800157a:	2226      	movs	r2, #38	; 0x26
 800157c:	601a      	str	r2, [r3, #0]
setTimer1(100);
 800157e:	2064      	movs	r0, #100	; 0x64
 8001580:	f000 f9ce 	bl	8001920 <setTimer1>
}
if (button3_flag == 1){
 8001584:	4b4c      	ldr	r3, [pc, #304]	; (80016b8 <fsm_simple_button_run+0x708>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2b01      	cmp	r3, #1
 800158a:	d109      	bne.n	80015a0 <fsm_simple_button_run+0x5f0>
	button3_flag =0;
 800158c:	4b4a      	ldr	r3, [pc, #296]	; (80016b8 <fsm_simple_button_run+0x708>)
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
	status = MAN_INC7;
 8001592:	4b46      	ldr	r3, [pc, #280]	; (80016ac <fsm_simple_button_run+0x6fc>)
 8001594:	2213      	movs	r2, #19
 8001596:	601a      	str	r2, [r3, #0]
	setTimer2(1000);}
 8001598:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800159c:	f000 f9d4 	bl	8001948 <setTimer2>
if (timer_flag2 == 1){
 80015a0:	4b46      	ldr	r3, [pc, #280]	; (80016bc <fsm_simple_button_run+0x70c>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d108      	bne.n	80015ba <fsm_simple_button_run+0x60a>
timer_flag2 = 0;
 80015a8:	4b44      	ldr	r3, [pc, #272]	; (80016bc <fsm_simple_button_run+0x70c>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
status = AUTO_8;
 80015ae:	4b3f      	ldr	r3, [pc, #252]	; (80016ac <fsm_simple_button_run+0x6fc>)
 80015b0:	223a      	movs	r2, #58	; 0x3a
 80015b2:	601a      	str	r2, [r3, #0]
setTimer2(100);
 80015b4:	2064      	movs	r0, #100	; 0x64
 80015b6:	f000 f9c7 	bl	8001948 <setTimer2>
}
if (button3_flag2 == 1){
 80015ba:	4b41      	ldr	r3, [pc, #260]	; (80016c0 <fsm_simple_button_run+0x710>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d16c      	bne.n	800169c <fsm_simple_button_run+0x6ec>
button3_flag2 =0;
 80015c2:	4b3f      	ldr	r3, [pc, #252]	; (80016c0 <fsm_simple_button_run+0x710>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
status = LONG_8;
 80015c8:	4b38      	ldr	r3, [pc, #224]	; (80016ac <fsm_simple_button_run+0x6fc>)
 80015ca:	2226      	movs	r2, #38	; 0x26
 80015cc:	601a      	str	r2, [r3, #0]
setTimer1(100);
 80015ce:	2064      	movs	r0, #100	; 0x64
 80015d0:	f000 f9a6 	bl	8001920 <setTimer1>
}
break;
 80015d4:	e062      	b.n	800169c <fsm_simple_button_run+0x6ec>
case MAN_INC9:
	display7seg(9);
 80015d6:	2009      	movs	r0, #9
 80015d8:	f7fe ff1c 	bl	8000414 <display7seg>
if (button1_flag ==1 ){
 80015dc:	4b32      	ldr	r3, [pc, #200]	; (80016a8 <fsm_simple_button_run+0x6f8>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d109      	bne.n	80015f8 <fsm_simple_button_run+0x648>
button1_flag = 0;
 80015e4:	4b30      	ldr	r3, [pc, #192]	; (80016a8 <fsm_simple_button_run+0x6f8>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
status = INIT;
 80015ea:	4b30      	ldr	r3, [pc, #192]	; (80016ac <fsm_simple_button_run+0x6fc>)
 80015ec:	2201      	movs	r2, #1
 80015ee:	601a      	str	r2, [r3, #0]
setTimer2(1000);
 80015f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015f4:	f000 f9a8 	bl	8001948 <setTimer2>
}
if (button2_flag == 1){
 80015f8:	4b2d      	ldr	r3, [pc, #180]	; (80016b0 <fsm_simple_button_run+0x700>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d105      	bne.n	800160c <fsm_simple_button_run+0x65c>
button2_flag = 0;
 8001600:	4b2b      	ldr	r3, [pc, #172]	; (80016b0 <fsm_simple_button_run+0x700>)
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
status = INIT;
 8001606:	4b29      	ldr	r3, [pc, #164]	; (80016ac <fsm_simple_button_run+0x6fc>)
 8001608:	2201      	movs	r2, #1
 800160a:	601a      	str	r2, [r3, #0]
}
if (button2_flag2 == 1){
 800160c:	4b29      	ldr	r3, [pc, #164]	; (80016b4 <fsm_simple_button_run+0x704>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2b01      	cmp	r3, #1
 8001612:	d108      	bne.n	8001626 <fsm_simple_button_run+0x676>
button2_flag2 = 0;
 8001614:	4b27      	ldr	r3, [pc, #156]	; (80016b4 <fsm_simple_button_run+0x704>)
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
status = LONG_9;
 800161a:	4b24      	ldr	r3, [pc, #144]	; (80016ac <fsm_simple_button_run+0x6fc>)
 800161c:	2227      	movs	r2, #39	; 0x27
 800161e:	601a      	str	r2, [r3, #0]
setTimer1(100);
 8001620:	2064      	movs	r0, #100	; 0x64
 8001622:	f000 f97d 	bl	8001920 <setTimer1>
}
if (timer_flag2 == 1){
 8001626:	4b25      	ldr	r3, [pc, #148]	; (80016bc <fsm_simple_button_run+0x70c>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d109      	bne.n	8001642 <fsm_simple_button_run+0x692>
timer_flag2 = 0;
 800162e:	4b23      	ldr	r3, [pc, #140]	; (80016bc <fsm_simple_button_run+0x70c>)
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
status = AUTO_9;
 8001634:	4b1d      	ldr	r3, [pc, #116]	; (80016ac <fsm_simple_button_run+0x6fc>)
 8001636:	223b      	movs	r2, #59	; 0x3b
 8001638:	601a      	str	r2, [r3, #0]
setTimer2(1000);
 800163a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800163e:	f000 f983 	bl	8001948 <setTimer2>
}
if (button3_flag == 1){
 8001642:	4b1d      	ldr	r3, [pc, #116]	; (80016b8 <fsm_simple_button_run+0x708>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2b01      	cmp	r3, #1
 8001648:	d108      	bne.n	800165c <fsm_simple_button_run+0x6ac>
	button3_flag =0;
 800164a:	4b1b      	ldr	r3, [pc, #108]	; (80016b8 <fsm_simple_button_run+0x708>)
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
	status = MAN_INC8;
 8001650:	4b16      	ldr	r3, [pc, #88]	; (80016ac <fsm_simple_button_run+0x6fc>)
 8001652:	2214      	movs	r2, #20
 8001654:	601a      	str	r2, [r3, #0]
	setTimer2(200);}
 8001656:	20c8      	movs	r0, #200	; 0xc8
 8001658:	f000 f976 	bl	8001948 <setTimer2>
if (button3_flag2 == 1){
 800165c:	4b18      	ldr	r3, [pc, #96]	; (80016c0 <fsm_simple_button_run+0x710>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2b01      	cmp	r3, #1
 8001662:	d11d      	bne.n	80016a0 <fsm_simple_button_run+0x6f0>
	button3_flag2 = 0;
 8001664:	4b16      	ldr	r3, [pc, #88]	; (80016c0 <fsm_simple_button_run+0x710>)
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
	status = LONG_9;
 800166a:	4b10      	ldr	r3, [pc, #64]	; (80016ac <fsm_simple_button_run+0x6fc>)
 800166c:	2227      	movs	r2, #39	; 0x27
 800166e:	601a      	str	r2, [r3, #0]
	setTimer1(100);
 8001670:	2064      	movs	r0, #100	; 0x64
 8001672:	f000 f955 	bl	8001920 <setTimer1>

}
break;
 8001676:	e013      	b.n	80016a0 <fsm_simple_button_run+0x6f0>
default :
break;
 8001678:	bf00      	nop
 800167a:	e012      	b.n	80016a2 <fsm_simple_button_run+0x6f2>
break;
 800167c:	bf00      	nop
 800167e:	e010      	b.n	80016a2 <fsm_simple_button_run+0x6f2>
break;
 8001680:	bf00      	nop
 8001682:	e00e      	b.n	80016a2 <fsm_simple_button_run+0x6f2>
break;
 8001684:	bf00      	nop
 8001686:	e00c      	b.n	80016a2 <fsm_simple_button_run+0x6f2>
break;
 8001688:	bf00      	nop
 800168a:	e00a      	b.n	80016a2 <fsm_simple_button_run+0x6f2>
break;
 800168c:	bf00      	nop
 800168e:	e008      	b.n	80016a2 <fsm_simple_button_run+0x6f2>
break;
 8001690:	bf00      	nop
 8001692:	e006      	b.n	80016a2 <fsm_simple_button_run+0x6f2>
break;
 8001694:	bf00      	nop
 8001696:	e004      	b.n	80016a2 <fsm_simple_button_run+0x6f2>
break;
 8001698:	bf00      	nop
 800169a:	e002      	b.n	80016a2 <fsm_simple_button_run+0x6f2>
break;
 800169c:	bf00      	nop
 800169e:	e000      	b.n	80016a2 <fsm_simple_button_run+0x6f2>
break;
 80016a0:	bf00      	nop
}
}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	2000005c 	.word	0x2000005c
 80016ac:	20000070 	.word	0x20000070
 80016b0:	20000060 	.word	0x20000060
 80016b4:	20000068 	.word	0x20000068
 80016b8:	20000064 	.word	0x20000064
 80016bc:	2000008c 	.word	0x2000008c
 80016c0:	2000006c 	.word	0x2000006c

080016c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016c8:	f000 fa70 	bl	8001bac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016cc:	f000 f81c 	bl	8001708 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016d0:	f000 f8a2 	bl	8001818 <MX_GPIO_Init>
  MX_TIM2_Init();
 80016d4:	f000 f854 	bl	8001780 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 );
 80016d8:	4808      	ldr	r0, [pc, #32]	; (80016fc <main+0x38>)
 80016da:	f001 f9b9 	bl	8002a50 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status = INIT;
 80016de:	4b08      	ldr	r3, [pc, #32]	; (8001700 <main+0x3c>)
 80016e0:	2201      	movs	r2, #1
 80016e2:	601a      	str	r2, [r3, #0]
  ledstatus = LED_INIT;
 80016e4:	4b07      	ldr	r3, [pc, #28]	; (8001704 <main+0x40>)
 80016e6:	2245      	movs	r2, #69	; 0x45
 80016e8:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */
fsm_automatic_run();
 80016ea:	f7ff f823 	bl	8000734 <fsm_automatic_run>
fsm_simple_button_run();
 80016ee:	f7ff fc5f 	bl	8000fb0 <fsm_simple_button_run>
fsm_longpress_run();
 80016f2:	f7ff faaf 	bl	8000c54 <fsm_longpress_run>
fsm_ledBlinky_run();
 80016f6:	f7fe fd29 	bl	800014c <fsm_ledBlinky_run>
fsm_automatic_run();
 80016fa:	e7f6      	b.n	80016ea <main+0x26>
 80016fc:	20000098 	.word	0x20000098
 8001700:	20000070 	.word	0x20000070
 8001704:	20000074 	.word	0x20000074

08001708 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b090      	sub	sp, #64	; 0x40
 800170c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800170e:	f107 0318 	add.w	r3, r7, #24
 8001712:	2228      	movs	r2, #40	; 0x28
 8001714:	2100      	movs	r1, #0
 8001716:	4618      	mov	r0, r3
 8001718:	f001 fd52 	bl	80031c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800171c:	1d3b      	adds	r3, r7, #4
 800171e:	2200      	movs	r2, #0
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	605a      	str	r2, [r3, #4]
 8001724:	609a      	str	r2, [r3, #8]
 8001726:	60da      	str	r2, [r3, #12]
 8001728:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800172a:	2302      	movs	r3, #2
 800172c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800172e:	2301      	movs	r3, #1
 8001730:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001732:	2310      	movs	r3, #16
 8001734:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001736:	2300      	movs	r3, #0
 8001738:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800173a:	f107 0318 	add.w	r3, r7, #24
 800173e:	4618      	mov	r0, r3
 8001740:	f000 fd4e 	bl	80021e0 <HAL_RCC_OscConfig>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800174a:	f000 f8e3 	bl	8001914 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800174e:	230f      	movs	r3, #15
 8001750:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001752:	2300      	movs	r3, #0
 8001754:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001756:	2300      	movs	r3, #0
 8001758:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800175a:	2300      	movs	r3, #0
 800175c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800175e:	2300      	movs	r3, #0
 8001760:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001762:	1d3b      	adds	r3, r7, #4
 8001764:	2100      	movs	r1, #0
 8001766:	4618      	mov	r0, r3
 8001768:	f000 ffba 	bl	80026e0 <HAL_RCC_ClockConfig>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001772:	f000 f8cf 	bl	8001914 <Error_Handler>
  }
}
 8001776:	bf00      	nop
 8001778:	3740      	adds	r7, #64	; 0x40
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
	...

08001780 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b086      	sub	sp, #24
 8001784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001786:	f107 0308 	add.w	r3, r7, #8
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	605a      	str	r2, [r3, #4]
 8001790:	609a      	str	r2, [r3, #8]
 8001792:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001794:	463b      	mov	r3, r7
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800179c:	4b1d      	ldr	r3, [pc, #116]	; (8001814 <MX_TIM2_Init+0x94>)
 800179e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80017a4:	4b1b      	ldr	r3, [pc, #108]	; (8001814 <MX_TIM2_Init+0x94>)
 80017a6:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80017aa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ac:	4b19      	ldr	r3, [pc, #100]	; (8001814 <MX_TIM2_Init+0x94>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80017b2:	4b18      	ldr	r3, [pc, #96]	; (8001814 <MX_TIM2_Init+0x94>)
 80017b4:	2209      	movs	r2, #9
 80017b6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017b8:	4b16      	ldr	r3, [pc, #88]	; (8001814 <MX_TIM2_Init+0x94>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017be:	4b15      	ldr	r3, [pc, #84]	; (8001814 <MX_TIM2_Init+0x94>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017c4:	4813      	ldr	r0, [pc, #76]	; (8001814 <MX_TIM2_Init+0x94>)
 80017c6:	f001 f8f3 	bl	80029b0 <HAL_TIM_Base_Init>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80017d0:	f000 f8a0 	bl	8001914 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017da:	f107 0308 	add.w	r3, r7, #8
 80017de:	4619      	mov	r1, r3
 80017e0:	480c      	ldr	r0, [pc, #48]	; (8001814 <MX_TIM2_Init+0x94>)
 80017e2:	f001 fa89 	bl	8002cf8 <HAL_TIM_ConfigClockSource>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80017ec:	f000 f892 	bl	8001914 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017f0:	2300      	movs	r3, #0
 80017f2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017f4:	2300      	movs	r3, #0
 80017f6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017f8:	463b      	mov	r3, r7
 80017fa:	4619      	mov	r1, r3
 80017fc:	4805      	ldr	r0, [pc, #20]	; (8001814 <MX_TIM2_Init+0x94>)
 80017fe:	f001 fc51 	bl	80030a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001808:	f000 f884 	bl	8001914 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800180c:	bf00      	nop
 800180e:	3718      	adds	r7, #24
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	20000098 	.word	0x20000098

08001818 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b088      	sub	sp, #32
 800181c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800181e:	f107 0310 	add.w	r3, r7, #16
 8001822:	2200      	movs	r2, #0
 8001824:	601a      	str	r2, [r3, #0]
 8001826:	605a      	str	r2, [r3, #4]
 8001828:	609a      	str	r2, [r3, #8]
 800182a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800182c:	4b2d      	ldr	r3, [pc, #180]	; (80018e4 <MX_GPIO_Init+0xcc>)
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	4a2c      	ldr	r2, [pc, #176]	; (80018e4 <MX_GPIO_Init+0xcc>)
 8001832:	f043 0310 	orr.w	r3, r3, #16
 8001836:	6193      	str	r3, [r2, #24]
 8001838:	4b2a      	ldr	r3, [pc, #168]	; (80018e4 <MX_GPIO_Init+0xcc>)
 800183a:	699b      	ldr	r3, [r3, #24]
 800183c:	f003 0310 	and.w	r3, r3, #16
 8001840:	60fb      	str	r3, [r7, #12]
 8001842:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001844:	4b27      	ldr	r3, [pc, #156]	; (80018e4 <MX_GPIO_Init+0xcc>)
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	4a26      	ldr	r2, [pc, #152]	; (80018e4 <MX_GPIO_Init+0xcc>)
 800184a:	f043 0304 	orr.w	r3, r3, #4
 800184e:	6193      	str	r3, [r2, #24]
 8001850:	4b24      	ldr	r3, [pc, #144]	; (80018e4 <MX_GPIO_Init+0xcc>)
 8001852:	699b      	ldr	r3, [r3, #24]
 8001854:	f003 0304 	and.w	r3, r3, #4
 8001858:	60bb      	str	r3, [r7, #8]
 800185a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800185c:	4b21      	ldr	r3, [pc, #132]	; (80018e4 <MX_GPIO_Init+0xcc>)
 800185e:	699b      	ldr	r3, [r3, #24]
 8001860:	4a20      	ldr	r2, [pc, #128]	; (80018e4 <MX_GPIO_Init+0xcc>)
 8001862:	f043 0308 	orr.w	r3, r3, #8
 8001866:	6193      	str	r3, [r2, #24]
 8001868:	4b1e      	ldr	r3, [pc, #120]	; (80018e4 <MX_GPIO_Init+0xcc>)
 800186a:	699b      	ldr	r3, [r3, #24]
 800186c:	f003 0308 	and.w	r3, r3, #8
 8001870:	607b      	str	r3, [r7, #4]
 8001872:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001874:	2200      	movs	r2, #0
 8001876:	2170      	movs	r1, #112	; 0x70
 8001878:	481b      	ldr	r0, [pc, #108]	; (80018e8 <MX_GPIO_Init+0xd0>)
 800187a:	f000 fc98 	bl	80021ae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 800187e:	2200      	movs	r2, #0
 8001880:	21fe      	movs	r1, #254	; 0xfe
 8001882:	481a      	ldr	r0, [pc, #104]	; (80018ec <MX_GPIO_Init+0xd4>)
 8001884:	f000 fc93 	bl	80021ae <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001888:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800188c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800188e:	2300      	movs	r3, #0
 8001890:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001892:	2301      	movs	r3, #1
 8001894:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001896:	f107 0310 	add.w	r3, r7, #16
 800189a:	4619      	mov	r1, r3
 800189c:	4814      	ldr	r0, [pc, #80]	; (80018f0 <MX_GPIO_Init+0xd8>)
 800189e:	f000 faf5 	bl	8001e8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80018a2:	2370      	movs	r3, #112	; 0x70
 80018a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a6:	2301      	movs	r3, #1
 80018a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018aa:	2300      	movs	r3, #0
 80018ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ae:	2302      	movs	r3, #2
 80018b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b2:	f107 0310 	add.w	r3, r7, #16
 80018b6:	4619      	mov	r1, r3
 80018b8:	480b      	ldr	r0, [pc, #44]	; (80018e8 <MX_GPIO_Init+0xd0>)
 80018ba:	f000 fae7 	bl	8001e8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB3 PB4
                           PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80018be:	23fe      	movs	r3, #254	; 0xfe
 80018c0:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c2:	2301      	movs	r3, #1
 80018c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ca:	2302      	movs	r3, #2
 80018cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ce:	f107 0310 	add.w	r3, r7, #16
 80018d2:	4619      	mov	r1, r3
 80018d4:	4805      	ldr	r0, [pc, #20]	; (80018ec <MX_GPIO_Init+0xd4>)
 80018d6:	f000 fad9 	bl	8001e8c <HAL_GPIO_Init>

}
 80018da:	bf00      	nop
 80018dc:	3720      	adds	r7, #32
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40021000 	.word	0x40021000
 80018e8:	40010800 	.word	0x40010800
 80018ec:	40010c00 	.word	0x40010c00
 80018f0:	40011000 	.word	0x40011000

080018f4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef* htim ){
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
	timerRun();
 80018fc:	f000 f84c 	bl	8001998 <timerRun>
	getKeyInput3();
 8001900:	f7fe fd34 	bl	800036c <getKeyInput3>
	getKeyInput();
 8001904:	f7fe fc8c 	bl	8000220 <getKeyInput>
	getKeyInput2();
 8001908:	f7fe fcd8 	bl	80002bc <getKeyInput2>

}
 800190c:	bf00      	nop
 800190e:	3708      	adds	r7, #8
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}

08001914 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001918:	b672      	cpsid	i
}
 800191a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800191c:	e7fe      	b.n	800191c <Error_Handler+0x8>
	...

08001920 <setTimer1>:
int timer_flag2 = 0;
int timer_flag3 = 0;
int timer_flag4=0;


void setTimer1(int duration){
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
	timer_counter1 = duration;
 8001928:	4a05      	ldr	r2, [pc, #20]	; (8001940 <setTimer1+0x20>)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6013      	str	r3, [r2, #0]
	timer_flag1 = 0;
 800192e:	4b05      	ldr	r3, [pc, #20]	; (8001944 <setTimer1+0x24>)
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
	}
 8001934:	bf00      	nop
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	bc80      	pop	{r7}
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	20000078 	.word	0x20000078
 8001944:	20000088 	.word	0x20000088

08001948 <setTimer2>:
void setTimer2(int duration){
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
	timer_counter2 = duration;
 8001950:	4a05      	ldr	r2, [pc, #20]	; (8001968 <setTimer2+0x20>)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6013      	str	r3, [r2, #0]
	timer_flag2 = 0;
 8001956:	4b05      	ldr	r3, [pc, #20]	; (800196c <setTimer2+0x24>)
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
	}
 800195c:	bf00      	nop
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	bc80      	pop	{r7}
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	2000007c 	.word	0x2000007c
 800196c:	2000008c 	.word	0x2000008c

08001970 <setTimer3>:
void setTimer3(int duration){
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
	timer_counter3 = duration;
 8001978:	4a05      	ldr	r2, [pc, #20]	; (8001990 <setTimer3+0x20>)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6013      	str	r3, [r2, #0]
	timer_flag3 = 0;
 800197e:	4b05      	ldr	r3, [pc, #20]	; (8001994 <setTimer3+0x24>)
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
	}
 8001984:	bf00      	nop
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	bc80      	pop	{r7}
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	20000080 	.word	0x20000080
 8001994:	20000090 	.word	0x20000090

08001998 <timerRun>:
void setTimer4(int duration){
	timer_counter3 = duration;
	timer_flag4 =0;
}
void timerRun(){
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
	if(timer_counter1){
 800199c:	4b21      	ldr	r3, [pc, #132]	; (8001a24 <timerRun+0x8c>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d004      	beq.n	80019ae <timerRun+0x16>
		timer_counter1--;
 80019a4:	4b1f      	ldr	r3, [pc, #124]	; (8001a24 <timerRun+0x8c>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	3b01      	subs	r3, #1
 80019aa:	4a1e      	ldr	r2, [pc, #120]	; (8001a24 <timerRun+0x8c>)
 80019ac:	6013      	str	r3, [r2, #0]
	}
	if(timer_counter1 <= 0 ){
 80019ae:	4b1d      	ldr	r3, [pc, #116]	; (8001a24 <timerRun+0x8c>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	dc02      	bgt.n	80019bc <timerRun+0x24>
		timer_flag1 = 1;
 80019b6:	4b1c      	ldr	r3, [pc, #112]	; (8001a28 <timerRun+0x90>)
 80019b8:	2201      	movs	r2, #1
 80019ba:	601a      	str	r2, [r3, #0]
	}
	if(timer_counter2){
 80019bc:	4b1b      	ldr	r3, [pc, #108]	; (8001a2c <timerRun+0x94>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d004      	beq.n	80019ce <timerRun+0x36>
		timer_counter2--;
 80019c4:	4b19      	ldr	r3, [pc, #100]	; (8001a2c <timerRun+0x94>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	3b01      	subs	r3, #1
 80019ca:	4a18      	ldr	r2, [pc, #96]	; (8001a2c <timerRun+0x94>)
 80019cc:	6013      	str	r3, [r2, #0]
		}
	if(timer_counter2 <= 0 ){
 80019ce:	4b17      	ldr	r3, [pc, #92]	; (8001a2c <timerRun+0x94>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	dc02      	bgt.n	80019dc <timerRun+0x44>
		timer_flag2 = 1;
 80019d6:	4b16      	ldr	r3, [pc, #88]	; (8001a30 <timerRun+0x98>)
 80019d8:	2201      	movs	r2, #1
 80019da:	601a      	str	r2, [r3, #0]
		}
	if(timer_counter3){
 80019dc:	4b15      	ldr	r3, [pc, #84]	; (8001a34 <timerRun+0x9c>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d004      	beq.n	80019ee <timerRun+0x56>
			timer_counter3--;
 80019e4:	4b13      	ldr	r3, [pc, #76]	; (8001a34 <timerRun+0x9c>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	3b01      	subs	r3, #1
 80019ea:	4a12      	ldr	r2, [pc, #72]	; (8001a34 <timerRun+0x9c>)
 80019ec:	6013      	str	r3, [r2, #0]
			}
		if(timer_counter3 <= 0 ){
 80019ee:	4b11      	ldr	r3, [pc, #68]	; (8001a34 <timerRun+0x9c>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	dc02      	bgt.n	80019fc <timerRun+0x64>
			timer_flag3 = 1;
 80019f6:	4b10      	ldr	r3, [pc, #64]	; (8001a38 <timerRun+0xa0>)
 80019f8:	2201      	movs	r2, #1
 80019fa:	601a      	str	r2, [r3, #0]
			}
		if(timer_counter4){
 80019fc:	4b0f      	ldr	r3, [pc, #60]	; (8001a3c <timerRun+0xa4>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d004      	beq.n	8001a0e <timerRun+0x76>
					timer_counter4--;
 8001a04:	4b0d      	ldr	r3, [pc, #52]	; (8001a3c <timerRun+0xa4>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	3b01      	subs	r3, #1
 8001a0a:	4a0c      	ldr	r2, [pc, #48]	; (8001a3c <timerRun+0xa4>)
 8001a0c:	6013      	str	r3, [r2, #0]
					}
				if(timer_counter4 <= 0 ){
 8001a0e:	4b0b      	ldr	r3, [pc, #44]	; (8001a3c <timerRun+0xa4>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	dc02      	bgt.n	8001a1c <timerRun+0x84>
					timer_flag4 = 1;
 8001a16:	4b0a      	ldr	r3, [pc, #40]	; (8001a40 <timerRun+0xa8>)
 8001a18:	2201      	movs	r2, #1
 8001a1a:	601a      	str	r2, [r3, #0]
					}

}
 8001a1c:	bf00      	nop
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bc80      	pop	{r7}
 8001a22:	4770      	bx	lr
 8001a24:	20000078 	.word	0x20000078
 8001a28:	20000088 	.word	0x20000088
 8001a2c:	2000007c 	.word	0x2000007c
 8001a30:	2000008c 	.word	0x2000008c
 8001a34:	20000080 	.word	0x20000080
 8001a38:	20000090 	.word	0x20000090
 8001a3c:	20000084 	.word	0x20000084
 8001a40:	20000094 	.word	0x20000094

08001a44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a4a:	4b15      	ldr	r3, [pc, #84]	; (8001aa0 <HAL_MspInit+0x5c>)
 8001a4c:	699b      	ldr	r3, [r3, #24]
 8001a4e:	4a14      	ldr	r2, [pc, #80]	; (8001aa0 <HAL_MspInit+0x5c>)
 8001a50:	f043 0301 	orr.w	r3, r3, #1
 8001a54:	6193      	str	r3, [r2, #24]
 8001a56:	4b12      	ldr	r3, [pc, #72]	; (8001aa0 <HAL_MspInit+0x5c>)
 8001a58:	699b      	ldr	r3, [r3, #24]
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	60bb      	str	r3, [r7, #8]
 8001a60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a62:	4b0f      	ldr	r3, [pc, #60]	; (8001aa0 <HAL_MspInit+0x5c>)
 8001a64:	69db      	ldr	r3, [r3, #28]
 8001a66:	4a0e      	ldr	r2, [pc, #56]	; (8001aa0 <HAL_MspInit+0x5c>)
 8001a68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a6c:	61d3      	str	r3, [r2, #28]
 8001a6e:	4b0c      	ldr	r3, [pc, #48]	; (8001aa0 <HAL_MspInit+0x5c>)
 8001a70:	69db      	ldr	r3, [r3, #28]
 8001a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a76:	607b      	str	r3, [r7, #4]
 8001a78:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001a7a:	4b0a      	ldr	r3, [pc, #40]	; (8001aa4 <HAL_MspInit+0x60>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	4a04      	ldr	r2, [pc, #16]	; (8001aa4 <HAL_MspInit+0x60>)
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a96:	bf00      	nop
 8001a98:	3714      	adds	r7, #20
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bc80      	pop	{r7}
 8001a9e:	4770      	bx	lr
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	40010000 	.word	0x40010000

08001aa8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ab8:	d113      	bne.n	8001ae2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001aba:	4b0c      	ldr	r3, [pc, #48]	; (8001aec <HAL_TIM_Base_MspInit+0x44>)
 8001abc:	69db      	ldr	r3, [r3, #28]
 8001abe:	4a0b      	ldr	r2, [pc, #44]	; (8001aec <HAL_TIM_Base_MspInit+0x44>)
 8001ac0:	f043 0301 	orr.w	r3, r3, #1
 8001ac4:	61d3      	str	r3, [r2, #28]
 8001ac6:	4b09      	ldr	r3, [pc, #36]	; (8001aec <HAL_TIM_Base_MspInit+0x44>)
 8001ac8:	69db      	ldr	r3, [r3, #28]
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	60fb      	str	r3, [r7, #12]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	201c      	movs	r0, #28
 8001ad8:	f000 f9a1 	bl	8001e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001adc:	201c      	movs	r0, #28
 8001ade:	f000 f9ba 	bl	8001e56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001ae2:	bf00      	nop
 8001ae4:	3710      	adds	r7, #16
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40021000 	.word	0x40021000

08001af0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001af4:	e7fe      	b.n	8001af4 <NMI_Handler+0x4>

08001af6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001af6:	b480      	push	{r7}
 8001af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001afa:	e7fe      	b.n	8001afa <HardFault_Handler+0x4>

08001afc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b00:	e7fe      	b.n	8001b00 <MemManage_Handler+0x4>

08001b02 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b02:	b480      	push	{r7}
 8001b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b06:	e7fe      	b.n	8001b06 <BusFault_Handler+0x4>

08001b08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b0c:	e7fe      	b.n	8001b0c <UsageFault_Handler+0x4>

08001b0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b12:	bf00      	nop
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bc80      	pop	{r7}
 8001b18:	4770      	bx	lr

08001b1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b1e:	bf00      	nop
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bc80      	pop	{r7}
 8001b24:	4770      	bx	lr

08001b26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b26:	b480      	push	{r7}
 8001b28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bc80      	pop	{r7}
 8001b30:	4770      	bx	lr

08001b32 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b36:	f000 f87f 	bl	8001c38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
	...

08001b40 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b44:	4802      	ldr	r0, [pc, #8]	; (8001b50 <TIM2_IRQHandler+0x10>)
 8001b46:	f000 ffcf 	bl	8002ae8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b4a:	bf00      	nop
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	20000098 	.word	0x20000098

08001b54 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b58:	bf00      	nop
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bc80      	pop	{r7}
 8001b5e:	4770      	bx	lr

08001b60 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b60:	480c      	ldr	r0, [pc, #48]	; (8001b94 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b62:	490d      	ldr	r1, [pc, #52]	; (8001b98 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b64:	4a0d      	ldr	r2, [pc, #52]	; (8001b9c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b68:	e002      	b.n	8001b70 <LoopCopyDataInit>

08001b6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b6e:	3304      	adds	r3, #4

08001b70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b74:	d3f9      	bcc.n	8001b6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b76:	4a0a      	ldr	r2, [pc, #40]	; (8001ba0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b78:	4c0a      	ldr	r4, [pc, #40]	; (8001ba4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b7c:	e001      	b.n	8001b82 <LoopFillZerobss>

08001b7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b80:	3204      	adds	r2, #4

08001b82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b84:	d3fb      	bcc.n	8001b7e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b86:	f7ff ffe5 	bl	8001b54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b8a:	f001 faf5 	bl	8003178 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b8e:	f7ff fd99 	bl	80016c4 <main>
  bx lr
 8001b92:	4770      	bx	lr
  ldr r0, =_sdata
 8001b94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b98:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 8001b9c:	08003210 	.word	0x08003210
  ldr r2, =_sbss
 8001ba0:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 8001ba4:	200000e4 	.word	0x200000e4

08001ba8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ba8:	e7fe      	b.n	8001ba8 <ADC1_2_IRQHandler>
	...

08001bac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bb0:	4b08      	ldr	r3, [pc, #32]	; (8001bd4 <HAL_Init+0x28>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a07      	ldr	r2, [pc, #28]	; (8001bd4 <HAL_Init+0x28>)
 8001bb6:	f043 0310 	orr.w	r3, r3, #16
 8001bba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bbc:	2003      	movs	r0, #3
 8001bbe:	f000 f923 	bl	8001e08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bc2:	200f      	movs	r0, #15
 8001bc4:	f000 f808 	bl	8001bd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bc8:	f7ff ff3c 	bl	8001a44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40022000 	.word	0x40022000

08001bd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001be0:	4b12      	ldr	r3, [pc, #72]	; (8001c2c <HAL_InitTick+0x54>)
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	4b12      	ldr	r3, [pc, #72]	; (8001c30 <HAL_InitTick+0x58>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	4619      	mov	r1, r3
 8001bea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bee:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f000 f93b 	bl	8001e72 <HAL_SYSTICK_Config>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e00e      	b.n	8001c24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2b0f      	cmp	r3, #15
 8001c0a:	d80a      	bhi.n	8001c22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	6879      	ldr	r1, [r7, #4]
 8001c10:	f04f 30ff 	mov.w	r0, #4294967295
 8001c14:	f000 f903 	bl	8001e1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c18:	4a06      	ldr	r2, [pc, #24]	; (8001c34 <HAL_InitTick+0x5c>)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	e000      	b.n	8001c24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3708      	adds	r7, #8
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	20000034 	.word	0x20000034
 8001c30:	2000003c 	.word	0x2000003c
 8001c34:	20000038 	.word	0x20000038

08001c38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c3c:	4b05      	ldr	r3, [pc, #20]	; (8001c54 <HAL_IncTick+0x1c>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	461a      	mov	r2, r3
 8001c42:	4b05      	ldr	r3, [pc, #20]	; (8001c58 <HAL_IncTick+0x20>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4413      	add	r3, r2
 8001c48:	4a03      	ldr	r2, [pc, #12]	; (8001c58 <HAL_IncTick+0x20>)
 8001c4a:	6013      	str	r3, [r2, #0]
}
 8001c4c:	bf00      	nop
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bc80      	pop	{r7}
 8001c52:	4770      	bx	lr
 8001c54:	2000003c 	.word	0x2000003c
 8001c58:	200000e0 	.word	0x200000e0

08001c5c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c60:	4b02      	ldr	r3, [pc, #8]	; (8001c6c <HAL_GetTick+0x10>)
 8001c62:	681b      	ldr	r3, [r3, #0]
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bc80      	pop	{r7}
 8001c6a:	4770      	bx	lr
 8001c6c:	200000e0 	.word	0x200000e0

08001c70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b085      	sub	sp, #20
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f003 0307 	and.w	r3, r3, #7
 8001c7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c80:	4b0c      	ldr	r3, [pc, #48]	; (8001cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c86:	68ba      	ldr	r2, [r7, #8]
 8001c88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ca0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ca2:	4a04      	ldr	r2, [pc, #16]	; (8001cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	60d3      	str	r3, [r2, #12]
}
 8001ca8:	bf00      	nop
 8001caa:	3714      	adds	r7, #20
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bc80      	pop	{r7}
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	e000ed00 	.word	0xe000ed00

08001cb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cbc:	4b04      	ldr	r3, [pc, #16]	; (8001cd0 <__NVIC_GetPriorityGrouping+0x18>)
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	0a1b      	lsrs	r3, r3, #8
 8001cc2:	f003 0307 	and.w	r3, r3, #7
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bc80      	pop	{r7}
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	e000ed00 	.word	0xe000ed00

08001cd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	4603      	mov	r3, r0
 8001cdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	db0b      	blt.n	8001cfe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ce6:	79fb      	ldrb	r3, [r7, #7]
 8001ce8:	f003 021f 	and.w	r2, r3, #31
 8001cec:	4906      	ldr	r1, [pc, #24]	; (8001d08 <__NVIC_EnableIRQ+0x34>)
 8001cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf2:	095b      	lsrs	r3, r3, #5
 8001cf4:	2001      	movs	r0, #1
 8001cf6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cfe:	bf00      	nop
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bc80      	pop	{r7}
 8001d06:	4770      	bx	lr
 8001d08:	e000e100 	.word	0xe000e100

08001d0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	4603      	mov	r3, r0
 8001d14:	6039      	str	r1, [r7, #0]
 8001d16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	db0a      	blt.n	8001d36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	b2da      	uxtb	r2, r3
 8001d24:	490c      	ldr	r1, [pc, #48]	; (8001d58 <__NVIC_SetPriority+0x4c>)
 8001d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2a:	0112      	lsls	r2, r2, #4
 8001d2c:	b2d2      	uxtb	r2, r2
 8001d2e:	440b      	add	r3, r1
 8001d30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d34:	e00a      	b.n	8001d4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	b2da      	uxtb	r2, r3
 8001d3a:	4908      	ldr	r1, [pc, #32]	; (8001d5c <__NVIC_SetPriority+0x50>)
 8001d3c:	79fb      	ldrb	r3, [r7, #7]
 8001d3e:	f003 030f 	and.w	r3, r3, #15
 8001d42:	3b04      	subs	r3, #4
 8001d44:	0112      	lsls	r2, r2, #4
 8001d46:	b2d2      	uxtb	r2, r2
 8001d48:	440b      	add	r3, r1
 8001d4a:	761a      	strb	r2, [r3, #24]
}
 8001d4c:	bf00      	nop
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bc80      	pop	{r7}
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	e000e100 	.word	0xe000e100
 8001d5c:	e000ed00 	.word	0xe000ed00

08001d60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b089      	sub	sp, #36	; 0x24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	60b9      	str	r1, [r7, #8]
 8001d6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	f003 0307 	and.w	r3, r3, #7
 8001d72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	f1c3 0307 	rsb	r3, r3, #7
 8001d7a:	2b04      	cmp	r3, #4
 8001d7c:	bf28      	it	cs
 8001d7e:	2304      	movcs	r3, #4
 8001d80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	3304      	adds	r3, #4
 8001d86:	2b06      	cmp	r3, #6
 8001d88:	d902      	bls.n	8001d90 <NVIC_EncodePriority+0x30>
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	3b03      	subs	r3, #3
 8001d8e:	e000      	b.n	8001d92 <NVIC_EncodePriority+0x32>
 8001d90:	2300      	movs	r3, #0
 8001d92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d94:	f04f 32ff 	mov.w	r2, #4294967295
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9e:	43da      	mvns	r2, r3
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	401a      	ands	r2, r3
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001da8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	fa01 f303 	lsl.w	r3, r1, r3
 8001db2:	43d9      	mvns	r1, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001db8:	4313      	orrs	r3, r2
         );
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3724      	adds	r7, #36	; 0x24
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bc80      	pop	{r7}
 8001dc2:	4770      	bx	lr

08001dc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dd4:	d301      	bcc.n	8001dda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e00f      	b.n	8001dfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dda:	4a0a      	ldr	r2, [pc, #40]	; (8001e04 <SysTick_Config+0x40>)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	3b01      	subs	r3, #1
 8001de0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001de2:	210f      	movs	r1, #15
 8001de4:	f04f 30ff 	mov.w	r0, #4294967295
 8001de8:	f7ff ff90 	bl	8001d0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dec:	4b05      	ldr	r3, [pc, #20]	; (8001e04 <SysTick_Config+0x40>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001df2:	4b04      	ldr	r3, [pc, #16]	; (8001e04 <SysTick_Config+0x40>)
 8001df4:	2207      	movs	r2, #7
 8001df6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	e000e010 	.word	0xe000e010

08001e08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f7ff ff2d 	bl	8001c70 <__NVIC_SetPriorityGrouping>
}
 8001e16:	bf00      	nop
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b086      	sub	sp, #24
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	4603      	mov	r3, r0
 8001e26:	60b9      	str	r1, [r7, #8]
 8001e28:	607a      	str	r2, [r7, #4]
 8001e2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e30:	f7ff ff42 	bl	8001cb8 <__NVIC_GetPriorityGrouping>
 8001e34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	68b9      	ldr	r1, [r7, #8]
 8001e3a:	6978      	ldr	r0, [r7, #20]
 8001e3c:	f7ff ff90 	bl	8001d60 <NVIC_EncodePriority>
 8001e40:	4602      	mov	r2, r0
 8001e42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e46:	4611      	mov	r1, r2
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7ff ff5f 	bl	8001d0c <__NVIC_SetPriority>
}
 8001e4e:	bf00      	nop
 8001e50:	3718      	adds	r7, #24
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b082      	sub	sp, #8
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7ff ff35 	bl	8001cd4 <__NVIC_EnableIRQ>
}
 8001e6a:	bf00      	nop
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b082      	sub	sp, #8
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f7ff ffa2 	bl	8001dc4 <SysTick_Config>
 8001e80:	4603      	mov	r3, r0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
	...

08001e8c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b08b      	sub	sp, #44	; 0x2c
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e96:	2300      	movs	r3, #0
 8001e98:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e9e:	e148      	b.n	8002132 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	69fa      	ldr	r2, [r7, #28]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	f040 8137 	bne.w	800212c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	4aa3      	ldr	r2, [pc, #652]	; (8002150 <HAL_GPIO_Init+0x2c4>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d05e      	beq.n	8001f86 <HAL_GPIO_Init+0xfa>
 8001ec8:	4aa1      	ldr	r2, [pc, #644]	; (8002150 <HAL_GPIO_Init+0x2c4>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d875      	bhi.n	8001fba <HAL_GPIO_Init+0x12e>
 8001ece:	4aa1      	ldr	r2, [pc, #644]	; (8002154 <HAL_GPIO_Init+0x2c8>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d058      	beq.n	8001f86 <HAL_GPIO_Init+0xfa>
 8001ed4:	4a9f      	ldr	r2, [pc, #636]	; (8002154 <HAL_GPIO_Init+0x2c8>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d86f      	bhi.n	8001fba <HAL_GPIO_Init+0x12e>
 8001eda:	4a9f      	ldr	r2, [pc, #636]	; (8002158 <HAL_GPIO_Init+0x2cc>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d052      	beq.n	8001f86 <HAL_GPIO_Init+0xfa>
 8001ee0:	4a9d      	ldr	r2, [pc, #628]	; (8002158 <HAL_GPIO_Init+0x2cc>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d869      	bhi.n	8001fba <HAL_GPIO_Init+0x12e>
 8001ee6:	4a9d      	ldr	r2, [pc, #628]	; (800215c <HAL_GPIO_Init+0x2d0>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d04c      	beq.n	8001f86 <HAL_GPIO_Init+0xfa>
 8001eec:	4a9b      	ldr	r2, [pc, #620]	; (800215c <HAL_GPIO_Init+0x2d0>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d863      	bhi.n	8001fba <HAL_GPIO_Init+0x12e>
 8001ef2:	4a9b      	ldr	r2, [pc, #620]	; (8002160 <HAL_GPIO_Init+0x2d4>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d046      	beq.n	8001f86 <HAL_GPIO_Init+0xfa>
 8001ef8:	4a99      	ldr	r2, [pc, #612]	; (8002160 <HAL_GPIO_Init+0x2d4>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d85d      	bhi.n	8001fba <HAL_GPIO_Init+0x12e>
 8001efe:	2b12      	cmp	r3, #18
 8001f00:	d82a      	bhi.n	8001f58 <HAL_GPIO_Init+0xcc>
 8001f02:	2b12      	cmp	r3, #18
 8001f04:	d859      	bhi.n	8001fba <HAL_GPIO_Init+0x12e>
 8001f06:	a201      	add	r2, pc, #4	; (adr r2, 8001f0c <HAL_GPIO_Init+0x80>)
 8001f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f0c:	08001f87 	.word	0x08001f87
 8001f10:	08001f61 	.word	0x08001f61
 8001f14:	08001f73 	.word	0x08001f73
 8001f18:	08001fb5 	.word	0x08001fb5
 8001f1c:	08001fbb 	.word	0x08001fbb
 8001f20:	08001fbb 	.word	0x08001fbb
 8001f24:	08001fbb 	.word	0x08001fbb
 8001f28:	08001fbb 	.word	0x08001fbb
 8001f2c:	08001fbb 	.word	0x08001fbb
 8001f30:	08001fbb 	.word	0x08001fbb
 8001f34:	08001fbb 	.word	0x08001fbb
 8001f38:	08001fbb 	.word	0x08001fbb
 8001f3c:	08001fbb 	.word	0x08001fbb
 8001f40:	08001fbb 	.word	0x08001fbb
 8001f44:	08001fbb 	.word	0x08001fbb
 8001f48:	08001fbb 	.word	0x08001fbb
 8001f4c:	08001fbb 	.word	0x08001fbb
 8001f50:	08001f69 	.word	0x08001f69
 8001f54:	08001f7d 	.word	0x08001f7d
 8001f58:	4a82      	ldr	r2, [pc, #520]	; (8002164 <HAL_GPIO_Init+0x2d8>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d013      	beq.n	8001f86 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f5e:	e02c      	b.n	8001fba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	623b      	str	r3, [r7, #32]
          break;
 8001f66:	e029      	b.n	8001fbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	3304      	adds	r3, #4
 8001f6e:	623b      	str	r3, [r7, #32]
          break;
 8001f70:	e024      	b.n	8001fbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	3308      	adds	r3, #8
 8001f78:	623b      	str	r3, [r7, #32]
          break;
 8001f7a:	e01f      	b.n	8001fbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	330c      	adds	r3, #12
 8001f82:	623b      	str	r3, [r7, #32]
          break;
 8001f84:	e01a      	b.n	8001fbc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d102      	bne.n	8001f94 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f8e:	2304      	movs	r3, #4
 8001f90:	623b      	str	r3, [r7, #32]
          break;
 8001f92:	e013      	b.n	8001fbc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d105      	bne.n	8001fa8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f9c:	2308      	movs	r3, #8
 8001f9e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	69fa      	ldr	r2, [r7, #28]
 8001fa4:	611a      	str	r2, [r3, #16]
          break;
 8001fa6:	e009      	b.n	8001fbc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fa8:	2308      	movs	r3, #8
 8001faa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	69fa      	ldr	r2, [r7, #28]
 8001fb0:	615a      	str	r2, [r3, #20]
          break;
 8001fb2:	e003      	b.n	8001fbc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	623b      	str	r3, [r7, #32]
          break;
 8001fb8:	e000      	b.n	8001fbc <HAL_GPIO_Init+0x130>
          break;
 8001fba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	2bff      	cmp	r3, #255	; 0xff
 8001fc0:	d801      	bhi.n	8001fc6 <HAL_GPIO_Init+0x13a>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	e001      	b.n	8001fca <HAL_GPIO_Init+0x13e>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	3304      	adds	r3, #4
 8001fca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	2bff      	cmp	r3, #255	; 0xff
 8001fd0:	d802      	bhi.n	8001fd8 <HAL_GPIO_Init+0x14c>
 8001fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	e002      	b.n	8001fde <HAL_GPIO_Init+0x152>
 8001fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fda:	3b08      	subs	r3, #8
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	210f      	movs	r1, #15
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fec:	43db      	mvns	r3, r3
 8001fee:	401a      	ands	r2, r3
 8001ff0:	6a39      	ldr	r1, [r7, #32]
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff8:	431a      	orrs	r2, r3
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002006:	2b00      	cmp	r3, #0
 8002008:	f000 8090 	beq.w	800212c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800200c:	4b56      	ldr	r3, [pc, #344]	; (8002168 <HAL_GPIO_Init+0x2dc>)
 800200e:	699b      	ldr	r3, [r3, #24]
 8002010:	4a55      	ldr	r2, [pc, #340]	; (8002168 <HAL_GPIO_Init+0x2dc>)
 8002012:	f043 0301 	orr.w	r3, r3, #1
 8002016:	6193      	str	r3, [r2, #24]
 8002018:	4b53      	ldr	r3, [pc, #332]	; (8002168 <HAL_GPIO_Init+0x2dc>)
 800201a:	699b      	ldr	r3, [r3, #24]
 800201c:	f003 0301 	and.w	r3, r3, #1
 8002020:	60bb      	str	r3, [r7, #8]
 8002022:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002024:	4a51      	ldr	r2, [pc, #324]	; (800216c <HAL_GPIO_Init+0x2e0>)
 8002026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002028:	089b      	lsrs	r3, r3, #2
 800202a:	3302      	adds	r3, #2
 800202c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002030:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002034:	f003 0303 	and.w	r3, r3, #3
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	220f      	movs	r2, #15
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	43db      	mvns	r3, r3
 8002042:	68fa      	ldr	r2, [r7, #12]
 8002044:	4013      	ands	r3, r2
 8002046:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4a49      	ldr	r2, [pc, #292]	; (8002170 <HAL_GPIO_Init+0x2e4>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d00d      	beq.n	800206c <HAL_GPIO_Init+0x1e0>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4a48      	ldr	r2, [pc, #288]	; (8002174 <HAL_GPIO_Init+0x2e8>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d007      	beq.n	8002068 <HAL_GPIO_Init+0x1dc>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4a47      	ldr	r2, [pc, #284]	; (8002178 <HAL_GPIO_Init+0x2ec>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d101      	bne.n	8002064 <HAL_GPIO_Init+0x1d8>
 8002060:	2302      	movs	r3, #2
 8002062:	e004      	b.n	800206e <HAL_GPIO_Init+0x1e2>
 8002064:	2303      	movs	r3, #3
 8002066:	e002      	b.n	800206e <HAL_GPIO_Init+0x1e2>
 8002068:	2301      	movs	r3, #1
 800206a:	e000      	b.n	800206e <HAL_GPIO_Init+0x1e2>
 800206c:	2300      	movs	r3, #0
 800206e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002070:	f002 0203 	and.w	r2, r2, #3
 8002074:	0092      	lsls	r2, r2, #2
 8002076:	4093      	lsls	r3, r2
 8002078:	68fa      	ldr	r2, [r7, #12]
 800207a:	4313      	orrs	r3, r2
 800207c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800207e:	493b      	ldr	r1, [pc, #236]	; (800216c <HAL_GPIO_Init+0x2e0>)
 8002080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002082:	089b      	lsrs	r3, r3, #2
 8002084:	3302      	adds	r3, #2
 8002086:	68fa      	ldr	r2, [r7, #12]
 8002088:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d006      	beq.n	80020a6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002098:	4b38      	ldr	r3, [pc, #224]	; (800217c <HAL_GPIO_Init+0x2f0>)
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	4937      	ldr	r1, [pc, #220]	; (800217c <HAL_GPIO_Init+0x2f0>)
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	600b      	str	r3, [r1, #0]
 80020a4:	e006      	b.n	80020b4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020a6:	4b35      	ldr	r3, [pc, #212]	; (800217c <HAL_GPIO_Init+0x2f0>)
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	43db      	mvns	r3, r3
 80020ae:	4933      	ldr	r1, [pc, #204]	; (800217c <HAL_GPIO_Init+0x2f0>)
 80020b0:	4013      	ands	r3, r2
 80020b2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d006      	beq.n	80020ce <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020c0:	4b2e      	ldr	r3, [pc, #184]	; (800217c <HAL_GPIO_Init+0x2f0>)
 80020c2:	685a      	ldr	r2, [r3, #4]
 80020c4:	492d      	ldr	r1, [pc, #180]	; (800217c <HAL_GPIO_Init+0x2f0>)
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	604b      	str	r3, [r1, #4]
 80020cc:	e006      	b.n	80020dc <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80020ce:	4b2b      	ldr	r3, [pc, #172]	; (800217c <HAL_GPIO_Init+0x2f0>)
 80020d0:	685a      	ldr	r2, [r3, #4]
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	43db      	mvns	r3, r3
 80020d6:	4929      	ldr	r1, [pc, #164]	; (800217c <HAL_GPIO_Init+0x2f0>)
 80020d8:	4013      	ands	r3, r2
 80020da:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d006      	beq.n	80020f6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80020e8:	4b24      	ldr	r3, [pc, #144]	; (800217c <HAL_GPIO_Init+0x2f0>)
 80020ea:	689a      	ldr	r2, [r3, #8]
 80020ec:	4923      	ldr	r1, [pc, #140]	; (800217c <HAL_GPIO_Init+0x2f0>)
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	608b      	str	r3, [r1, #8]
 80020f4:	e006      	b.n	8002104 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020f6:	4b21      	ldr	r3, [pc, #132]	; (800217c <HAL_GPIO_Init+0x2f0>)
 80020f8:	689a      	ldr	r2, [r3, #8]
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	43db      	mvns	r3, r3
 80020fe:	491f      	ldr	r1, [pc, #124]	; (800217c <HAL_GPIO_Init+0x2f0>)
 8002100:	4013      	ands	r3, r2
 8002102:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d006      	beq.n	800211e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002110:	4b1a      	ldr	r3, [pc, #104]	; (800217c <HAL_GPIO_Init+0x2f0>)
 8002112:	68da      	ldr	r2, [r3, #12]
 8002114:	4919      	ldr	r1, [pc, #100]	; (800217c <HAL_GPIO_Init+0x2f0>)
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	4313      	orrs	r3, r2
 800211a:	60cb      	str	r3, [r1, #12]
 800211c:	e006      	b.n	800212c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800211e:	4b17      	ldr	r3, [pc, #92]	; (800217c <HAL_GPIO_Init+0x2f0>)
 8002120:	68da      	ldr	r2, [r3, #12]
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	43db      	mvns	r3, r3
 8002126:	4915      	ldr	r1, [pc, #84]	; (800217c <HAL_GPIO_Init+0x2f0>)
 8002128:	4013      	ands	r3, r2
 800212a:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800212c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212e:	3301      	adds	r3, #1
 8002130:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002138:	fa22 f303 	lsr.w	r3, r2, r3
 800213c:	2b00      	cmp	r3, #0
 800213e:	f47f aeaf 	bne.w	8001ea0 <HAL_GPIO_Init+0x14>
  }
}
 8002142:	bf00      	nop
 8002144:	bf00      	nop
 8002146:	372c      	adds	r7, #44	; 0x2c
 8002148:	46bd      	mov	sp, r7
 800214a:	bc80      	pop	{r7}
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	10320000 	.word	0x10320000
 8002154:	10310000 	.word	0x10310000
 8002158:	10220000 	.word	0x10220000
 800215c:	10210000 	.word	0x10210000
 8002160:	10120000 	.word	0x10120000
 8002164:	10110000 	.word	0x10110000
 8002168:	40021000 	.word	0x40021000
 800216c:	40010000 	.word	0x40010000
 8002170:	40010800 	.word	0x40010800
 8002174:	40010c00 	.word	0x40010c00
 8002178:	40011000 	.word	0x40011000
 800217c:	40010400 	.word	0x40010400

08002180 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002180:	b480      	push	{r7}
 8002182:	b085      	sub	sp, #20
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	460b      	mov	r3, r1
 800218a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689a      	ldr	r2, [r3, #8]
 8002190:	887b      	ldrh	r3, [r7, #2]
 8002192:	4013      	ands	r3, r2
 8002194:	2b00      	cmp	r3, #0
 8002196:	d002      	beq.n	800219e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002198:	2301      	movs	r3, #1
 800219a:	73fb      	strb	r3, [r7, #15]
 800219c:	e001      	b.n	80021a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800219e:	2300      	movs	r3, #0
 80021a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3714      	adds	r7, #20
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bc80      	pop	{r7}
 80021ac:	4770      	bx	lr

080021ae <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021ae:	b480      	push	{r7}
 80021b0:	b083      	sub	sp, #12
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
 80021b6:	460b      	mov	r3, r1
 80021b8:	807b      	strh	r3, [r7, #2]
 80021ba:	4613      	mov	r3, r2
 80021bc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021be:	787b      	ldrb	r3, [r7, #1]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d003      	beq.n	80021cc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021c4:	887a      	ldrh	r2, [r7, #2]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80021ca:	e003      	b.n	80021d4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021cc:	887b      	ldrh	r3, [r7, #2]
 80021ce:	041a      	lsls	r2, r3, #16
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	611a      	str	r2, [r3, #16]
}
 80021d4:	bf00      	nop
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	bc80      	pop	{r7}
 80021dc:	4770      	bx	lr
	...

080021e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b086      	sub	sp, #24
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d101      	bne.n	80021f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e26c      	b.n	80026cc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0301 	and.w	r3, r3, #1
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	f000 8087 	beq.w	800230e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002200:	4b92      	ldr	r3, [pc, #584]	; (800244c <HAL_RCC_OscConfig+0x26c>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f003 030c 	and.w	r3, r3, #12
 8002208:	2b04      	cmp	r3, #4
 800220a:	d00c      	beq.n	8002226 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800220c:	4b8f      	ldr	r3, [pc, #572]	; (800244c <HAL_RCC_OscConfig+0x26c>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f003 030c 	and.w	r3, r3, #12
 8002214:	2b08      	cmp	r3, #8
 8002216:	d112      	bne.n	800223e <HAL_RCC_OscConfig+0x5e>
 8002218:	4b8c      	ldr	r3, [pc, #560]	; (800244c <HAL_RCC_OscConfig+0x26c>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002220:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002224:	d10b      	bne.n	800223e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002226:	4b89      	ldr	r3, [pc, #548]	; (800244c <HAL_RCC_OscConfig+0x26c>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d06c      	beq.n	800230c <HAL_RCC_OscConfig+0x12c>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d168      	bne.n	800230c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e246      	b.n	80026cc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002246:	d106      	bne.n	8002256 <HAL_RCC_OscConfig+0x76>
 8002248:	4b80      	ldr	r3, [pc, #512]	; (800244c <HAL_RCC_OscConfig+0x26c>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a7f      	ldr	r2, [pc, #508]	; (800244c <HAL_RCC_OscConfig+0x26c>)
 800224e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002252:	6013      	str	r3, [r2, #0]
 8002254:	e02e      	b.n	80022b4 <HAL_RCC_OscConfig+0xd4>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d10c      	bne.n	8002278 <HAL_RCC_OscConfig+0x98>
 800225e:	4b7b      	ldr	r3, [pc, #492]	; (800244c <HAL_RCC_OscConfig+0x26c>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a7a      	ldr	r2, [pc, #488]	; (800244c <HAL_RCC_OscConfig+0x26c>)
 8002264:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002268:	6013      	str	r3, [r2, #0]
 800226a:	4b78      	ldr	r3, [pc, #480]	; (800244c <HAL_RCC_OscConfig+0x26c>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a77      	ldr	r2, [pc, #476]	; (800244c <HAL_RCC_OscConfig+0x26c>)
 8002270:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002274:	6013      	str	r3, [r2, #0]
 8002276:	e01d      	b.n	80022b4 <HAL_RCC_OscConfig+0xd4>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002280:	d10c      	bne.n	800229c <HAL_RCC_OscConfig+0xbc>
 8002282:	4b72      	ldr	r3, [pc, #456]	; (800244c <HAL_RCC_OscConfig+0x26c>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a71      	ldr	r2, [pc, #452]	; (800244c <HAL_RCC_OscConfig+0x26c>)
 8002288:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800228c:	6013      	str	r3, [r2, #0]
 800228e:	4b6f      	ldr	r3, [pc, #444]	; (800244c <HAL_RCC_OscConfig+0x26c>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a6e      	ldr	r2, [pc, #440]	; (800244c <HAL_RCC_OscConfig+0x26c>)
 8002294:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002298:	6013      	str	r3, [r2, #0]
 800229a:	e00b      	b.n	80022b4 <HAL_RCC_OscConfig+0xd4>
 800229c:	4b6b      	ldr	r3, [pc, #428]	; (800244c <HAL_RCC_OscConfig+0x26c>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a6a      	ldr	r2, [pc, #424]	; (800244c <HAL_RCC_OscConfig+0x26c>)
 80022a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022a6:	6013      	str	r3, [r2, #0]
 80022a8:	4b68      	ldr	r3, [pc, #416]	; (800244c <HAL_RCC_OscConfig+0x26c>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a67      	ldr	r2, [pc, #412]	; (800244c <HAL_RCC_OscConfig+0x26c>)
 80022ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022b2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d013      	beq.n	80022e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022bc:	f7ff fcce 	bl	8001c5c <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022c4:	f7ff fcca 	bl	8001c5c <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b64      	cmp	r3, #100	; 0x64
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e1fa      	b.n	80026cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022d6:	4b5d      	ldr	r3, [pc, #372]	; (800244c <HAL_RCC_OscConfig+0x26c>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d0f0      	beq.n	80022c4 <HAL_RCC_OscConfig+0xe4>
 80022e2:	e014      	b.n	800230e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e4:	f7ff fcba 	bl	8001c5c <HAL_GetTick>
 80022e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ea:	e008      	b.n	80022fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022ec:	f7ff fcb6 	bl	8001c5c <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b64      	cmp	r3, #100	; 0x64
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e1e6      	b.n	80026cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022fe:	4b53      	ldr	r3, [pc, #332]	; (800244c <HAL_RCC_OscConfig+0x26c>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d1f0      	bne.n	80022ec <HAL_RCC_OscConfig+0x10c>
 800230a:	e000      	b.n	800230e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800230c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0302 	and.w	r3, r3, #2
 8002316:	2b00      	cmp	r3, #0
 8002318:	d063      	beq.n	80023e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800231a:	4b4c      	ldr	r3, [pc, #304]	; (800244c <HAL_RCC_OscConfig+0x26c>)
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f003 030c 	and.w	r3, r3, #12
 8002322:	2b00      	cmp	r3, #0
 8002324:	d00b      	beq.n	800233e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002326:	4b49      	ldr	r3, [pc, #292]	; (800244c <HAL_RCC_OscConfig+0x26c>)
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f003 030c 	and.w	r3, r3, #12
 800232e:	2b08      	cmp	r3, #8
 8002330:	d11c      	bne.n	800236c <HAL_RCC_OscConfig+0x18c>
 8002332:	4b46      	ldr	r3, [pc, #280]	; (800244c <HAL_RCC_OscConfig+0x26c>)
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d116      	bne.n	800236c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800233e:	4b43      	ldr	r3, [pc, #268]	; (800244c <HAL_RCC_OscConfig+0x26c>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b00      	cmp	r3, #0
 8002348:	d005      	beq.n	8002356 <HAL_RCC_OscConfig+0x176>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	2b01      	cmp	r3, #1
 8002350:	d001      	beq.n	8002356 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e1ba      	b.n	80026cc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002356:	4b3d      	ldr	r3, [pc, #244]	; (800244c <HAL_RCC_OscConfig+0x26c>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	695b      	ldr	r3, [r3, #20]
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	4939      	ldr	r1, [pc, #228]	; (800244c <HAL_RCC_OscConfig+0x26c>)
 8002366:	4313      	orrs	r3, r2
 8002368:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800236a:	e03a      	b.n	80023e2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	691b      	ldr	r3, [r3, #16]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d020      	beq.n	80023b6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002374:	4b36      	ldr	r3, [pc, #216]	; (8002450 <HAL_RCC_OscConfig+0x270>)
 8002376:	2201      	movs	r2, #1
 8002378:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800237a:	f7ff fc6f 	bl	8001c5c <HAL_GetTick>
 800237e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002380:	e008      	b.n	8002394 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002382:	f7ff fc6b 	bl	8001c5c <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	2b02      	cmp	r3, #2
 800238e:	d901      	bls.n	8002394 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e19b      	b.n	80026cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002394:	4b2d      	ldr	r3, [pc, #180]	; (800244c <HAL_RCC_OscConfig+0x26c>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b00      	cmp	r3, #0
 800239e:	d0f0      	beq.n	8002382 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023a0:	4b2a      	ldr	r3, [pc, #168]	; (800244c <HAL_RCC_OscConfig+0x26c>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	695b      	ldr	r3, [r3, #20]
 80023ac:	00db      	lsls	r3, r3, #3
 80023ae:	4927      	ldr	r1, [pc, #156]	; (800244c <HAL_RCC_OscConfig+0x26c>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	600b      	str	r3, [r1, #0]
 80023b4:	e015      	b.n	80023e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023b6:	4b26      	ldr	r3, [pc, #152]	; (8002450 <HAL_RCC_OscConfig+0x270>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023bc:	f7ff fc4e 	bl	8001c5c <HAL_GetTick>
 80023c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023c2:	e008      	b.n	80023d6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023c4:	f7ff fc4a 	bl	8001c5c <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d901      	bls.n	80023d6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e17a      	b.n	80026cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023d6:	4b1d      	ldr	r3, [pc, #116]	; (800244c <HAL_RCC_OscConfig+0x26c>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0302 	and.w	r3, r3, #2
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d1f0      	bne.n	80023c4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0308 	and.w	r3, r3, #8
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d03a      	beq.n	8002464 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	699b      	ldr	r3, [r3, #24]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d019      	beq.n	800242a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023f6:	4b17      	ldr	r3, [pc, #92]	; (8002454 <HAL_RCC_OscConfig+0x274>)
 80023f8:	2201      	movs	r2, #1
 80023fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023fc:	f7ff fc2e 	bl	8001c5c <HAL_GetTick>
 8002400:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002402:	e008      	b.n	8002416 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002404:	f7ff fc2a 	bl	8001c5c <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b02      	cmp	r3, #2
 8002410:	d901      	bls.n	8002416 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e15a      	b.n	80026cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002416:	4b0d      	ldr	r3, [pc, #52]	; (800244c <HAL_RCC_OscConfig+0x26c>)
 8002418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241a:	f003 0302 	and.w	r3, r3, #2
 800241e:	2b00      	cmp	r3, #0
 8002420:	d0f0      	beq.n	8002404 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002422:	2001      	movs	r0, #1
 8002424:	f000 faa6 	bl	8002974 <RCC_Delay>
 8002428:	e01c      	b.n	8002464 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800242a:	4b0a      	ldr	r3, [pc, #40]	; (8002454 <HAL_RCC_OscConfig+0x274>)
 800242c:	2200      	movs	r2, #0
 800242e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002430:	f7ff fc14 	bl	8001c5c <HAL_GetTick>
 8002434:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002436:	e00f      	b.n	8002458 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002438:	f7ff fc10 	bl	8001c5c <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b02      	cmp	r3, #2
 8002444:	d908      	bls.n	8002458 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e140      	b.n	80026cc <HAL_RCC_OscConfig+0x4ec>
 800244a:	bf00      	nop
 800244c:	40021000 	.word	0x40021000
 8002450:	42420000 	.word	0x42420000
 8002454:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002458:	4b9e      	ldr	r3, [pc, #632]	; (80026d4 <HAL_RCC_OscConfig+0x4f4>)
 800245a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245c:	f003 0302 	and.w	r3, r3, #2
 8002460:	2b00      	cmp	r3, #0
 8002462:	d1e9      	bne.n	8002438 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0304 	and.w	r3, r3, #4
 800246c:	2b00      	cmp	r3, #0
 800246e:	f000 80a6 	beq.w	80025be <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002472:	2300      	movs	r3, #0
 8002474:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002476:	4b97      	ldr	r3, [pc, #604]	; (80026d4 <HAL_RCC_OscConfig+0x4f4>)
 8002478:	69db      	ldr	r3, [r3, #28]
 800247a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d10d      	bne.n	800249e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002482:	4b94      	ldr	r3, [pc, #592]	; (80026d4 <HAL_RCC_OscConfig+0x4f4>)
 8002484:	69db      	ldr	r3, [r3, #28]
 8002486:	4a93      	ldr	r2, [pc, #588]	; (80026d4 <HAL_RCC_OscConfig+0x4f4>)
 8002488:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800248c:	61d3      	str	r3, [r2, #28]
 800248e:	4b91      	ldr	r3, [pc, #580]	; (80026d4 <HAL_RCC_OscConfig+0x4f4>)
 8002490:	69db      	ldr	r3, [r3, #28]
 8002492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002496:	60bb      	str	r3, [r7, #8]
 8002498:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800249a:	2301      	movs	r3, #1
 800249c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800249e:	4b8e      	ldr	r3, [pc, #568]	; (80026d8 <HAL_RCC_OscConfig+0x4f8>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d118      	bne.n	80024dc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024aa:	4b8b      	ldr	r3, [pc, #556]	; (80026d8 <HAL_RCC_OscConfig+0x4f8>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a8a      	ldr	r2, [pc, #552]	; (80026d8 <HAL_RCC_OscConfig+0x4f8>)
 80024b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024b6:	f7ff fbd1 	bl	8001c5c <HAL_GetTick>
 80024ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024bc:	e008      	b.n	80024d0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024be:	f7ff fbcd 	bl	8001c5c <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	2b64      	cmp	r3, #100	; 0x64
 80024ca:	d901      	bls.n	80024d0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	e0fd      	b.n	80026cc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024d0:	4b81      	ldr	r3, [pc, #516]	; (80026d8 <HAL_RCC_OscConfig+0x4f8>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d0f0      	beq.n	80024be <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d106      	bne.n	80024f2 <HAL_RCC_OscConfig+0x312>
 80024e4:	4b7b      	ldr	r3, [pc, #492]	; (80026d4 <HAL_RCC_OscConfig+0x4f4>)
 80024e6:	6a1b      	ldr	r3, [r3, #32]
 80024e8:	4a7a      	ldr	r2, [pc, #488]	; (80026d4 <HAL_RCC_OscConfig+0x4f4>)
 80024ea:	f043 0301 	orr.w	r3, r3, #1
 80024ee:	6213      	str	r3, [r2, #32]
 80024f0:	e02d      	b.n	800254e <HAL_RCC_OscConfig+0x36e>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d10c      	bne.n	8002514 <HAL_RCC_OscConfig+0x334>
 80024fa:	4b76      	ldr	r3, [pc, #472]	; (80026d4 <HAL_RCC_OscConfig+0x4f4>)
 80024fc:	6a1b      	ldr	r3, [r3, #32]
 80024fe:	4a75      	ldr	r2, [pc, #468]	; (80026d4 <HAL_RCC_OscConfig+0x4f4>)
 8002500:	f023 0301 	bic.w	r3, r3, #1
 8002504:	6213      	str	r3, [r2, #32]
 8002506:	4b73      	ldr	r3, [pc, #460]	; (80026d4 <HAL_RCC_OscConfig+0x4f4>)
 8002508:	6a1b      	ldr	r3, [r3, #32]
 800250a:	4a72      	ldr	r2, [pc, #456]	; (80026d4 <HAL_RCC_OscConfig+0x4f4>)
 800250c:	f023 0304 	bic.w	r3, r3, #4
 8002510:	6213      	str	r3, [r2, #32]
 8002512:	e01c      	b.n	800254e <HAL_RCC_OscConfig+0x36e>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	2b05      	cmp	r3, #5
 800251a:	d10c      	bne.n	8002536 <HAL_RCC_OscConfig+0x356>
 800251c:	4b6d      	ldr	r3, [pc, #436]	; (80026d4 <HAL_RCC_OscConfig+0x4f4>)
 800251e:	6a1b      	ldr	r3, [r3, #32]
 8002520:	4a6c      	ldr	r2, [pc, #432]	; (80026d4 <HAL_RCC_OscConfig+0x4f4>)
 8002522:	f043 0304 	orr.w	r3, r3, #4
 8002526:	6213      	str	r3, [r2, #32]
 8002528:	4b6a      	ldr	r3, [pc, #424]	; (80026d4 <HAL_RCC_OscConfig+0x4f4>)
 800252a:	6a1b      	ldr	r3, [r3, #32]
 800252c:	4a69      	ldr	r2, [pc, #420]	; (80026d4 <HAL_RCC_OscConfig+0x4f4>)
 800252e:	f043 0301 	orr.w	r3, r3, #1
 8002532:	6213      	str	r3, [r2, #32]
 8002534:	e00b      	b.n	800254e <HAL_RCC_OscConfig+0x36e>
 8002536:	4b67      	ldr	r3, [pc, #412]	; (80026d4 <HAL_RCC_OscConfig+0x4f4>)
 8002538:	6a1b      	ldr	r3, [r3, #32]
 800253a:	4a66      	ldr	r2, [pc, #408]	; (80026d4 <HAL_RCC_OscConfig+0x4f4>)
 800253c:	f023 0301 	bic.w	r3, r3, #1
 8002540:	6213      	str	r3, [r2, #32]
 8002542:	4b64      	ldr	r3, [pc, #400]	; (80026d4 <HAL_RCC_OscConfig+0x4f4>)
 8002544:	6a1b      	ldr	r3, [r3, #32]
 8002546:	4a63      	ldr	r2, [pc, #396]	; (80026d4 <HAL_RCC_OscConfig+0x4f4>)
 8002548:	f023 0304 	bic.w	r3, r3, #4
 800254c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d015      	beq.n	8002582 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002556:	f7ff fb81 	bl	8001c5c <HAL_GetTick>
 800255a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800255c:	e00a      	b.n	8002574 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800255e:	f7ff fb7d 	bl	8001c5c <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	f241 3288 	movw	r2, #5000	; 0x1388
 800256c:	4293      	cmp	r3, r2
 800256e:	d901      	bls.n	8002574 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e0ab      	b.n	80026cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002574:	4b57      	ldr	r3, [pc, #348]	; (80026d4 <HAL_RCC_OscConfig+0x4f4>)
 8002576:	6a1b      	ldr	r3, [r3, #32]
 8002578:	f003 0302 	and.w	r3, r3, #2
 800257c:	2b00      	cmp	r3, #0
 800257e:	d0ee      	beq.n	800255e <HAL_RCC_OscConfig+0x37e>
 8002580:	e014      	b.n	80025ac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002582:	f7ff fb6b 	bl	8001c5c <HAL_GetTick>
 8002586:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002588:	e00a      	b.n	80025a0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800258a:	f7ff fb67 	bl	8001c5c <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	f241 3288 	movw	r2, #5000	; 0x1388
 8002598:	4293      	cmp	r3, r2
 800259a:	d901      	bls.n	80025a0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800259c:	2303      	movs	r3, #3
 800259e:	e095      	b.n	80026cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025a0:	4b4c      	ldr	r3, [pc, #304]	; (80026d4 <HAL_RCC_OscConfig+0x4f4>)
 80025a2:	6a1b      	ldr	r3, [r3, #32]
 80025a4:	f003 0302 	and.w	r3, r3, #2
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d1ee      	bne.n	800258a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80025ac:	7dfb      	ldrb	r3, [r7, #23]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d105      	bne.n	80025be <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025b2:	4b48      	ldr	r3, [pc, #288]	; (80026d4 <HAL_RCC_OscConfig+0x4f4>)
 80025b4:	69db      	ldr	r3, [r3, #28]
 80025b6:	4a47      	ldr	r2, [pc, #284]	; (80026d4 <HAL_RCC_OscConfig+0x4f4>)
 80025b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025bc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	69db      	ldr	r3, [r3, #28]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	f000 8081 	beq.w	80026ca <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025c8:	4b42      	ldr	r3, [pc, #264]	; (80026d4 <HAL_RCC_OscConfig+0x4f4>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f003 030c 	and.w	r3, r3, #12
 80025d0:	2b08      	cmp	r3, #8
 80025d2:	d061      	beq.n	8002698 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	69db      	ldr	r3, [r3, #28]
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d146      	bne.n	800266a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025dc:	4b3f      	ldr	r3, [pc, #252]	; (80026dc <HAL_RCC_OscConfig+0x4fc>)
 80025de:	2200      	movs	r2, #0
 80025e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e2:	f7ff fb3b 	bl	8001c5c <HAL_GetTick>
 80025e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025e8:	e008      	b.n	80025fc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ea:	f7ff fb37 	bl	8001c5c <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d901      	bls.n	80025fc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80025f8:	2303      	movs	r3, #3
 80025fa:	e067      	b.n	80026cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025fc:	4b35      	ldr	r3, [pc, #212]	; (80026d4 <HAL_RCC_OscConfig+0x4f4>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d1f0      	bne.n	80025ea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a1b      	ldr	r3, [r3, #32]
 800260c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002610:	d108      	bne.n	8002624 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002612:	4b30      	ldr	r3, [pc, #192]	; (80026d4 <HAL_RCC_OscConfig+0x4f4>)
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	492d      	ldr	r1, [pc, #180]	; (80026d4 <HAL_RCC_OscConfig+0x4f4>)
 8002620:	4313      	orrs	r3, r2
 8002622:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002624:	4b2b      	ldr	r3, [pc, #172]	; (80026d4 <HAL_RCC_OscConfig+0x4f4>)
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a19      	ldr	r1, [r3, #32]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002634:	430b      	orrs	r3, r1
 8002636:	4927      	ldr	r1, [pc, #156]	; (80026d4 <HAL_RCC_OscConfig+0x4f4>)
 8002638:	4313      	orrs	r3, r2
 800263a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800263c:	4b27      	ldr	r3, [pc, #156]	; (80026dc <HAL_RCC_OscConfig+0x4fc>)
 800263e:	2201      	movs	r2, #1
 8002640:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002642:	f7ff fb0b 	bl	8001c5c <HAL_GetTick>
 8002646:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002648:	e008      	b.n	800265c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800264a:	f7ff fb07 	bl	8001c5c <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	2b02      	cmp	r3, #2
 8002656:	d901      	bls.n	800265c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e037      	b.n	80026cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800265c:	4b1d      	ldr	r3, [pc, #116]	; (80026d4 <HAL_RCC_OscConfig+0x4f4>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d0f0      	beq.n	800264a <HAL_RCC_OscConfig+0x46a>
 8002668:	e02f      	b.n	80026ca <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800266a:	4b1c      	ldr	r3, [pc, #112]	; (80026dc <HAL_RCC_OscConfig+0x4fc>)
 800266c:	2200      	movs	r2, #0
 800266e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002670:	f7ff faf4 	bl	8001c5c <HAL_GetTick>
 8002674:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002676:	e008      	b.n	800268a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002678:	f7ff faf0 	bl	8001c5c <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	2b02      	cmp	r3, #2
 8002684:	d901      	bls.n	800268a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e020      	b.n	80026cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800268a:	4b12      	ldr	r3, [pc, #72]	; (80026d4 <HAL_RCC_OscConfig+0x4f4>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d1f0      	bne.n	8002678 <HAL_RCC_OscConfig+0x498>
 8002696:	e018      	b.n	80026ca <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	69db      	ldr	r3, [r3, #28]
 800269c:	2b01      	cmp	r3, #1
 800269e:	d101      	bne.n	80026a4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e013      	b.n	80026cc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026a4:	4b0b      	ldr	r3, [pc, #44]	; (80026d4 <HAL_RCC_OscConfig+0x4f4>)
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a1b      	ldr	r3, [r3, #32]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d106      	bne.n	80026c6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d001      	beq.n	80026ca <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e000      	b.n	80026cc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80026ca:	2300      	movs	r3, #0
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3718      	adds	r7, #24
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	40021000 	.word	0x40021000
 80026d8:	40007000 	.word	0x40007000
 80026dc:	42420060 	.word	0x42420060

080026e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d101      	bne.n	80026f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e0d0      	b.n	8002896 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026f4:	4b6a      	ldr	r3, [pc, #424]	; (80028a0 <HAL_RCC_ClockConfig+0x1c0>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0307 	and.w	r3, r3, #7
 80026fc:	683a      	ldr	r2, [r7, #0]
 80026fe:	429a      	cmp	r2, r3
 8002700:	d910      	bls.n	8002724 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002702:	4b67      	ldr	r3, [pc, #412]	; (80028a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f023 0207 	bic.w	r2, r3, #7
 800270a:	4965      	ldr	r1, [pc, #404]	; (80028a0 <HAL_RCC_ClockConfig+0x1c0>)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	4313      	orrs	r3, r2
 8002710:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002712:	4b63      	ldr	r3, [pc, #396]	; (80028a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0307 	and.w	r3, r3, #7
 800271a:	683a      	ldr	r2, [r7, #0]
 800271c:	429a      	cmp	r2, r3
 800271e:	d001      	beq.n	8002724 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e0b8      	b.n	8002896 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0302 	and.w	r3, r3, #2
 800272c:	2b00      	cmp	r3, #0
 800272e:	d020      	beq.n	8002772 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0304 	and.w	r3, r3, #4
 8002738:	2b00      	cmp	r3, #0
 800273a:	d005      	beq.n	8002748 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800273c:	4b59      	ldr	r3, [pc, #356]	; (80028a4 <HAL_RCC_ClockConfig+0x1c4>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	4a58      	ldr	r2, [pc, #352]	; (80028a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002742:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002746:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0308 	and.w	r3, r3, #8
 8002750:	2b00      	cmp	r3, #0
 8002752:	d005      	beq.n	8002760 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002754:	4b53      	ldr	r3, [pc, #332]	; (80028a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	4a52      	ldr	r2, [pc, #328]	; (80028a4 <HAL_RCC_ClockConfig+0x1c4>)
 800275a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800275e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002760:	4b50      	ldr	r3, [pc, #320]	; (80028a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	494d      	ldr	r1, [pc, #308]	; (80028a4 <HAL_RCC_ClockConfig+0x1c4>)
 800276e:	4313      	orrs	r3, r2
 8002770:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0301 	and.w	r3, r3, #1
 800277a:	2b00      	cmp	r3, #0
 800277c:	d040      	beq.n	8002800 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	2b01      	cmp	r3, #1
 8002784:	d107      	bne.n	8002796 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002786:	4b47      	ldr	r3, [pc, #284]	; (80028a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d115      	bne.n	80027be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e07f      	b.n	8002896 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	2b02      	cmp	r3, #2
 800279c:	d107      	bne.n	80027ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800279e:	4b41      	ldr	r3, [pc, #260]	; (80028a4 <HAL_RCC_ClockConfig+0x1c4>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d109      	bne.n	80027be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e073      	b.n	8002896 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ae:	4b3d      	ldr	r3, [pc, #244]	; (80028a4 <HAL_RCC_ClockConfig+0x1c4>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d101      	bne.n	80027be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e06b      	b.n	8002896 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027be:	4b39      	ldr	r3, [pc, #228]	; (80028a4 <HAL_RCC_ClockConfig+0x1c4>)
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f023 0203 	bic.w	r2, r3, #3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	4936      	ldr	r1, [pc, #216]	; (80028a4 <HAL_RCC_ClockConfig+0x1c4>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027d0:	f7ff fa44 	bl	8001c5c <HAL_GetTick>
 80027d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027d6:	e00a      	b.n	80027ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027d8:	f7ff fa40 	bl	8001c5c <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e053      	b.n	8002896 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ee:	4b2d      	ldr	r3, [pc, #180]	; (80028a4 <HAL_RCC_ClockConfig+0x1c4>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f003 020c 	and.w	r2, r3, #12
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d1eb      	bne.n	80027d8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002800:	4b27      	ldr	r3, [pc, #156]	; (80028a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0307 	and.w	r3, r3, #7
 8002808:	683a      	ldr	r2, [r7, #0]
 800280a:	429a      	cmp	r2, r3
 800280c:	d210      	bcs.n	8002830 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800280e:	4b24      	ldr	r3, [pc, #144]	; (80028a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f023 0207 	bic.w	r2, r3, #7
 8002816:	4922      	ldr	r1, [pc, #136]	; (80028a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	4313      	orrs	r3, r2
 800281c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800281e:	4b20      	ldr	r3, [pc, #128]	; (80028a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0307 	and.w	r3, r3, #7
 8002826:	683a      	ldr	r2, [r7, #0]
 8002828:	429a      	cmp	r2, r3
 800282a:	d001      	beq.n	8002830 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e032      	b.n	8002896 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0304 	and.w	r3, r3, #4
 8002838:	2b00      	cmp	r3, #0
 800283a:	d008      	beq.n	800284e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800283c:	4b19      	ldr	r3, [pc, #100]	; (80028a4 <HAL_RCC_ClockConfig+0x1c4>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	4916      	ldr	r1, [pc, #88]	; (80028a4 <HAL_RCC_ClockConfig+0x1c4>)
 800284a:	4313      	orrs	r3, r2
 800284c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0308 	and.w	r3, r3, #8
 8002856:	2b00      	cmp	r3, #0
 8002858:	d009      	beq.n	800286e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800285a:	4b12      	ldr	r3, [pc, #72]	; (80028a4 <HAL_RCC_ClockConfig+0x1c4>)
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	00db      	lsls	r3, r3, #3
 8002868:	490e      	ldr	r1, [pc, #56]	; (80028a4 <HAL_RCC_ClockConfig+0x1c4>)
 800286a:	4313      	orrs	r3, r2
 800286c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800286e:	f000 f821 	bl	80028b4 <HAL_RCC_GetSysClockFreq>
 8002872:	4602      	mov	r2, r0
 8002874:	4b0b      	ldr	r3, [pc, #44]	; (80028a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	091b      	lsrs	r3, r3, #4
 800287a:	f003 030f 	and.w	r3, r3, #15
 800287e:	490a      	ldr	r1, [pc, #40]	; (80028a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002880:	5ccb      	ldrb	r3, [r1, r3]
 8002882:	fa22 f303 	lsr.w	r3, r2, r3
 8002886:	4a09      	ldr	r2, [pc, #36]	; (80028ac <HAL_RCC_ClockConfig+0x1cc>)
 8002888:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800288a:	4b09      	ldr	r3, [pc, #36]	; (80028b0 <HAL_RCC_ClockConfig+0x1d0>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4618      	mov	r0, r3
 8002890:	f7ff f9a2 	bl	8001bd8 <HAL_InitTick>

  return HAL_OK;
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3710      	adds	r7, #16
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	40022000 	.word	0x40022000
 80028a4:	40021000 	.word	0x40021000
 80028a8:	080031f8 	.word	0x080031f8
 80028ac:	20000034 	.word	0x20000034
 80028b0:	20000038 	.word	0x20000038

080028b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028b4:	b490      	push	{r4, r7}
 80028b6:	b08a      	sub	sp, #40	; 0x28
 80028b8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80028ba:	4b2a      	ldr	r3, [pc, #168]	; (8002964 <HAL_RCC_GetSysClockFreq+0xb0>)
 80028bc:	1d3c      	adds	r4, r7, #4
 80028be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80028c4:	f240 2301 	movw	r3, #513	; 0x201
 80028c8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028ca:	2300      	movs	r3, #0
 80028cc:	61fb      	str	r3, [r7, #28]
 80028ce:	2300      	movs	r3, #0
 80028d0:	61bb      	str	r3, [r7, #24]
 80028d2:	2300      	movs	r3, #0
 80028d4:	627b      	str	r3, [r7, #36]	; 0x24
 80028d6:	2300      	movs	r3, #0
 80028d8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80028da:	2300      	movs	r3, #0
 80028dc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80028de:	4b22      	ldr	r3, [pc, #136]	; (8002968 <HAL_RCC_GetSysClockFreq+0xb4>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	f003 030c 	and.w	r3, r3, #12
 80028ea:	2b04      	cmp	r3, #4
 80028ec:	d002      	beq.n	80028f4 <HAL_RCC_GetSysClockFreq+0x40>
 80028ee:	2b08      	cmp	r3, #8
 80028f0:	d003      	beq.n	80028fa <HAL_RCC_GetSysClockFreq+0x46>
 80028f2:	e02d      	b.n	8002950 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028f4:	4b1d      	ldr	r3, [pc, #116]	; (800296c <HAL_RCC_GetSysClockFreq+0xb8>)
 80028f6:	623b      	str	r3, [r7, #32]
      break;
 80028f8:	e02d      	b.n	8002956 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	0c9b      	lsrs	r3, r3, #18
 80028fe:	f003 030f 	and.w	r3, r3, #15
 8002902:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002906:	4413      	add	r3, r2
 8002908:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800290c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d013      	beq.n	8002940 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002918:	4b13      	ldr	r3, [pc, #76]	; (8002968 <HAL_RCC_GetSysClockFreq+0xb4>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	0c5b      	lsrs	r3, r3, #17
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002926:	4413      	add	r3, r2
 8002928:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800292c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	4a0e      	ldr	r2, [pc, #56]	; (800296c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002932:	fb02 f203 	mul.w	r2, r2, r3
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	fbb2 f3f3 	udiv	r3, r2, r3
 800293c:	627b      	str	r3, [r7, #36]	; 0x24
 800293e:	e004      	b.n	800294a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	4a0b      	ldr	r2, [pc, #44]	; (8002970 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002944:	fb02 f303 	mul.w	r3, r2, r3
 8002948:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800294a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294c:	623b      	str	r3, [r7, #32]
      break;
 800294e:	e002      	b.n	8002956 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002950:	4b06      	ldr	r3, [pc, #24]	; (800296c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002952:	623b      	str	r3, [r7, #32]
      break;
 8002954:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002956:	6a3b      	ldr	r3, [r7, #32]
}
 8002958:	4618      	mov	r0, r3
 800295a:	3728      	adds	r7, #40	; 0x28
 800295c:	46bd      	mov	sp, r7
 800295e:	bc90      	pop	{r4, r7}
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	080031e8 	.word	0x080031e8
 8002968:	40021000 	.word	0x40021000
 800296c:	007a1200 	.word	0x007a1200
 8002970:	003d0900 	.word	0x003d0900

08002974 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002974:	b480      	push	{r7}
 8002976:	b085      	sub	sp, #20
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800297c:	4b0a      	ldr	r3, [pc, #40]	; (80029a8 <RCC_Delay+0x34>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a0a      	ldr	r2, [pc, #40]	; (80029ac <RCC_Delay+0x38>)
 8002982:	fba2 2303 	umull	r2, r3, r2, r3
 8002986:	0a5b      	lsrs	r3, r3, #9
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	fb02 f303 	mul.w	r3, r2, r3
 800298e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002990:	bf00      	nop
  }
  while (Delay --);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	1e5a      	subs	r2, r3, #1
 8002996:	60fa      	str	r2, [r7, #12]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d1f9      	bne.n	8002990 <RCC_Delay+0x1c>
}
 800299c:	bf00      	nop
 800299e:	bf00      	nop
 80029a0:	3714      	adds	r7, #20
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bc80      	pop	{r7}
 80029a6:	4770      	bx	lr
 80029a8:	20000034 	.word	0x20000034
 80029ac:	10624dd3 	.word	0x10624dd3

080029b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e041      	b.n	8002a46 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d106      	bne.n	80029dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f7ff f866 	bl	8001aa8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2202      	movs	r2, #2
 80029e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	3304      	adds	r3, #4
 80029ec:	4619      	mov	r1, r3
 80029ee:	4610      	mov	r0, r2
 80029f0:	f000 fa6a 	bl	8002ec8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
	...

08002a50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b085      	sub	sp, #20
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d001      	beq.n	8002a68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e035      	b.n	8002ad4 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2202      	movs	r2, #2
 8002a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	68da      	ldr	r2, [r3, #12]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f042 0201 	orr.w	r2, r2, #1
 8002a7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a16      	ldr	r2, [pc, #88]	; (8002ae0 <HAL_TIM_Base_Start_IT+0x90>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d009      	beq.n	8002a9e <HAL_TIM_Base_Start_IT+0x4e>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a92:	d004      	beq.n	8002a9e <HAL_TIM_Base_Start_IT+0x4e>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a12      	ldr	r2, [pc, #72]	; (8002ae4 <HAL_TIM_Base_Start_IT+0x94>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d111      	bne.n	8002ac2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	f003 0307 	and.w	r3, r3, #7
 8002aa8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2b06      	cmp	r3, #6
 8002aae:	d010      	beq.n	8002ad2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f042 0201 	orr.w	r2, r2, #1
 8002abe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ac0:	e007      	b.n	8002ad2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f042 0201 	orr.w	r2, r2, #1
 8002ad0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3714      	adds	r7, #20
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bc80      	pop	{r7}
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	40012c00 	.word	0x40012c00
 8002ae4:	40000400 	.word	0x40000400

08002ae8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	691b      	ldr	r3, [r3, #16]
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d122      	bne.n	8002b44 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	f003 0302 	and.w	r3, r3, #2
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d11b      	bne.n	8002b44 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f06f 0202 	mvn.w	r2, #2
 8002b14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2201      	movs	r2, #1
 8002b1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	699b      	ldr	r3, [r3, #24]
 8002b22:	f003 0303 	and.w	r3, r3, #3
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d003      	beq.n	8002b32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 f9b1 	bl	8002e92 <HAL_TIM_IC_CaptureCallback>
 8002b30:	e005      	b.n	8002b3e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 f9a4 	bl	8002e80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f000 f9b3 	bl	8002ea4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	f003 0304 	and.w	r3, r3, #4
 8002b4e:	2b04      	cmp	r3, #4
 8002b50:	d122      	bne.n	8002b98 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	f003 0304 	and.w	r3, r3, #4
 8002b5c:	2b04      	cmp	r3, #4
 8002b5e:	d11b      	bne.n	8002b98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f06f 0204 	mvn.w	r2, #4
 8002b68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2202      	movs	r2, #2
 8002b6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	699b      	ldr	r3, [r3, #24]
 8002b76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d003      	beq.n	8002b86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 f987 	bl	8002e92 <HAL_TIM_IC_CaptureCallback>
 8002b84:	e005      	b.n	8002b92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 f97a 	bl	8002e80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f000 f989 	bl	8002ea4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	f003 0308 	and.w	r3, r3, #8
 8002ba2:	2b08      	cmp	r3, #8
 8002ba4:	d122      	bne.n	8002bec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	f003 0308 	and.w	r3, r3, #8
 8002bb0:	2b08      	cmp	r3, #8
 8002bb2:	d11b      	bne.n	8002bec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f06f 0208 	mvn.w	r2, #8
 8002bbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2204      	movs	r2, #4
 8002bc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	69db      	ldr	r3, [r3, #28]
 8002bca:	f003 0303 	and.w	r3, r3, #3
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d003      	beq.n	8002bda <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f000 f95d 	bl	8002e92 <HAL_TIM_IC_CaptureCallback>
 8002bd8:	e005      	b.n	8002be6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 f950 	bl	8002e80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f000 f95f 	bl	8002ea4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	f003 0310 	and.w	r3, r3, #16
 8002bf6:	2b10      	cmp	r3, #16
 8002bf8:	d122      	bne.n	8002c40 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	f003 0310 	and.w	r3, r3, #16
 8002c04:	2b10      	cmp	r3, #16
 8002c06:	d11b      	bne.n	8002c40 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f06f 0210 	mvn.w	r2, #16
 8002c10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2208      	movs	r2, #8
 8002c16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	69db      	ldr	r3, [r3, #28]
 8002c1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d003      	beq.n	8002c2e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 f933 	bl	8002e92 <HAL_TIM_IC_CaptureCallback>
 8002c2c:	e005      	b.n	8002c3a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 f926 	bl	8002e80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f000 f935 	bl	8002ea4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	f003 0301 	and.w	r3, r3, #1
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d10e      	bne.n	8002c6c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	f003 0301 	and.w	r3, r3, #1
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d107      	bne.n	8002c6c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f06f 0201 	mvn.w	r2, #1
 8002c64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f7fe fe44 	bl	80018f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c76:	2b80      	cmp	r3, #128	; 0x80
 8002c78:	d10e      	bne.n	8002c98 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c84:	2b80      	cmp	r3, #128	; 0x80
 8002c86:	d107      	bne.n	8002c98 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 fa67 	bl	8003166 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca2:	2b40      	cmp	r3, #64	; 0x40
 8002ca4:	d10e      	bne.n	8002cc4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cb0:	2b40      	cmp	r3, #64	; 0x40
 8002cb2:	d107      	bne.n	8002cc4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002cbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f000 f8f9 	bl	8002eb6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	f003 0320 	and.w	r3, r3, #32
 8002cce:	2b20      	cmp	r3, #32
 8002cd0:	d10e      	bne.n	8002cf0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	f003 0320 	and.w	r3, r3, #32
 8002cdc:	2b20      	cmp	r3, #32
 8002cde:	d107      	bne.n	8002cf0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f06f 0220 	mvn.w	r2, #32
 8002ce8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 fa32 	bl	8003154 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002cf0:	bf00      	nop
 8002cf2:	3708      	adds	r7, #8
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d101      	bne.n	8002d10 <HAL_TIM_ConfigClockSource+0x18>
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	e0b3      	b.n	8002e78 <HAL_TIM_ConfigClockSource+0x180>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2202      	movs	r2, #2
 8002d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d2e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d36:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	68fa      	ldr	r2, [r7, #12]
 8002d3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d48:	d03e      	beq.n	8002dc8 <HAL_TIM_ConfigClockSource+0xd0>
 8002d4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d4e:	f200 8087 	bhi.w	8002e60 <HAL_TIM_ConfigClockSource+0x168>
 8002d52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d56:	f000 8085 	beq.w	8002e64 <HAL_TIM_ConfigClockSource+0x16c>
 8002d5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d5e:	d87f      	bhi.n	8002e60 <HAL_TIM_ConfigClockSource+0x168>
 8002d60:	2b70      	cmp	r3, #112	; 0x70
 8002d62:	d01a      	beq.n	8002d9a <HAL_TIM_ConfigClockSource+0xa2>
 8002d64:	2b70      	cmp	r3, #112	; 0x70
 8002d66:	d87b      	bhi.n	8002e60 <HAL_TIM_ConfigClockSource+0x168>
 8002d68:	2b60      	cmp	r3, #96	; 0x60
 8002d6a:	d050      	beq.n	8002e0e <HAL_TIM_ConfigClockSource+0x116>
 8002d6c:	2b60      	cmp	r3, #96	; 0x60
 8002d6e:	d877      	bhi.n	8002e60 <HAL_TIM_ConfigClockSource+0x168>
 8002d70:	2b50      	cmp	r3, #80	; 0x50
 8002d72:	d03c      	beq.n	8002dee <HAL_TIM_ConfigClockSource+0xf6>
 8002d74:	2b50      	cmp	r3, #80	; 0x50
 8002d76:	d873      	bhi.n	8002e60 <HAL_TIM_ConfigClockSource+0x168>
 8002d78:	2b40      	cmp	r3, #64	; 0x40
 8002d7a:	d058      	beq.n	8002e2e <HAL_TIM_ConfigClockSource+0x136>
 8002d7c:	2b40      	cmp	r3, #64	; 0x40
 8002d7e:	d86f      	bhi.n	8002e60 <HAL_TIM_ConfigClockSource+0x168>
 8002d80:	2b30      	cmp	r3, #48	; 0x30
 8002d82:	d064      	beq.n	8002e4e <HAL_TIM_ConfigClockSource+0x156>
 8002d84:	2b30      	cmp	r3, #48	; 0x30
 8002d86:	d86b      	bhi.n	8002e60 <HAL_TIM_ConfigClockSource+0x168>
 8002d88:	2b20      	cmp	r3, #32
 8002d8a:	d060      	beq.n	8002e4e <HAL_TIM_ConfigClockSource+0x156>
 8002d8c:	2b20      	cmp	r3, #32
 8002d8e:	d867      	bhi.n	8002e60 <HAL_TIM_ConfigClockSource+0x168>
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d05c      	beq.n	8002e4e <HAL_TIM_ConfigClockSource+0x156>
 8002d94:	2b10      	cmp	r3, #16
 8002d96:	d05a      	beq.n	8002e4e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002d98:	e062      	b.n	8002e60 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6818      	ldr	r0, [r3, #0]
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	6899      	ldr	r1, [r3, #8]
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	685a      	ldr	r2, [r3, #4]
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	f000 f95c 	bl	8003066 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002dbc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	609a      	str	r2, [r3, #8]
      break;
 8002dc6:	e04e      	b.n	8002e66 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6818      	ldr	r0, [r3, #0]
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	6899      	ldr	r1, [r3, #8]
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	685a      	ldr	r2, [r3, #4]
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	f000 f945 	bl	8003066 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	689a      	ldr	r2, [r3, #8]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002dea:	609a      	str	r2, [r3, #8]
      break;
 8002dec:	e03b      	b.n	8002e66 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6818      	ldr	r0, [r3, #0]
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	6859      	ldr	r1, [r3, #4]
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	68db      	ldr	r3, [r3, #12]
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	f000 f8bc 	bl	8002f78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2150      	movs	r1, #80	; 0x50
 8002e06:	4618      	mov	r0, r3
 8002e08:	f000 f913 	bl	8003032 <TIM_ITRx_SetConfig>
      break;
 8002e0c:	e02b      	b.n	8002e66 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6818      	ldr	r0, [r3, #0]
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	6859      	ldr	r1, [r3, #4]
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	f000 f8da 	bl	8002fd4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2160      	movs	r1, #96	; 0x60
 8002e26:	4618      	mov	r0, r3
 8002e28:	f000 f903 	bl	8003032 <TIM_ITRx_SetConfig>
      break;
 8002e2c:	e01b      	b.n	8002e66 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6818      	ldr	r0, [r3, #0]
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	6859      	ldr	r1, [r3, #4]
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	f000 f89c 	bl	8002f78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2140      	movs	r1, #64	; 0x40
 8002e46:	4618      	mov	r0, r3
 8002e48:	f000 f8f3 	bl	8003032 <TIM_ITRx_SetConfig>
      break;
 8002e4c:	e00b      	b.n	8002e66 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4619      	mov	r1, r3
 8002e58:	4610      	mov	r0, r2
 8002e5a:	f000 f8ea 	bl	8003032 <TIM_ITRx_SetConfig>
        break;
 8002e5e:	e002      	b.n	8002e66 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002e60:	bf00      	nop
 8002e62:	e000      	b.n	8002e66 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002e64:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e76:	2300      	movs	r3, #0
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3710      	adds	r7, #16
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e88:	bf00      	nop
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bc80      	pop	{r7}
 8002e90:	4770      	bx	lr

08002e92 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e92:	b480      	push	{r7}
 8002e94:	b083      	sub	sp, #12
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e9a:	bf00      	nop
 8002e9c:	370c      	adds	r7, #12
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bc80      	pop	{r7}
 8002ea2:	4770      	bx	lr

08002ea4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002eac:	bf00      	nop
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bc80      	pop	{r7}
 8002eb4:	4770      	bx	lr

08002eb6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002eb6:	b480      	push	{r7}
 8002eb8:	b083      	sub	sp, #12
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ebe:	bf00      	nop
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bc80      	pop	{r7}
 8002ec6:	4770      	bx	lr

08002ec8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b085      	sub	sp, #20
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4a25      	ldr	r2, [pc, #148]	; (8002f70 <TIM_Base_SetConfig+0xa8>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d007      	beq.n	8002ef0 <TIM_Base_SetConfig+0x28>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ee6:	d003      	beq.n	8002ef0 <TIM_Base_SetConfig+0x28>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	4a22      	ldr	r2, [pc, #136]	; (8002f74 <TIM_Base_SetConfig+0xac>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d108      	bne.n	8002f02 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ef6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	68fa      	ldr	r2, [r7, #12]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a1a      	ldr	r2, [pc, #104]	; (8002f70 <TIM_Base_SetConfig+0xa8>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d007      	beq.n	8002f1a <TIM_Base_SetConfig+0x52>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f10:	d003      	beq.n	8002f1a <TIM_Base_SetConfig+0x52>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a17      	ldr	r2, [pc, #92]	; (8002f74 <TIM_Base_SetConfig+0xac>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d108      	bne.n	8002f2c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	68fa      	ldr	r2, [r7, #12]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	695b      	ldr	r3, [r3, #20]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	68fa      	ldr	r2, [r7, #12]
 8002f3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	689a      	ldr	r2, [r3, #8]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4a07      	ldr	r2, [pc, #28]	; (8002f70 <TIM_Base_SetConfig+0xa8>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d103      	bne.n	8002f60 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	691a      	ldr	r2, [r3, #16]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	615a      	str	r2, [r3, #20]
}
 8002f66:	bf00      	nop
 8002f68:	3714      	adds	r7, #20
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bc80      	pop	{r7}
 8002f6e:	4770      	bx	lr
 8002f70:	40012c00 	.word	0x40012c00
 8002f74:	40000400 	.word	0x40000400

08002f78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b087      	sub	sp, #28
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6a1b      	ldr	r3, [r3, #32]
 8002f88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6a1b      	ldr	r3, [r3, #32]
 8002f8e:	f023 0201 	bic.w	r2, r3, #1
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fa2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	011b      	lsls	r3, r3, #4
 8002fa8:	693a      	ldr	r2, [r7, #16]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	f023 030a 	bic.w	r3, r3, #10
 8002fb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002fb6:	697a      	ldr	r2, [r7, #20]
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	693a      	ldr	r2, [r7, #16]
 8002fc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	697a      	ldr	r2, [r7, #20]
 8002fc8:	621a      	str	r2, [r3, #32]
}
 8002fca:	bf00      	nop
 8002fcc:	371c      	adds	r7, #28
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bc80      	pop	{r7}
 8002fd2:	4770      	bx	lr

08002fd4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b087      	sub	sp, #28
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6a1b      	ldr	r3, [r3, #32]
 8002fe4:	f023 0210 	bic.w	r2, r3, #16
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6a1b      	ldr	r3, [r3, #32]
 8002ff6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ffe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	031b      	lsls	r3, r3, #12
 8003004:	697a      	ldr	r2, [r7, #20]
 8003006:	4313      	orrs	r3, r2
 8003008:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003010:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	011b      	lsls	r3, r3, #4
 8003016:	693a      	ldr	r2, [r7, #16]
 8003018:	4313      	orrs	r3, r2
 800301a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	697a      	ldr	r2, [r7, #20]
 8003020:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	693a      	ldr	r2, [r7, #16]
 8003026:	621a      	str	r2, [r3, #32]
}
 8003028:	bf00      	nop
 800302a:	371c      	adds	r7, #28
 800302c:	46bd      	mov	sp, r7
 800302e:	bc80      	pop	{r7}
 8003030:	4770      	bx	lr

08003032 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003032:	b480      	push	{r7}
 8003034:	b085      	sub	sp, #20
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
 800303a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003048:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800304a:	683a      	ldr	r2, [r7, #0]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	4313      	orrs	r3, r2
 8003050:	f043 0307 	orr.w	r3, r3, #7
 8003054:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	68fa      	ldr	r2, [r7, #12]
 800305a:	609a      	str	r2, [r3, #8]
}
 800305c:	bf00      	nop
 800305e:	3714      	adds	r7, #20
 8003060:	46bd      	mov	sp, r7
 8003062:	bc80      	pop	{r7}
 8003064:	4770      	bx	lr

08003066 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003066:	b480      	push	{r7}
 8003068:	b087      	sub	sp, #28
 800306a:	af00      	add	r7, sp, #0
 800306c:	60f8      	str	r0, [r7, #12]
 800306e:	60b9      	str	r1, [r7, #8]
 8003070:	607a      	str	r2, [r7, #4]
 8003072:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003080:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	021a      	lsls	r2, r3, #8
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	431a      	orrs	r2, r3
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	4313      	orrs	r3, r2
 800308e:	697a      	ldr	r2, [r7, #20]
 8003090:	4313      	orrs	r3, r2
 8003092:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	697a      	ldr	r2, [r7, #20]
 8003098:	609a      	str	r2, [r3, #8]
}
 800309a:	bf00      	nop
 800309c:	371c      	adds	r7, #28
 800309e:	46bd      	mov	sp, r7
 80030a0:	bc80      	pop	{r7}
 80030a2:	4770      	bx	lr

080030a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b085      	sub	sp, #20
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d101      	bne.n	80030bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80030b8:	2302      	movs	r3, #2
 80030ba:	e041      	b.n	8003140 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2202      	movs	r2, #2
 80030c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	68fa      	ldr	r2, [r7, #12]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	68fa      	ldr	r2, [r7, #12]
 80030f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a14      	ldr	r2, [pc, #80]	; (800314c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d009      	beq.n	8003114 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003108:	d004      	beq.n	8003114 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a10      	ldr	r2, [pc, #64]	; (8003150 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d10c      	bne.n	800312e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800311a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	68ba      	ldr	r2, [r7, #8]
 8003122:	4313      	orrs	r3, r2
 8003124:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68ba      	ldr	r2, [r7, #8]
 800312c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2201      	movs	r2, #1
 8003132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800313e:	2300      	movs	r3, #0
}
 8003140:	4618      	mov	r0, r3
 8003142:	3714      	adds	r7, #20
 8003144:	46bd      	mov	sp, r7
 8003146:	bc80      	pop	{r7}
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	40012c00 	.word	0x40012c00
 8003150:	40000400 	.word	0x40000400

08003154 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800315c:	bf00      	nop
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	bc80      	pop	{r7}
 8003164:	4770      	bx	lr

08003166 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003166:	b480      	push	{r7}
 8003168:	b083      	sub	sp, #12
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800316e:	bf00      	nop
 8003170:	370c      	adds	r7, #12
 8003172:	46bd      	mov	sp, r7
 8003174:	bc80      	pop	{r7}
 8003176:	4770      	bx	lr

08003178 <__libc_init_array>:
 8003178:	b570      	push	{r4, r5, r6, lr}
 800317a:	2600      	movs	r6, #0
 800317c:	4d0c      	ldr	r5, [pc, #48]	; (80031b0 <__libc_init_array+0x38>)
 800317e:	4c0d      	ldr	r4, [pc, #52]	; (80031b4 <__libc_init_array+0x3c>)
 8003180:	1b64      	subs	r4, r4, r5
 8003182:	10a4      	asrs	r4, r4, #2
 8003184:	42a6      	cmp	r6, r4
 8003186:	d109      	bne.n	800319c <__libc_init_array+0x24>
 8003188:	f000 f822 	bl	80031d0 <_init>
 800318c:	2600      	movs	r6, #0
 800318e:	4d0a      	ldr	r5, [pc, #40]	; (80031b8 <__libc_init_array+0x40>)
 8003190:	4c0a      	ldr	r4, [pc, #40]	; (80031bc <__libc_init_array+0x44>)
 8003192:	1b64      	subs	r4, r4, r5
 8003194:	10a4      	asrs	r4, r4, #2
 8003196:	42a6      	cmp	r6, r4
 8003198:	d105      	bne.n	80031a6 <__libc_init_array+0x2e>
 800319a:	bd70      	pop	{r4, r5, r6, pc}
 800319c:	f855 3b04 	ldr.w	r3, [r5], #4
 80031a0:	4798      	blx	r3
 80031a2:	3601      	adds	r6, #1
 80031a4:	e7ee      	b.n	8003184 <__libc_init_array+0xc>
 80031a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80031aa:	4798      	blx	r3
 80031ac:	3601      	adds	r6, #1
 80031ae:	e7f2      	b.n	8003196 <__libc_init_array+0x1e>
 80031b0:	08003208 	.word	0x08003208
 80031b4:	08003208 	.word	0x08003208
 80031b8:	08003208 	.word	0x08003208
 80031bc:	0800320c 	.word	0x0800320c

080031c0 <memset>:
 80031c0:	4603      	mov	r3, r0
 80031c2:	4402      	add	r2, r0
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d100      	bne.n	80031ca <memset+0xa>
 80031c8:	4770      	bx	lr
 80031ca:	f803 1b01 	strb.w	r1, [r3], #1
 80031ce:	e7f9      	b.n	80031c4 <memset+0x4>

080031d0 <_init>:
 80031d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031d2:	bf00      	nop
 80031d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031d6:	bc08      	pop	{r3}
 80031d8:	469e      	mov	lr, r3
 80031da:	4770      	bx	lr

080031dc <_fini>:
 80031dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031de:	bf00      	nop
 80031e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031e2:	bc08      	pop	{r3}
 80031e4:	469e      	mov	lr, r3
 80031e6:	4770      	bx	lr
